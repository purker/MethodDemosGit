<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.002913">
<title confidence="0.9970685">
Add-A-Tag: Learning Adaptive User Profiles from
Bookmark Collections
</title>
<author confidence="0.96961">
Elke Michlmayr♦ Steve Cayzer$ Paul Shabajee$
</author>
<email confidence="0.386416">
michlmayr®wit.tuwien.ac.at steve.cayzer®hp.com paul.shabajee®hp.com
</email>
<note confidence="0.810588">
*
</note>
<title confidence="0.89358">
♦Women’s Postgraduate College for Internet Technologies (WIT) , Vienna University of Technology, Vienna, Austria
</title>
<author confidence="0.731942">
$HP Labs, Filton Road, Stoke Gifford, Bristol BS34 8QZ, United Kingdom
</author>
<sectionHeader confidence="0.957286" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.98660325">
In this paper we construct adaptive user profiles from tag-
ging data. We present and evaluate an algorithm for creating
such profiles, characterizing its behavior through statistical
analysis.
</bodyText>
<sectionHeader confidence="0.917915" genericHeader="keywords">
Keywords
</sectionHeader>
<bodyText confidence="0.589188">
tagging user profiles adaptivity
</bodyText>
<sectionHeader confidence="0.996138" genericHeader="introduction">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999944857142857">
Collaborative tagging systems, also called folksonomies or so-
cial bookmarking services, allow their users to manage book-
marks online and to annotate them with free-text keywords
(tags) for improving re-discovery of information. The most
well-known service, del.icio.us [4], was started in 2003 and
many other services have followed since. Since many users
of a folksonomy stick with the same bookmark collection for
years, these data contain very fine-grained information about
a user’s changing interests over time.
This paper describes how to utilize data from a social book-
marking service to create user profiles that can in turn be
used for Information Filtering (IF). Unlike many other profile
learning mechanisms, which usually rely on relevance feed-
back from the user, our method does not require any addi-
tional user input. Moreover, since tagging data is time-based,
it allows us to create user profiles that dynamically adapt
to drifts in users’ interests. The profile should represent the
most important parts of a users’ behavior (that is, some com-
pression, clustering or summarization needs to be performed).
Both persistent long-term interests and transient short-term
interests should co-exist in the profile.
</bodyText>
<sectionHeader confidence="0.936573" genericHeader="method">
2. The Add-A-Tag algorithm
</sectionHeader>
<bodyText confidence="0.999870666666667">
We focus not only on which tags have been used, but rather
on which tags have been used in combination. This can be
achieved by relying on the co-occurrence technique. If two
tags are used in combination (co-occur) by a certain user
for annotating a certain bookmark, there is some kind of se-
mantic relationship between them. The more often two tags
</bodyText>
<footnote confidence="0.856613">
*This research has partly been funded by the Austrian Fed-
eral Ministry for Education, Science, and Culture (bm:bwk),
and the European Social Fund (ESF) under grant 31.963/46-
VII/9/2002.
ICWSM’2007 Boulder, Colorado, USA
</footnote>
<bodyText confidence="0.983783137931035">
are used in combination, the more intense this relationship
is. This is represented by a graph with labeled nodes and
undirected weighted edges in which nodes correspond to tags
and edges correspond to the relationship between tags. Each
time a new tag is used, a new node for this tag is added to
the graph. Each time a new combination of tags is used, a
new edge with weight α between the corresponding nodes is
created in the graph. If two tags co-occur again, the weight
for the corresponding edge is increased by β.
To include the age of the bookmarks in the user profile
we extend the co-occurrence approach with the evaporation
technique known from ant algorithms [2]. Evaporation is a
simple method to add time-based information to the weights
of edges in a graph: Each time the profile graph is updated
with tags from a newly added bookmark, the weights of each
edge in the graph is decreased slightly by removing a small
percentage of its current value.
Consider a user u adding a bookmark item b tagged with
tags t1, ... , tn to his or her bookmark collection. The profile
graph Gu = (V, E) where V = v1, ... , vn is the set of vertices
(which correspond to tags) and E = e1, ... , en is the set of
edges, is updated as follows. Firstly, the existing information
in the graph is changed by applying the evaporation formula
shown in Equation 1 to every edge ex G E
wem &amp;lt;-- wem — ρ &apos; wem , (1)
where ρ G [0, 1] is a constant and wem is the weight of edge ex.
Secondly, the n new tags from bookmark b: t1, ... , tn are
added to the graph. For every combination titj where i, j G
1, ... , n and i &amp;lt; j, the following procedure is executed:
</bodyText>
<listItem confidence="0.997767875">
1. For every tag tx (x G i, j), add a corresponding ver-
tex vx to graph Gu, if vx does not exist.
2. If it does not yet exist, add an edge with weight α be-
tween vertex vi and vertex vj to graph Gu, where con-
stant α is a real number and α &gt; 0.
3. Otherwise, if an edge between vertex vi and vertex vj
exists, increase its weight by β. Constant β is a real
number and β &gt; 0.
</listItem>
<bodyText confidence="0.99979825">
This is executed each time the user adds an bookmark item
to the bookmark collection. It creates a profile graph. Ex-
tracting the user profile from the profile graph is defined as
follows.
</bodyText>
<listItem confidence="0.9018065">
1. Create a ordered set Es from E = e1, ... , en. Es con-
tains all edges ex (x G 1, ... , n) from graph Gu ordered
in decreasing order by their weights wem .
2. Create set Ek by extracting the top k elements from
set Es, where k is a natural number and k &gt; 0.
3. Create graph Gu′ which contains all edges from Ek and
all vertices v. from graph Gu which are incident to one
of the edges in Ek.
</listItem>
<bodyText confidence="0.998162">
The size of the user profile Gu′ is determined by the value
chosen for parameter k.
</bodyText>
<sectionHeader confidence="0.847572" genericHeader="evaluation">
3. Evaluation of profile adaptivity
</sectionHeader>
<bodyText confidence="0.999493">
The amount of change in the user profile depends on the
profile creation mechanism, but also on the user’s activity
pattern. We assess it by comparing the Add-A-Tag algorithm
(1) with and (2) without using the evaporation feature. The
user’s activity pattern serves as a reference value.
We need a way for determining the change of a profile over
time. If we compute the user profile of user u at time t1 and
again at time t2, we need to be able to measure the difference
(distance) between these two user profiles. Since measuring
graph distances is a only partly solved issue [1], we map the
graphs onto a simpler structure which only contains the in-
formation we need for the comparison. This structure is a
set of edges in decreasing weight order. We define the metric
dist(S1, S2) for the distance between two sets S1 and S2 based
on the Kendall τ coefficient [3] – a standard measure for com-
paring ordered sets that includes rank correlation – as shown
in Equations 2a to 2c. The result values for dist(S1, S2) are
in the range of 0 (if S1 and S2 are the same, that is, equally
ranked) to 1 (if S1 and S2 are in reverse order).
</bodyText>
<equation confidence="0.99264075">
2 * τ(S1, S2)
dist(S1, S2) = 1 − n * (n − 1) , where (2a)
τ(S1, S2) = � ¯τi,j (S1, S2) , and (2b)
i,j∈P
</equation>
<bodyText confidence="0.970974833333333">
0 if i and j are in same
order in S1 and S2 (2c)
1 otherwise
In Equation 2a, variable n is the size of the sets. In Equa-
tion 2b, P is the set of pairs of distinct elements in S1 and
S2. The Kendall τ is applicable only for sets which have the
same members and – consequently – are of same size. For our
setting, this means that those set members that are present
in only one of the sets need to be added to the other one.
We append the missing set members to the end of the set in
order not to affect the ranking of the pairs.
Now we compute the user profiles for a sample user’s book-
mark collection. We incrementally create the profile graph
by adding the bookmark items in their temporal order, and
– each time after adding all bookmarks that were created by
the user within the time span of one week – we extract the
user profile from the profile graph. Using this procedure we
retrieve a set of user profiles
</bodyText>
<equation confidence="0.9098335">
Gu′ = {Gwx
u′ |x = {1, ... , n}}
</equation>
<bodyText confidence="0.954365428571429">
for user u and each week w.. In the next step, we apply
the metric dist to these data in order to assess the amount
of change between the weekly snapshots of the profiles. The
user profile Gwx+1
up for week w.+1 is compared to the user
profile Gwx
up for the previous week w..
</bodyText>
<figure confidence="0.9843685">
0 20 40 60 80 100
weeks
</figure>
<figureCaption confidence="0.993883">
Fig. 1: Adaptivity comparison for the co-occurrence (α = 1.0,
</figureCaption>
<bodyText confidence="0.9447112">
β = 1.0, ρ = 0, k = 20) and the Add-A-Tag approach (α =
1.0,β = 1.0, ρ = 0.01, k = 20)
The result is shown in Figure 1. What the trend lines reveal
is that both approaches exhibit a change pattern that is pro-
portional to the user’s activity pattern, but the Add-A-Tag
approach with evaporation (dashed curve) shows a consider-
ably higher amount of change and fits better with the activity
pattern (solid grey curve). If the evaporation feature is not
used (solid black curve), the degree of change in the user pro-
file decreases over time. This is particularly the case for the
results in the time span between week 80 and week 100. Al-
though the trend line for user activity shows that the user is
adding new bookmarks to the collection, the most often used
tag combinations are dominant and prevent newly arising tag
combinations from being included in the profile.
</bodyText>
<sectionHeader confidence="0.99772" genericHeader="conclusions">
4. Conclusion
</sectionHeader>
<bodyText confidence="0.988053363636364">
In this paper we proposed the Add-A-Tag algorithm for learn-
ing adaptive user profiles from bookmark collections, which is
based on a combination of (1) the co-occurrence technique for
determining the relationships between tags and (2) an evapo-
ration feature as known from ant algorithms for adapting the
user profile to trends over time. We evaluated the algorithm
by defining a metric appropriate for quantifying the amount
of change over time. What we can show is that the user pro-
files created with Add-A-Tag are adaptive in the sense that
they change according to changes in tag usage in a continuous
stream of tagging data.
</bodyText>
<sectionHeader confidence="0.999008" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.9942856">
[1] F. Buckley and F. Harary. Distance in graphs.
Addison-Wesley, 1990.
[2] M. Dorigo and G. D. Caro. New Ideas in Optimization,
chapter The Ant Colony Optimization Meta-Heuristic,
pages 11–32. McGraw-Hill, 1999.
[3] R. Fagin, R. Kumar, and D. Sivakumar. Comparing Top
k Lists. SIAM Journal on Discrete Mathematics,
17(1):134–160, October 2003.
[4] Yahoo! Inc. Del.icio.us Social Bookmarking Service.
http://del.icio.us.
</reference>
<figure confidence="0.996190111111111">
No Evaporation
Evaporation
User Activity (log)
No evaporation
Evaporation
User Activity
1
0.75
0.5
0.25
0
dist &amp; log(activity)
1.5
1.25



¯τi,j(S1, S2) =
</figure>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.341114">
<title confidence="0.996651">Add-A-Tag: Learning Adaptive User Profiles Bookmark Collections</title>
<author confidence="0.986046">Steve</author>
<email confidence="0.947054">michlmayr®wit.tuwien.ac.atsteve.cayzer®hp.compaul.shabajee®hp.com</email>
<affiliation confidence="0.7873085">Women’s Postgraduate College for Internet Technologies (WIT) , Vienna University of Technology, Vienna, Austria</affiliation>
<address confidence="0.975317">Labs, Filton Road, Stoke Gifford, Bristol BS34 8QZ, United Kingdom</address>
<abstract confidence="0.9998984">In this paper we construct adaptive user profiles from tagging data. We present and evaluate an algorithm for creating such profiles, characterizing its behavior through statistical analysis.</abstract>
<keyword confidence="0.772403">Keywords tagging user profiles adaptivity</keyword>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>F Buckley</author>
<author>F Harary</author>
</authors>
<title>Distance in graphs.</title>
<date>1990</date>
<publisher>Addison-Wesley,</publisher>
<contexts>
<context position="3868" citStr="[0, 1]" startWordPosition="631" endWordPosition="632">es, is updated as follows. Firstly, the existing information in the graph is changed by applying the evaporation formula shown in Equation 1 to every edge ex G E wem &amp;lt;-- wem — ρ &apos; wem , (1) where ρ G [0, 1] is a constant and wem is the weight of edge ex. Secondly, the n new tags from bookmark b: t1, ... , tn are added to the graph. For every combination titj where i, j G 1, ... , n and i &amp;lt; j, the follow</context>
<context position="5748" citStr="[1]" startWordPosition="1010" endWordPosition="1010">ofile of user u at time t1 and again at time t2, we need to be able to measure the difference (distance) between these two user profiles. Since measuring graph distances is a only partly solved issue [1], we map the graphs onto a simpler structure which only contains the information we need for the comparison. This structure is a set of edges in decreasing weight order. We define the metric dist(S1, </context>
</contexts>
<marker>[1]</marker>
<rawString>F. Buckley and F. Harary. Distance in graphs. Addison-Wesley, 1990.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Dorigo</author>
<author>G D Caro</author>
</authors>
<title>New Ideas in Optimization, chapter The Ant Colony Optimization Meta-Heuristic,</title>
<date>1999</date>
<pages>11--32</pages>
<publisher>McGraw-Hill,</publisher>
<contexts>
<context position="3123" citStr="[2]" startWordPosition="482" endWordPosition="482">ght for the corresponding edge is increased by β. To include the age of the bookmarks in the user profile we extend the co-occurrence approach with the evaporation technique known from ant algorithms [2]. Evaporation is a simple method to add time-based information to the weights of edges in a graph: Each time the profile graph is updated with tags from a newly added bookmark, the weights of each edg</context>
</contexts>
<marker>[2]</marker>
<rawString>M. Dorigo and G. D. Caro. New Ideas in Optimization, chapter The Ant Colony Optimization Meta-Heuristic, pages 11–32. McGraw-Hill, 1999.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Fagin</author>
<author>R Kumar</author>
<author>D Sivakumar</author>
</authors>
<title>Comparing Top k Lists.</title>
<date>2003</date>
<journal>SIAM Journal on Discrete Mathematics,</journal>
<volume>17</volume>
<issue>1</issue>
<contexts>
<context position="6034" citStr="[3]" startWordPosition="1062" endWordPosition="1062"> need for the comparison. This structure is a set of edges in decreasing weight order. We define the metric dist(S1, S2) for the distance between two sets S1 and S2 based on the Kendall τ coefficient [3] – a standard measure for comparing ordered sets that includes rank correlation – as shown in Equations 2a to 2c. The result values for dist(S1, S2) are in the range of 0 (if S1 and S2 are the same, t</context>
</contexts>
<marker>[3]</marker>
<rawString>R. Fagin, R. Kumar, and D. Sivakumar. Comparing Top k Lists. SIAM Journal on Discrete Mathematics, 17(1):134–160, October 2003.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Yahoo Inc</author>
</authors>
<title>Del.icio.us Social Bookmarking Service.</title>
<note>http://del.icio.us.</note>
<contexts>
<context position="899" citStr="[4]" startWordPosition="116" endWordPosition="116">kmarking services, allow their users to manage bookmarks online and to annotate them with free-text keywords (tags) for improving re-discovery of information. The most well-known service, del.icio.us [4], was started in 2003 and many other services have followed since. Since many users of a folksonomy stick with the same bookmark collection for years, these data contain very fine-grained information </context>
</contexts>
<marker>[4]</marker>
<rawString>Yahoo! Inc. Del.icio.us Social Bookmarking Service. http://del.icio.us.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>