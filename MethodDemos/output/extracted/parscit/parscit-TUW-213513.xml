<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.397779">
<title confidence="0.8505895">
Test Case Generation by Grammar-based Fuzzing for
Model-driven Engineering*
</title>
<author confidence="0.957976">
Magdalena Widl
</author>
<affiliation confidence="0.978776">
Knowledge-based Systems Group, Vienna University of Technology, Austria
</affiliation>
<email confidence="0.983985">
widl@kr.tuwien.ac.at
</email>
<sectionHeader confidence="0.999528" genericHeader="abstract">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999868666666667">
Software models, traditionally used mainly for documentation and informal specification
purposes, are becoming first-class development artifacts in the area of Model-driven
Engineering (MDE). In MDE, code is generated automatically from multi-view models
described in languages like the Unified Modeling Language (UML)1. Maintaining con-
sistency between the different views of a model is crucial for the generation of correct
code. As software models undergo evolution, particularly in cooperative development
environments, tool support for evolution tasks like versioning and merging is indispens-
able. It is important to thoroughly test such tools in order to avoid the introduction of
inconsistent models. However, real-life test cases that cover sufficient evolution scenarios
are difficult to obtain. We therefore suggest a method to generate artificial scenarios to
facilitate fuzz testing of model evolution tools. In previous work [2] we presented an
approach to merge concurrently evolved sequence diagrams with respect to the behavior
modeled in their corresponding state machines view. We described the sequence dia-
gram merging (SDM) problem formally, suggested a method to solve this problem, and
implemented a prototype based on the EMF framework2. As there were no benchmarks
available, we manually created a set of test cases. However, this is a very cumbersome
testing method particularly when a good coverage is needed. A set of randomly generated
instances solves this problem, as we show in the following.
</bodyText>
<sectionHeader confidence="0.641027" genericHeader="categories and subject descriptors">
2 Grammar-based Fuzzing of Model Evolution Scenarios
</sectionHeader>
<bodyText confidence="0.999718285714286">
Fuzz testing is a black-box software testing technique based on large amounts of random-
ized input data and has been successfully applied in many areas, e.g. in error detection
for UNIX applications [1]. We propose to create randomly generated sequence diagrams
and state machines based on a language definition given as metamodel and on a formal
specification of the dependencies between the two views. Sequence diagrams model
possible communication scenarios between different instances of state machines. A
sequence diagram is correct if the messages are totally ordered and the sequence of
</bodyText>
<footnote confidence="0.99603825">
? This work was supported by by the Vienna Science and Technology Fund (WWTF) through
project ICT10-018
1 http://www.omg.org/spec/UML/
2 http://www.eclipse.org/modeling/emf/
</footnote>
<bodyText confidence="0.999541">
received message symbols on each lifeline occurs as path of triggers in the state machine
that models its behavior (cf. definitions given in [2]). Based on the Ecore implementation
of the multi-view metamodel presented in [2], we first create a state machine view as a set
of state machines. Using this view, we create a correct sequence diagram that instantiates
the state machines with its lifelines. The number of state machines, upper and lower
bounds for the number of both states and transitions, the number of messages, and the
number of lifelines are defined as input parameters. The generation of states, transitions,
transition labels and the assignment of state machines to lifelines is done at random.
When generating the message sequence of a sequence diagram, the following restriction
is required to ensure its correctness: the symbol of each message must continue a path
of triggers in the state machine modeling the behavior of the lifeline that receives the
message. Hence only symbols can be considered that occur on outgoing transitions
of states to which the previous message symbol has led. Out of these symbols, one is
chosen randomly. We can also generate evolutionary changes to the models: a versioning
scenario of a sequence diagram is created by copying the diagram and adding messages.
Using this approach, we generated 100 instances of the SDM problem with different
parameter settings to find errors in and to assess the scalability of our approach presented
in [2]. These tests helped us to find some minor implementation errors and one error in
the algorithm solving the SDM problem. With the random instances being much larger
than the manual ones, we could also easily identify a performance bottleneck in the
first version of the implementation. The errors were not found by using the hand-crafted
instances because their detection required a certain combination of lifelines and message
sequences that does not occur often and is not naturally thought of by a human. The
detected errors resulted in merged sequence diagrams that were inconsistent with the set
of state machines.
</bodyText>
<sectionHeader confidence="0.99658" genericHeader="conclusions">
3 Conclusion and Future Work
</sectionHeader>
<bodyText confidence="0.999986111111111">
We proposed to use a grammar-based fuzzing approach for testing and evaluating MDE
tools. This has shown to be very effective in detecting errors in our implementation
of an algorithm for the SDM problem. While being specific to a metamodel in our
implementation, our approach can be easily adapted to a different Ecore metamodel
and thus serve to test different MDE tools. Depending on particular test cases some
adaptations may be useful. For instance, to test the SDM problem, instances that actually
have a solution (a correctly merged sequence diagram) are desirable. This could be done
by first generating a sequence diagram that represents the solution, and then infer an
instance (an original and two modified diagrams) from it.
</bodyText>
<sectionHeader confidence="0.999481" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999541">
1. B. Miller, D. Koski, C. Pheow, L. V. Maganty, R. Murthy, A. Natarajan, and J. Steidl. Fuzz
revisited: A re-examination of the reliability of unix utilities and services. Technical Report
CS-TR-1995-1268, University of Wisconsin, 1995.
2. M. Widl, A. Biere, P. Brosch, U. Egly, M. Heule, G. Kappel, M. Seidl, and H. Tompits.
Guided merging of sequence diagrams. In Pre-proceedings of SLE 2012, pages 163â€“182, 2012.
Available at http://modelevolution.org/publications/sle12.pdf.
</reference>
<page confidence="0.921324">
2
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.588197">
<title confidence="0.997794">Test Case Generation by Grammar-based Fuzzing</title>
<author confidence="0.999302">Magdalena Widl</author>
<affiliation confidence="0.991085">Knowledge-based Systems Group, Vienna University of Technology,</affiliation>
<email confidence="0.595469">widl@kr.tuwien.ac.at</email>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>B Miller</author>
<author>D Koski</author>
<author>C Pheow</author>
<author>L V Maganty</author>
<author>R Murthy</author>
<author>A Natarajan</author>
<author>J Steidl</author>
</authors>
<title>Fuzz revisited: A re-examination of the reliability of unix utilities and services.</title>
<date>1995</date>
<tech>Technical Report CS-TR-1995-1268,</tech>
<institution>University of Wisconsin,</institution>
<contexts>
<context position="1976" citStr="[1]" startWordPosition="285" endWordPosition="285">s Fuzz testing is a black-box software testing technique based on large amounts of randomized input data and has been successfully applied in many areas, e.g. in error detection for UNIX applications [1]. We propose to create randomly generated sequence diagrams and state machines based on a language definition given as metamodel and on a formal specification of the dependencies between the two views</context>
</contexts>
<marker>1.</marker>
<rawString>B. Miller, D. Koski, C. Pheow, L. V. Maganty, R. Murthy, A. Natarajan, and J. Steidl. Fuzz revisited: A re-examination of the reliability of unix utilities and services. Technical Report CS-TR-1995-1268, University of Wisconsin, 1995.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Widl</author>
<author>A Biere</author>
<author>P Brosch</author>
<author>U Egly</author>
<author>M Heule</author>
<author>G Kappel</author>
<author>M Seidl</author>
<author>H Tompits</author>
</authors>
<title>Guided merging of sequence diagrams.</title>
<date>2012</date>
<booktitle>In Pre-proceedings of SLE 2012,</booktitle>
<pages>163--182</pages>
<note>Available at http://modelevolution.org/publications/sle12.pdf.</note>
<contexts>
<context position="1139" citStr="[2]" startWordPosition="153" endWordPosition="153">that cover sufficient evolution scenarios are difficult to obtain. We therefore suggest a method to generate artificial scenarios to facilitate fuzz testing of model evolution tools. In previous work [2] we presented an approach to merge concurrently evolved sequence diagrams with respect to the behavior modeled in their corresponding state machines view. We described the sequence diagram merging (SD</context>
<context position="2686" citStr="[2]" startWordPosition="388" endWordPosition="388">w.omg.org/spec/UML/ 2 http://www.eclipse.org/modeling/emf/ received message symbols on each lifeline occurs as path of triggers in the state machine that models its behavior (cf. definitions given in [2]). Based on the Ecore implementation of the multi-view metamodel presented in [2], we first create a state machine view as a set of state machines. Using this view, we create a correct sequence diagra</context>
<context position="4038" citStr="[2]" startWordPosition="607" endWordPosition="607"> and adding messages. Using this approach, we generated 100 instances of the SDM problem with different parameter settings to find errors in and to assess the scalability of our approach presented in [2]. These tests helped us to find some minor implementation errors and one error in the algorithm solving the SDM problem. With the random instances being much larger than the manual ones, we could also</context>
</contexts>
<marker>2.</marker>
<rawString>M. Widl, A. Biere, P. Brosch, U. Egly, M. Heule, G. Kappel, M. Seidl, and H. Tompits. Guided merging of sequence diagrams. In Pre-proceedings of SLE 2012, pages 163â€“182, 2012. Available at http://modelevolution.org/publications/sle12.pdf.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>