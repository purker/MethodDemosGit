<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.264135">
<title confidence="0.9987695">
Introducing Aspect-oriented Space Containers for Efficient Publish/Subscribe
Scenarios in Intelligent Transportation Systems
</title>
<author confidence="0.9719275">
Eva Kühn, Richard Mordinyi, Sandford Bessler, Slobodanka Tomic
Laszlo Keszthelyi, Christian Schreiber Telecommunications Research Centre Vienna (FTW)
</author>
<affiliation confidence="0.9022095">
Space-based Computing Group Donau-City 1, 1210 Vienna, Austria
Vienna University of Technology {bessler, tomic}@ftw.at
</affiliation>
<address confidence="0.820885">
Favoritenstr. 9-11, 1040 Vienna, Austria
</address>
<email confidence="0.992536">
{ek,rm,lk,cs}@complang.tuwien.ac.at
</email>
<sectionHeader confidence="0.995503" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999936166666667">
The publish/subscribe paradigm is a common concept
for delivering events from information producers to con-
sumers in a decoupled manner. Some approaches allow
durable subscriptions or the transportation of events even
to mobile subscribers in a dynamic network infrastructure.
However, in the safety-critical telematics durable delivery
of events is not sufficient enough. Short network connectiv-
ity time and small bandwidth limit the number and size of
events to be transmitted hence relevant information needed
for safety-critical decision making may not be timely deliv-
ered.
In this paper we propose the integration ofpublish/ sub-
scribe systems and Aspect-oriented Space Containers
(ASC) distributed via Distributed Hash Tables (DHT) in
the network. The approach allows storage, manipulation,
pre-processing, and prioritization of messages sent to
mobile peers during bursts of connectivity.
The benefits of the proposed approach are a) less com-
plex application logic due to the processing capabilities of
Space Containers, and b) increased efficiency due to de-
livery of essential messages only aggregated and processed
while mobile peers are not connected. We describe the ar-
chitecture of the proposed approach and explain its benefits
by means of an industry use case.
</bodyText>
<sectionHeader confidence="0.999336" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999939974358975">
The publish/subscribe paradigm [8] is a common and
largely recognized concept for delivering messages in an
anonymous decoupled fashion from publishers to sub-
scribers. There are also concepts trying to ensure durability
or the correct order of events [13], even in case of mobile
peers or a completely dynamic network [10]. However,
there are application domains, like safety-critical telemat-
ics, in which the durable delivery of subscribed messages,
in other words the guaranteed delivery with ”exactly once”
semantics” may be considered a precondition for operation,
due to jurisdictional reasons, but is not adequate at all.
Among others, a durable notification service has to store all
events a peer has subscribed for while the subscriber is off-
line. Once the peer is reachable again, the saved events have
to be delivered to the associated subscriber. This means that
the peer would receive a large amount of data that it has
to process locally in order to extract relevant information.
However, in scenarios from Intelligent Transportation
Systems (ITS), mobile peers (vehicles) have only a few
seconds of connectivity and very limited bandwidth [17].
This may cause several problems: the reconnecting peer
should receive all stored events which may have very
different importance for the user or be even stale, but due
to the limited bandwidth and connectivity window only a
very few messages can be forwarded to the peer creating
a kind of back-pressure in the system. Furthermore, due
to the small connectivity window, there is a possibility
that essential information, such as safety-critical ghost
driver warnings, cannot be transmitted to the peer. If such
messages are not forwarded to the peer on time humans
lives may be jeopardized. Therefore, the safety risk grows
with the amount of irrelevant or even incorrect information
delivered instead of important life-saving information.
In this paper1 we propose the concept of Aspect-oriented
Space Containers (ASC) for linking pub/sub systems and
mobile peers with short connectivity time. The so called
Space Container [12] is a customizable storage compo-
nent for efficient storage and retrieval of structured, spatial-
temporal data distributed in a fault-tolerant manner [11]
</bodyText>
<footnote confidence="0.9978226">
1This work has been supported by the Complex Systems Design &amp; En-
gineering Lab, and by the Austrian Government and the City of Vienna
within the competence center program COMET.
978-1-4244-4985-9/09/$25.00 c~2009 IEEE 313
Authorized licensed use limited to: Universitatsbibliothek der TU Wien. Downloaded on December 4, 2009 at 09:47 from IEEE Xplore. Restrictions apply.
</footnote>
<bodyText confidence="0.997929111111111">
by means of Distributed Hash Tables (DHT) [15]. As-
pects are components with customizable application logic
executed either before or after the operation on the Space
Container for events processing. The combination of a
pub/sub medium and ASC allow the mobile peer to inset
a Space Container in the network which then acts as an
intermediate-subscriber for events in the pub/sub medium,
and processes the delivered events on behalf of that mobile
peer.
</bodyText>
<sectionHeader confidence="0.999725" genericHeader="related work">
2 Related Work
</sectionHeader>
<bodyText confidence="0.999953140845071">
The pub/sub paradigm defines two types of clients: pub-
lishers generating events, and subscribers receiving notifi-
cations of events they have previously subscribed for. This
type of messaging paradigm allows a strong decoupling of
publishers and subscribers in time and space. Furthermore,
it enables asynchronous and anonymous communication
between publishers and subscribers [8]. There are two types
of pub/sub systems: topic-based and content-based [8]. Hy-
brid pub/sub systems like Hermes [14], SIENA [5] or Re-
becca [18] support both types of subscription. Furthermore,
the pub/sub system architecture can be further classified
into client-server and peer-to-peer. In a client-server ar-
chitecture, like Gryphon [3], publishers and subscribers are
clients which are connected to a network of servers. Gen-
erally, the servers temporarily store the events generated
by publisher-clients and forwarded them to the subscriber-
clients. If a subscribed client is not directly connected to
a server, where a publisher has dispatched an event, the
server has to forward the event to other servers until the
event reaches the server capable of delivering the event di-
rectly to the subscribed client. In a P2P architecture each
node can act as a publisher, subscriber or event-forwarder
to another node.
Reliable pub/sub systems guarantee that published
events are delivered to all its subscribers. Durable (fault-
tolerant) pub/sub system are able to cope with unreachable
subscribers and servers (due to network failures or crashed
clients/servers). Some pub/sub systems like SIENA offer
a best-effort delivery strategy, i.e. the system will period-
ically retry to deliver the message until the message was
delivered successfully, a timeout expired or the maximum
retry-count was reached. In mobile environments [10]
client applications reside on a host that is moving and
therefore accessing the network (composed of so called
event brokers) from various locations [4]. The event brokers
are responsible to guarantee the reliability and durability
of the pub/sub system as described before. Furthermore, a
protocol must exist which enables the update of a client’s
subscription as it is moving from one broker to another.
During the client’s movement undeliverable events have to
be stored by the system and delivered as soon as the client
reconnects to the system. When the client reconnects at
another broker, all stored events have to be forwarded to
that broker. One of the first pub/sub system that supports
the reconnection of mobile clients is JEDI [7]. However,
our investigations of pub/sub systems have shown that
currently most of the available systems are research
prototypes which concentrate primarily on scalability
and reliability rather on durability in P2P environments.
Furthermore, current pub/sub systems for mobile scenarios
have the disadvantage that the time needed to update a
subscription and to forward all messages to the peer where
the re-subscription is made, may take too long. Mobile
clients in ITS scenarios are fast moving and have only a
few seconds for data transmission (section 3).
In order to adequately address the scaling needs of dis-
tributed applications, over the past years there has been
research on pub/sub systems making use of the scalabil-
ity characteristics of Distributed Hash Tables (DHTs) [15].
This has led to several implementations of DHT-based pub-
/sub systems, like [6, 9, 16, 1, 2]. However, the papers aim
at using DHT like for routing purposes, extended query-
ing, efficient subscriptions, or the efficient distribution of
events. In contrast to those approaches ASC focuses on
the distribution of Space Containers as fault-tolerant inter-
mediate subscribers, functioning as a scalable and efficient
bridge between mobile peers with very short connectivity
time and pub/sub systems. Thus, although ASC has been
developed with respect to a mesh network (section 3), it
does not prescribe the usage of P2P capable pub/sub sys-
tems (section 4.2).
</bodyText>
<sectionHeader confidence="0.998913" genericHeader="method">
3 Scenario
</sectionHeader>
<bodyText confidence="0.99998825">
A motivating use-case to illustrate the benefits of the pro-
posed ASC architecture is an Intelligent Transportation Sys-
tem (ITS) scenario [11]. The scenario consists of a highway
with fast moving vehicles communicating with a fixed, ge-
ographically distributed infrastructure. Along the highway
there are so called Road Site Units (RSU) responsible for
either passing safety and traffic information to the vehicles
or receiving information from the vehicles and pass it to the
system. RSUs are installed along the road network in 2-3
km distance of each other and are connected in a meshed
wired broadband network in order to assure scalability and
increase fault-tolerance. Information exchanged in the sys-
tem mainly concerns the road traffic itself and the messages
are published by e.g. the Traffic Control Centre (TCC),
the police, the road maintenance depot. Events generated
may contain information about traffic restrictions and warn-
ings, traffic density, traffic congestions, accidents, road and
weather conditions. The published data is geo-located and
its relevance in space and time is limited to a certain region,
moving direction and period of time. A subscriber my be
</bodyText>
<footnote confidence="0.9723565">
314 2009 IEEE/IFIP WICSA/ECSA
Authorized licensed use limited to: Universitatsbibliothek der TU Wien. Downloaded on December 4, 2009 at 09:47 from IEEE Xplore. Restrictions apply.
</footnote>
<bodyText confidence="0.999887">
a vehicle driving at high speed or a road worker in a field
service. Connectivity between the RSU and the passing by
vehicles is characterized by a limited bandwidth, communi-
cation range, and connectivity window (ca. 300KB/sec for
2-3 sec at 100km/h in case of a single vehicle) allowing the
exchange of small and a few messages only [17]. The re-
ceived information can be used to adapt driving behaviour
since drivers are informed about occurrences in upcoming
road segments. Therefore, subscribers are interested in in-
formation which a) is represented by the very last event
delivered by the pub/sub medium, b) is represented by an
aggregated set of events, or c) is a prioritized set of the de-
livered events. In a special case events can even cancel each
other and should not be delivered at all.
</bodyText>
<sectionHeader confidence="0.997889" genericHeader="method">
4 Architecture
</sectionHeader>
<bodyText confidence="0.99986675">
This section pictures how Aspects on top of Space Con-
tainers [12] can be deployed for the events processing
and illustrates the integration between the Aspect-oriented
Space Container and the pub/sub paradigm.
</bodyText>
<subsectionHeader confidence="0.997194">
4.1 Aspect-oriented Space Container
</subsectionHeader>
<bodyText confidence="0.999913925925926">
Space Containers realize some parts of Aspect-oriented
Programming (AOP) by registering so called Aspects2 at
different points of a Space Container. Aspects are executed
on the peer where the Space Container is located and can
be triggered by the various operations on the container. The
join points of AOP are called interception points (IPoints)
and can be located before (pre) or after (post) the execution
of an operation on the Space Container. Adding and remov-
ing Aspects can be performed at any time during runtime.
In addition to the parameters of a Space Container operation
a so called Aspect Context can be passed along with ev-
ery operation allowing the client to communicate with the
installed Aspects. Aspect may contain any computational
logic, thus can be used to realize security (authorization and
authentication), the implementation of a highly customiz-
able notification mechanism, or the additional manipulation
of already stored or incoming entries. In case multiple As-
pects are installed on the same Space Container, they are
executed in the order they were added.
Before an operation can be executed on a Space Con-
tainer it has to pass the installed pre-Aspects. If all Aspects
return OK, the container interprets the selectors of the op-
erations and executes the operation [12]. Afterwards, all
post-Aspects are executed. Depending on the result of the
post-Aspects the result of the operation is either returned to
the requesting peer, or the operation is rolled back. As al-
ready mentioned, an Aspect can manipulate the execution
</bodyText>
<footnote confidence="0.9905825">
2the complete API JavaDoc can be found at
http://www.mozartspaces.org
</footnote>
<bodyText confidence="0.999665363636363">
of the operation which triggered it. This is realized by the
returning values an Aspect can throw. The returned value
is analysed and the execution of the operation manipulated
accordingly. In case of OK: the Aspect does not require any
changes of the operation; NotOK: the execution of the op-
eration is stopped and the transaction is rolled back; SKIP:
the operation is neither performed on the container, nor on
any following pre-Aspects, but post-Aspects are executed
immediately afterwards; Reschedule: the execution of the
operation is stopped and will be rescheduled for a later exe-
cution.
</bodyText>
<subsectionHeader confidence="0.878641666666667">
4.2 Execution of Aspect-oriented Space
Containers in Publish/Subscribe Sce-
narios
</subsectionHeader>
<bodyText confidence="0.999796388888889">
A reason why we recommend that a Space Container
shall be used instead of a database is the fact that the num-
ber of different events in an ITS is not known beforehand
and as a consequence an appropriate data model is diffi-
cult to establish. By means of Coordinators [12], a Space
Container is capable of using ’dynamic’ data models which
can be plugged in whenever needed. A Coordinator allows
different views, optimally implemented with respect to ac-
cessing requirements, on the entire data in the Space Con-
tainer at the same time. As depicted in Figure 1, such a
Space Container and its Aspects are deployed by means of
a DHT in the RSU network. The principle is explained in
[11], where we described how to combine Space-Containers
with an overlay network based on DHT concepts in or-
der to a) make such Space Containers uniquely addressable
in a fault-tolerant and scalable manner, and b) to replicate
Space Containers in order to increase fault-tolerance and
their availability.
</bodyText>
<figureCaption confidence="0.999748">
Figure 1: The operation of ASC in pub/sub scenarios
</figureCaption>
<bodyText confidence="0.999836454545455">
The original subscriber (e.g. a vehicle) places its in-
tention in receiving events from publishers by deploying
a Space Container, installing Aspects and publish it in the
DHT network. The Aspect registers itself as a subscriber
in the pub/sub medium on behalf and according to the re-
quirements of the original subscriber. From now on the As-
pect will, independent of the connectivity mode of the orig-
inal subscriber, receive events which are then processed by
other installed pre-Aspects and the results are then stored
in the Space Container. When the original subscriber re-
establishes a connection to the network, it uses a read-
</bodyText>
<figure confidence="0.989469933333333">
Publi-
sher
publish
Pub/Sub
Notification
Medium
subscribe
notify
Pastry Network
Container
Aspects
subscribe
read
Sub-
scriber
</figure>
<footnote confidence="0.8939515">
2009 IEEE/IFIP WICSA/ECSA 315
Authorized licensed use limited to: Universitatsbibliothek der TU Wien. Downloaded on December 4, 2009 at 09:47 from IEEE Xplore. Restrictions apply.
</footnote>
<bodyText confidence="0.99970875">
selector to pick up the results from the Space Container. If
the Space Container is replicated, Aspects are replicated as
well. This means that the original subscriber is subscribed
as often as many replicas of that Space Container exists.
This is necessary in order to avoid missing events in case
one of the replicas, including the subscribed Aspect, is off-
line. The way how the replicated Space Containers handle
incoming events in order to stay consistent is up to the im-
plementation of the deployed pre-Aspects. Either, the repli-
cas are completely independent of each other and perform
every operation as many times as replicas exists, or an in-
coming event is registered and not used for further process-
ing until the result based on that event has been announced
from a designated replica. The latter approach may be more
efficient with respect to computational resources but require
knowledge about group coordination.
</bodyText>
<sectionHeader confidence="0.994009" genericHeader="conclusions">
5 Conclusion and Future Work
</sectionHeader>
<bodyText confidence="0.999563166666667">
In this paper we described the concept of ASC, Aspect-
oriented Space Containers, distributed via Distributed Hash
Tables for efficient publish/subscribe scenarios in the In-
telligent Transportation System. The benefits of bridging
mobile peers with pub/sub systems via ASC are reduction
of the complexity of application implementation since the
processing logic has been moved to the Aspects. Therefore,
this solution allows efficient delivery of events to mobile
peers, since the relevant information have been extracted in
installed Aspects while the peer was off-line.
Future work contains an evaluation on how efficient the
ASC approach is compared to current pub/sub systems.
Further investigations regarding the way how the usage of
Space Containers and Aspects change the relation between
subscribers and the notification medium is intended. Fur-
ther questions that we will consider are: Is a durable notifi-
cation medium still necessary if Space Containers are repli-
cated and distributed via DHTs, since DHT use the same
network as the notification medium? Does this have an ef-
fect on the semantics of durability? What is the influence on
QoS coming from the number of replica set up by the sub-
scriber? Another future work will deal with the question
how to move Space Containers along the mesh of RSUs to
minimize Space Container access time.
</bodyText>
<sectionHeader confidence="0.998626" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999962264705883">
[1] I. Aekaterinidis and P. Triantafillou. Pastrystrings: A com-
prehensive content-based publish/subscribe dht network. In
26th IEEE Int. Conf. on Distributed Computing Systems
(ICDCS’06), page 23. IEEE Computer Society, 2006.
[2] J. P. Ahull, P. G. Lpez, and A. F. G. Skarmeta. Caps:
Content-based publish/subscribe services for peer-to-peer
systems. 2nd Int. Conf. on Distributed Event-Based Systems
(DEBS’08), 2008.
[3] S. Bhola, R. Strom, S. Bagchi, Y. Zhao, and J. Auerbach.
Exactly-once delivery in a content-based publish-subscribe
system. In DSN, pages 7–16, 2002.
[4] M. Caporuscio, C. M. Caporuscio, A. Carzaniga,
A. Carzaniga, E. L. Wolf, and E. L. Wolf. Design
and evaluation of a support service for mobile, wireless
publish/subscribe applications. IEEE Trans. on Softw. Eng.,
29:1059–1071, 2003.
[5] A. Carzaniga. Architectures for an Event Notification Ser-
vice Scalable toWide-area Networks. PhD thesis, Politec-
nico Di Milano, December 1998.
[6] M. Castro, P. Druschel, A.-M. Kermarrec, and A. Row-
stron. Scribe: a large-scale and decentralized application-
level multicast infrastructure. Selected Areas in Communi-
cations, IEEE Journal on, 20(8):1489–1499, Oct 2002.
[7] G. Cugola, E. Di Nitto, and A. Fuggetta. The jedi event-
based infrastructure and its application to the development
of the opss wfms. IEEE Trans. Softw. Eng., 27(9):827–850,
2001.
[8] P. T. Eugster, P. A. Felber, R. Guerraoui, and A.-M. Kermar-
rec. The many faces of publish/subscribe. ACM Comput.
Surv., 35(2):114–131, 2003.
[9] A. Gupta, O. D. Sahin, D. Agrawal, and A. E. Abbadi.
Meghdoot: content-based publicsh/subscribe over p2p net-
works. In 5th ACM/IFIP/USENIX Int. Conf. on Middleware
(Middleware’04), pages 254–273, 2004.
[10] Y. Huang and H. Garcia-Molina. Publish/subscribe in a mo-
bile environment. Wirel. Netw., 10(6):643–652, 2004.
[11] E. Kühn, R. Mordinyi, H.-D. Goiss, S. Bessler, and
S. Tomic. A p2p network of space containers for efficient
management of spatial-temporal data in intelligent trans-
portation scenarios. International Symposium on Parallel
and Distributed Computing (ISPDC’09), 2009.
[12] E. Kühn, R. Mordinyi, L. Keszthelyi, and C. Schreiber. In-
troducing the concept of customizable structured spaces for
agent coordination in the production automation domain.
The 8th International Conference on Autonomous Agents
and Multiagent Systems, 2009.
[13] C. M. M. Pereira, D. C. Lobato, C. A. C. Teixeira, and M. G.
Pimentel. Achieving causal and total ordering in publish/-
subscribe middleware with dsm. In Proc. of the 3rd Wsh on
Middleware for service oriented computing (MW4SOC’08),
pages 61–66, 2008.
[14] P. R. Pietzuch. Hermes: A Scalable Event-Based Middle-
ware. PhD thesis, Queens’ College University of Cam-
bridge, February 2004.
[15] A. Rowstron and P. Druschel. Pastry: Scalable, decentral-
ized object location, and routing for large-scale peer-to-peer
systems. Proc. of the 18th IFIP/ACM Int. Conf. on Dis-
tributed Systems Platforms (Middleware’01), pages 329–
350, 2001.
[16] R. van Renesse and A. Bozdog. Willow: Dht, aggregation,
and publish/subscribe in one protocol, 2005.
[17] M. Zaera. Wave-based communication in vehicle to in-
frastructure real-time safety-related traffic telematics. Mas-
ter’s thesis, Telecommunication Engineering, University of
Zaragoza, August 2008.
[18] A. Zeidler. A Distributed Publish/Subscribe Notification
Service for Pervasive Environments. PhD thesis, Technis-
chen Universitt Darmstadt, 2004.
</reference>
<footnote confidence="0.9121385">
316 2009 IEEE/IFIP WICSA/ECSA
Authorized licensed use limited to: Universitatsbibliothek der TU Wien. Downloaded on December 4, 2009 at 09:47 from IEEE Xplore. Restrictions apply.
</footnote>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.535820">
<title confidence="0.9991565">Introducing Aspect-oriented Space Containers for Efficient Scenarios in Intelligent Transportation Systems</title>
<author confidence="0.994091">Eva Kühn</author>
<author confidence="0.994091">Richard Sandford Bessler</author>
<author confidence="0.994091">Slobodanka</author>
<affiliation confidence="0.928528333333333">Laszlo Keszthelyi, Christian Telecommunications Research Centre Vienna Space-based Computing Donau-City 1, 1210 Vienna, Vienna University of</affiliation>
<address confidence="0.665823">Favoritenstr. 9-11, 1040 Vienna,</address>
<abstract confidence="0.999423">The publish/subscribe paradigm is a common concept for delivering events from information producers to consumers in a decoupled manner. Some approaches allow durable subscriptions or the transportation of events even to mobile subscribers in a dynamic network infrastructure. However, in the safety-critical telematics durable delivery of events is not sufficient enough. Short network connectivity time and small bandwidth limit the number and size of events to be transmitted hence relevant information needed for safety-critical decision making may not be timely delivered. In this paper we propose the integration ofpublish/ subscribe systems and Aspect-oriented Space Containers (ASC) distributed via Distributed Hash Tables (DHT) in the network. The approach allows storage, manipulation, pre-processing, and prioritization of messages sent to mobile peers during bursts of connectivity. The benefits of the proposed approach are a) less complex application logic due to the processing capabilities of Space Containers, and b) increased efficiency due to delivery of essential messages only aggregated and processed while mobile peers are not connected. We describe the architecture of the proposed approach and explain its benefits by means of an industry use case.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>I Aekaterinidis</author>
<author>P Triantafillou</author>
</authors>
<title>Pastrystrings: A comprehensive content-based publish/subscribe dht network.</title>
<date>2006</date>
<booktitle>In 26th IEEE Int. Conf. on Distributed Computing Systems (ICDCS’06),</booktitle>
<pages>23</pages>
<publisher>IEEE Computer Society,</publisher>
<contexts>
<context position="8275" citStr="[6, 9, 16, 1, 2]" startWordPosition="1244" endWordPosition="1248">e has been research on pub/sub systems making use of the scalability characteristics of Distributed Hash Tables (DHTs) [15]. This has led to several implementations of DHT-based pub/sub systems, like [6, 9, 16, 1, 2]. However, the papers aim at using DHT like for routing purposes, extended querying, efficient subscriptions, or the efficient distribution of events. In contrast to those approaches ASC focuses on th</context>
</contexts>
<marker>[1]</marker>
<rawString>I. Aekaterinidis and P. Triantafillou. Pastrystrings: A comprehensive content-based publish/subscribe dht network. In 26th IEEE Int. Conf. on Distributed Computing Systems (ICDCS’06), page 23. IEEE Computer Society, 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J P Ahull</author>
<author>P G Lpez</author>
<author>A F G Skarmeta</author>
</authors>
<title>Caps: Content-based publish/subscribe services for peer-to-peer systems.</title>
<date>2008</date>
<booktitle>2nd Int. Conf. on Distributed Event-Based Systems (DEBS’08),</booktitle>
<contexts>
<context position="8275" citStr="[6, 9, 16, 1, 2]" startWordPosition="1244" endWordPosition="1248">e has been research on pub/sub systems making use of the scalability characteristics of Distributed Hash Tables (DHTs) [15]. This has led to several implementations of DHT-based pub/sub systems, like [6, 9, 16, 1, 2]. However, the papers aim at using DHT like for routing purposes, extended querying, efficient subscriptions, or the efficient distribution of events. In contrast to those approaches ASC focuses on th</context>
</contexts>
<marker>[2]</marker>
<rawString>J. P. Ahull, P. G. Lpez, and A. F. G. Skarmeta. Caps: Content-based publish/subscribe services for peer-to-peer systems. 2nd Int. Conf. on Distributed Event-Based Systems (DEBS’08), 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Bhola</author>
<author>R Strom</author>
<author>S Bagchi</author>
<author>Y Zhao</author>
<author>J Auerbach</author>
</authors>
<title>Exactly-once delivery in a content-based publish-subscribe system.</title>
<date>2002</date>
<booktitle>In DSN,</booktitle>
<pages>7--16</pages>
<contexts>
<context position="5564" citStr="[3]" startWordPosition="822" endWordPosition="822">ecca [18] support both types of subscription. Furthermore, the pub/sub system architecture can be further classified into client-server and peer-to-peer. In a client-server architecture, like Gryphon [3], publishers and subscribers are clients which are connected to a network of servers. Generally, the servers temporarily store the events generated by publisher-clients and forwarded them to the subsc</context>
</contexts>
<marker>[3]</marker>
<rawString>S. Bhola, R. Strom, S. Bagchi, Y. Zhao, and J. Auerbach. Exactly-once delivery in a content-based publish-subscribe system. In DSN, pages 7–16, 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Caporuscio</author>
<author>C M Caporuscio</author>
<author>A Carzaniga</author>
<author>A Carzaniga</author>
<author>E L Wolf</author>
<author>E L Wolf</author>
</authors>
<title>Design and evaluation of a support service for mobile, wireless publish/subscribe applications.</title>
<date>2003</date>
<journal>IEEE Trans. on Softw. Eng.,</journal>
<volume>29</volume>
<contexts>
<context position="6805" citStr="[4]" startWordPosition="1013" endWordPosition="1013">try-count was reached. In mobile environments [10] client applications reside on a host that is moving and therefore accessing the network (composed of so called event brokers) from various locations [4]. The event brokers are responsible to guarantee the reliability and durability of the pub/sub system as described before. Furthermore, a protocol must exist which enables the update of a client’s sub</context>
</contexts>
<marker>[4]</marker>
<rawString>M. Caporuscio, C. M. Caporuscio, A. Carzaniga, A. Carzaniga, E. L. Wolf, and E. L. Wolf. Design and evaluation of a support service for mobile, wireless publish/subscribe applications. IEEE Trans. on Softw. Eng., 29:1059–1071, 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Carzaniga</author>
</authors>
<title>Architectures for an Event Notification Service Scalable toWide-area Networks.</title>
<date>1998</date>
<tech>PhD thesis,</tech>
<institution>Politecnico Di Milano,</institution>
<contexts>
<context position="5354" citStr="[5]" startWordPosition="792" endWordPosition="792">nchronous and anonymous communication between publishers and subscribers [8]. There are two types of pub/sub systems: topic-based and content-based [8]. Hybrid pub/sub systems like Hermes [14], SIENA [5] or Rebecca [18] support both types of subscription. Furthermore, the pub/sub system architecture can be further classified into client-server and peer-to-peer. In a client-server architecture, like G</context>
</contexts>
<marker>[5]</marker>
<rawString>A. Carzaniga. Architectures for an Event Notification Service Scalable toWide-area Networks. PhD thesis, Politecnico Di Milano, December 1998.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Castro</author>
<author>P Druschel</author>
<author>A-M Kermarrec</author>
<author>A Rowstron</author>
</authors>
<title>Scribe: a large-scale and decentralized applicationlevel multicast infrastructure. Selected Areas in Communications,</title>
<date>2002</date>
<journal>IEEE Journal on,</journal>
<volume>20</volume>
<issue>8</issue>
<contexts>
<context position="8275" citStr="[6, 9, 16, 1, 2]" startWordPosition="1244" endWordPosition="1248">e has been research on pub/sub systems making use of the scalability characteristics of Distributed Hash Tables (DHTs) [15]. This has led to several implementations of DHT-based pub/sub systems, like [6, 9, 16, 1, 2]. However, the papers aim at using DHT like for routing purposes, extended querying, efficient subscriptions, or the efficient distribution of events. In contrast to those approaches ASC focuses on th</context>
</contexts>
<marker>[6]</marker>
<rawString>M. Castro, P. Druschel, A.-M. Kermarrec, and A. Rowstron. Scribe: a large-scale and decentralized applicationlevel multicast infrastructure. Selected Areas in Communications, IEEE Journal on, 20(8):1489–1499, Oct 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Cugola</author>
<author>E Di Nitto</author>
<author>A Fuggetta</author>
</authors>
<title>The jedi eventbased infrastructure and its application to the development of the opss wfms.</title>
<date>2001</date>
<journal>IEEE Trans. Softw. Eng.,</journal>
<volume>27</volume>
<issue>9</issue>
<contexts>
<context position="7396" citStr="[7]" startWordPosition="1110" endWordPosition="1110">e system. When the client reconnects at another broker, all stored events have to be forwarded to that broker. One of the first pub/sub system that supports the reconnection of mobile clients is JEDI [7]. However, our investigations of pub/sub systems have shown that currently most of the available systems are research prototypes which concentrate primarily on scalability and reliability rather on du</context>
</contexts>
<marker>[7]</marker>
<rawString>G. Cugola, E. Di Nitto, and A. Fuggetta. The jedi eventbased infrastructure and its application to the development of the opss wfms. IEEE Trans. Softw. Eng., 27(9):827–850, 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P T Eugster</author>
<author>P A Felber</author>
<author>R Guerraoui</author>
<author>A-M Kermarrec</author>
</authors>
<title>The many faces of publish/subscribe.</title>
<date>2003</date>
<journal>ACM Comput. Surv.,</journal>
<volume>35</volume>
<issue>2</issue>
<contexts>
<context position="1802" citStr="[8]" startWordPosition="244" endWordPosition="244">ed while mobile peers are not connected. We describe the architecture of the proposed approach and explain its benefits by means of an industry use case. 1 Introduction The publish/subscribe paradigm [8] is a common and largely recognized concept for delivering messages in an anonymous decoupled fashion from publishers to subscribers. There are also concepts trying to ensure durability or the correct</context>
<context position="5227" citStr="[8]" startWordPosition="772" endWordPosition="772">e of messaging paradigm allows a strong decoupling of publishers and subscribers in time and space. Furthermore, it enables asynchronous and anonymous communication between publishers and subscribers [8]. There are two types of pub/sub systems: topic-based and content-based [8]. Hybrid pub/sub systems like Hermes [14], SIENA [5] or Rebecca [18] support both types of subscription. Furthermore, the pub</context>
</contexts>
<marker>[8]</marker>
<rawString>P. T. Eugster, P. A. Felber, R. Guerraoui, and A.-M. Kermarrec. The many faces of publish/subscribe. ACM Comput. Surv., 35(2):114–131, 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Gupta</author>
<author>O D Sahin</author>
<author>D Agrawal</author>
<author>A E Abbadi</author>
</authors>
<title>Meghdoot: content-based publicsh/subscribe over p2p networks.</title>
<date>2004</date>
<booktitle>In 5th ACM/IFIP/USENIX Int. Conf. on Middleware (Middleware’04),</booktitle>
<pages>254--273</pages>
<contexts>
<context position="8275" citStr="[6, 9, 16, 1, 2]" startWordPosition="1244" endWordPosition="1248">e has been research on pub/sub systems making use of the scalability characteristics of Distributed Hash Tables (DHTs) [15]. This has led to several implementations of DHT-based pub/sub systems, like [6, 9, 16, 1, 2]. However, the papers aim at using DHT like for routing purposes, extended querying, efficient subscriptions, or the efficient distribution of events. In contrast to those approaches ASC focuses on th</context>
</contexts>
<marker>[9]</marker>
<rawString>A. Gupta, O. D. Sahin, D. Agrawal, and A. E. Abbadi. Meghdoot: content-based publicsh/subscribe over p2p networks. In 5th ACM/IFIP/USENIX Int. Conf. on Middleware (Middleware’04), pages 254–273, 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Y Huang</author>
<author>H Garcia-Molina</author>
</authors>
<title>Publish/subscribe in a mobile environment.</title>
<date>2004</date>
<journal>Wirel. Netw.,</journal>
<volume>10</volume>
<issue>6</issue>
<contexts>
<context position="2090" citStr="[10]" startWordPosition="291" endWordPosition="291">decoupled fashion from publishers to subscribers. There are also concepts trying to ensure durability or the correct order of events [13], even in case of mobile peers or a completely dynamic network [10]. However, there are application domains, like safety-critical telematics, in which the durable delivery of subscribed messages, in other words the guaranteed delivery with ”exactly once” semantics” m</context>
<context position="6652" citStr="[10]" startWordPosition="989" endWordPosition="989">strategy, i.e. the system will periodically retry to deliver the message until the message was delivered successfully, a timeout expired or the maximum retry-count was reached. In mobile environments [10] client applications reside on a host that is moving and therefore accessing the network (composed of so called event brokers) from various locations [4]. The event brokers are responsible to guarante</context>
</contexts>
<marker>[10]</marker>
<rawString>Y. Huang and H. Garcia-Molina. Publish/subscribe in a mobile environment. Wirel. Netw., 10(6):643–652, 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Kühn</author>
<author>R Mordinyi</author>
<author>H-D Goiss</author>
<author>S Bessler</author>
<author>S Tomic</author>
</authors>
<title>A p2p network of space containers for efficient management of spatial-temporal data in intelligent transportation scenarios.</title>
<date>2009</date>
<booktitle>International Symposium on Parallel and Distributed Computing (ISPDC’09),</booktitle>
<contexts>
<context position="4008" citStr="[11]" startWordPosition="588" endWordPosition="588">onnectivity time. The so called Space Container [12] is a customizable storage component for efficient storage and retrieval of structured, spatialtemporal data distributed in a fault-tolerant manner [11] 1This work has been supported by the Complex Systems Design &amp; Engineering Lab, and by the Austrian Government and the City of Vienna within the competence center program COMET. 978-1-4244-4985-9/09/$</context>
<context position="8989" citStr="[11]" startWordPosition="1358" endWordPosition="1358">usage of P2P capable pub/sub systems (section 4.2). 3 Scenario A motivating use-case to illustrate the benefits of the proposed ASC architecture is an Intelligent Transportation System (ITS) scenario [11]. The scenario consists of a highway with fast moving vehicles communicating with a fixed, geographically distributed infrastructure. Along the highway there are so called Road Site Units (RSU) respon</context>
<context position="14250" citStr="[11]" startWordPosition="2208" endWordPosition="2208">e entire data in the Space Container at the same time. As depicted in Figure 1, such a Space Container and its Aspects are deployed by means of a DHT in the RSU network. The principle is explained in [11], where we described how to combine Space-Containers with an overlay network based on DHT concepts in order to a) make such Space Containers uniquely addressable in a fault-tolerant and scalable manne</context>
</contexts>
<marker>[11]</marker>
<rawString>E. Kühn, R. Mordinyi, H.-D. Goiss, S. Bessler, and S. Tomic. A p2p network of space containers for efficient management of spatial-temporal data in intelligent transportation scenarios. International Symposium on Parallel and Distributed Computing (ISPDC’09), 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Kühn</author>
<author>R Mordinyi</author>
<author>L Keszthelyi</author>
<author>C Schreiber</author>
</authors>
<title>Introducing the concept of customizable structured spaces for agent coordination in the production automation domain.</title>
<date>2009</date>
<booktitle>The 8th International Conference on Autonomous Agents and Multiagent Systems,</booktitle>
<contexts>
<context position="3856" citStr="[12]" startWordPosition="566" endWordPosition="566">g information. In this paper1 we propose the concept of Aspect-oriented Space Containers (ASC) for linking pub/sub systems and mobile peers with short connectivity time. The so called Space Container [12] is a customizable storage component for efficient storage and retrieval of structured, spatialtemporal data distributed in a fault-tolerant manner [11] 1This work has been supported by the Complex Sy</context>
<context position="11087" citStr="[12]" startWordPosition="1696" endWordPosition="1696">itized set of the delivered events. In a special case events can even cancel each other and should not be delivered at all. 4 Architecture This section pictures how Aspects on top of Space Containers [12] can be deployed for the events processing and illustrates the integration between the Aspect-oriented Space Container and the pub/sub paradigm. 4.1 Aspect-oriented Space Container Space Containers re</context>
<context position="12567" citStr="[12]" startWordPosition="1930" endWordPosition="1930"> operation can be executed on a Space Container it has to pass the installed pre-Aspects. If all Aspects return OK, the container interprets the selectors of the operations and executes the operation [12]. Afterwards, all post-Aspects are executed. Depending on the result of the post-Aspects the result of the operation is either returned to the requesting peer, or the operation is rolled back. As alre</context>
<context position="13838" citStr="[12]" startWordPosition="2136" endWordPosition="2136">tead of a database is the fact that the number of different events in an ITS is not known beforehand and as a consequence an appropriate data model is difficult to establish. By means of Coordinators [12], a Space Container is capable of using ’dynamic’ data models which can be plugged in whenever needed. A Coordinator allows different views, optimally implemented with respect to accessing requirement</context>
</contexts>
<marker>[12]</marker>
<rawString>E. Kühn, R. Mordinyi, L. Keszthelyi, and C. Schreiber. Introducing the concept of customizable structured spaces for agent coordination in the production automation domain. The 8th International Conference on Autonomous Agents and Multiagent Systems, 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C M M Pereira</author>
<author>D C Lobato</author>
<author>C A C Teixeira</author>
<author>M G Pimentel</author>
</authors>
<title>Achieving causal and total ordering in publish/-subscribe middleware with dsm.</title>
<date>2008</date>
<booktitle>In Proc. of the 3rd Wsh on Middleware for service oriented computing (MW4SOC’08),</booktitle>
<pages>61--66</pages>
<contexts>
<context position="2023" citStr="[13]" startWordPosition="279" endWordPosition="279">largely recognized concept for delivering messages in an anonymous decoupled fashion from publishers to subscribers. There are also concepts trying to ensure durability or the correct order of events [13], even in case of mobile peers or a completely dynamic network [10]. However, there are application domains, like safety-critical telematics, in which the durable delivery of subscribed messages, in o</context>
</contexts>
<marker>[13]</marker>
<rawString>C. M. M. Pereira, D. C. Lobato, C. A. C. Teixeira, and M. G. Pimentel. Achieving causal and total ordering in publish/-subscribe middleware with dsm. In Proc. of the 3rd Wsh on Middleware for service oriented computing (MW4SOC’08), pages 61–66, 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P R Pietzuch</author>
</authors>
<title>Hermes: A Scalable Event-Based Middleware.</title>
<date>2004</date>
<tech>PhD thesis,</tech>
<institution>Queens’ College University of Cambridge,</institution>
<contexts>
<context position="5343" citStr="[14]" startWordPosition="790" endWordPosition="790"> enables asynchronous and anonymous communication between publishers and subscribers [8]. There are two types of pub/sub systems: topic-based and content-based [8]. Hybrid pub/sub systems like Hermes [14], SIENA [5] or Rebecca [18] support both types of subscription. Furthermore, the pub/sub system architecture can be further classified into client-server and peer-to-peer. In a client-server architect</context>
</contexts>
<marker>[14]</marker>
<rawString>P. R. Pietzuch. Hermes: A Scalable Event-Based Middleware. PhD thesis, Queens’ College University of Cambridge, February 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Rowstron</author>
<author>P Druschel</author>
</authors>
<title>Pastry: Scalable, decentralized object location, and routing for large-scale peer-to-peer systems.</title>
<date>2001</date>
<booktitle>Proc. of the 18th IFIP/ACM Int. Conf. on Distributed Systems Platforms (Middleware’01),</booktitle>
<pages>329--350</pages>
<contexts>
<context position="4426" citStr="[15]" startWordPosition="651" endWordPosition="651">EEE 313 Authorized licensed use limited to: Universitatsbibliothek der TU Wien. Downloaded on December 4, 2009 at 09:47 from IEEE Xplore. Restrictions apply. by means of Distributed Hash Tables (DHT) [15]. Aspects are components with customizable application logic executed either before or after the operation on the Space Container for events processing. The combination of a pub/sub medium and ASC all</context>
<context position="8182" citStr="[15]" startWordPosition="1231" endWordPosition="1231">y address the scaling needs of distributed applications, over the past years there has been research on pub/sub systems making use of the scalability characteristics of Distributed Hash Tables (DHTs) [15]. This has led to several implementations of DHT-based pub/sub systems, like [6, 9, 16, 1, 2]. However, the papers aim at using DHT like for routing purposes, extended querying, efficient subscription</context>
</contexts>
<marker>[15]</marker>
<rawString>A. Rowstron and P. Druschel. Pastry: Scalable, decentralized object location, and routing for large-scale peer-to-peer systems. Proc. of the 18th IFIP/ACM Int. Conf. on Distributed Systems Platforms (Middleware’01), pages 329– 350, 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R van Renesse</author>
<author>A Bozdog</author>
</authors>
<title>Willow: Dht, aggregation, and publish/subscribe in one protocol,</title>
<date>2005</date>
<contexts>
<context position="8275" citStr="[6, 9, 16, 1, 2]" startWordPosition="1244" endWordPosition="1248">e has been research on pub/sub systems making use of the scalability characteristics of Distributed Hash Tables (DHTs) [15]. This has led to several implementations of DHT-based pub/sub systems, like [6, 9, 16, 1, 2]. However, the papers aim at using DHT like for routing purposes, extended querying, efficient subscriptions, or the efficient distribution of events. In contrast to those approaches ASC focuses on th</context>
</contexts>
<marker>[16]</marker>
<rawString>R. van Renesse and A. Bozdog. Willow: Dht, aggregation, and publish/subscribe in one protocol, 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Zaera</author>
</authors>
<title>Wave-based communication in vehicle to infrastructure real-time safety-related traffic telematics.</title>
<date>2008</date>
<tech>Master’s thesis,</tech>
<institution>Telecommunication Engineering, University of Zaragoza,</institution>
<contexts>
<context position="2925" citStr="[17]" startWordPosition="421" endWordPosition="421"> order to extract relevant information. However, in scenarios from Intelligent Transportation Systems (ITS), mobile peers (vehicles) have only a few seconds of connectivity and very limited bandwidth [17]. This may cause several problems: the reconnecting peer should receive all stored events which may have very different importance for the user or be even stale, but due to the limited bandwidth and c</context>
<context position="10546" citStr="[17]" startWordPosition="1603" endWordPosition="1603">cterized by a limited bandwidth, communication range, and connectivity window (ca. 300KB/sec for 2-3 sec at 100km/h in case of a single vehicle) allowing the exchange of small and a few messages only [17]. The received information can be used to adapt driving behaviour since drivers are informed about occurrences in upcoming road segments. Therefore, subscribers are interested in information which a) </context>
</contexts>
<marker>[17]</marker>
<rawString>M. Zaera. Wave-based communication in vehicle to infrastructure real-time safety-related traffic telematics. Master’s thesis, Telecommunication Engineering, University of Zaragoza, August 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Zeidler</author>
</authors>
<title>A Distributed Publish/Subscribe Notification Service for Pervasive Environments.</title>
<date>2004</date>
<tech>PhD thesis,</tech>
<institution>Technischen Universitt Darmstadt,</institution>
<contexts>
<context position="5370" citStr="[18]" startWordPosition="796" endWordPosition="796">nonymous communication between publishers and subscribers [8]. There are two types of pub/sub systems: topic-based and content-based [8]. Hybrid pub/sub systems like Hermes [14], SIENA [5] or Rebecca [18] support both types of subscription. Furthermore, the pub/sub system architecture can be further classified into client-server and peer-to-peer. In a client-server architecture, like Gryphon [3], publ</context>
</contexts>
<marker>[18]</marker>
<rawString>A. Zeidler. A Distributed Publish/Subscribe Notification Service for Pervasive Environments. PhD thesis, Technischen Universitt Darmstadt, 2004.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>