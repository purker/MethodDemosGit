<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000040">
<note confidence="0.4976555">
Electronic Communications of the EASST
Volume 34 (2010)
</note>
<title confidence="0.933937166666667">
Proceedings of the
6th Educators’ Symposium:
Software Modeling in Education at MODELS 2010
(EduSymp 2010)
Position Paper: m2n—A Tool for Translating Models to
Natural Language Descriptions
</title>
<author confidence="0.54446">
Petra Brosch and Andrea Randak
</author>
<sectionHeader confidence="0.300549" genericHeader="abstract">
8 pages
</sectionHeader>
<note confidence="0.805955">
Guest Editors: Peter J. Clarke, Martina Seidl
Managing Editors: Tiziana Margaria, Julia Padberg, Gabriele Taentzer
ECEASST Home Page: http://www.easst.org/eceasst/ ISSN 1863-2122
ECEASST
</note>
<title confidence="0.9879545">
Position Paper: m2n—A Tool for Translating Models to
Natural Language Descriptions
</title>
<author confidence="0.958894">
Petra Brosch* and Andrea Randak
</author>
<affiliation confidence="0.679142333333333">
lastname@big.tuwien.ac.at, http://www.big.tuwien.ac.at
Business Informatics Group
Vienna University of Technology, Austria
</affiliation>
<bodyText confidence="0.997089166666667">
Abstract: To describe the structure of a system, the UML Class Diagram yields
the means-of-choice. Therefor, the Class Diagram provides concepts like class, at-
tribute, operation, association, generalization, aggregation, enumeration, etc. When
students are introduced to this diagram, they often have to solve exercises where
texts in natural language are given and they have to model the described systems.
When analyzing such exercises, it becomes evident that certain kinds of phrases de-
scribing a particular concept appear again and again contextualized to the described
domain.
In this paper, we present an approach which allows the automatic generation of tex-
tual specifications from a given Class Diagram based on standard phrases in natural
language. Besides supporting teachers in preparing exercises, such an approach is
also valuable for various e-learning scenarios.
</bodyText>
<keyword confidence="0.951965">
Keywords: modeling exercises, natural language description
</keyword>
<sectionHeader confidence="0.999861" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999690933333333">
When teaching modeling, one of the most repetitive and time consuming tasks is the develop-
ment of exercises and the corresponding solutions. A typical exercise consists of a given textual
description of an arbitrary domain (e.g., university systems, enterprises, airports) which students
have to model for example with a UML Class Diagram. In order to obtain an adequate exercise,
it does not suffice to prepare the textual specification only, but also the sample solution has to be
modeled for checking if all taught concepts are covered and if the difficulty level and size are rea-
sonable. Hence, the teacher has to describe the same content twice: once as textual specification
in natural language and once as a model. As there should be a one-to-one correspondence be-
tween text and model, the question at hand is if it is possible to automatically derive one artifact
from the other.
Already in the early 1980s attempts of automated translation of textual descriptions into pro-
gram code were conducted. R.J. Abbott [Abb83] discusses a method for deriving programming
concepts like data types and references by analyzing informal English descriptions. An impor-
tant remark of Abbott’s work relates to the automation level of such a method. He points out that
such a transformation is far away from being fully automated. User interaction is still needed
</bodyText>
<footnote confidence="0.693308">
* Funding for this research was provided by the fFORTE WIT - Women in Technology Program of the Vienna
</footnote>
<affiliation confidence="0.611404">
University of Technology, and the Austrian Federal Ministry of Science and Research.
</affiliation>
<table confidence="0.887557333333333">
1 / 8 Volume 34 (2010)
Position Paper: m2n—A Tool for Translating Models to
Natural Language Descriptions
</table>
<bodyText confidence="0.999917363636364">
to make the outcome perfect. After all natural language is imprecise and therefore leaves room
for interpretation. Only if the text obeys a certain structure and the sentences are expressed in a
precise, unambiguous way, the models can be automatically derived as it is for example done in
the field of requirements engineering (cf. [FKM05, WKH08]).
In contrast to models of real-world software engineering projects, the models of the exercises
have not to express customers’ and users’ expectations, but they have to fulfill certain didactical
expectations and usually show fictive, simplified scenarios only. Therefore, the construction is
different: when a teacher prepares an exercise, (s)he usually does not write the text and model
the sample solution afterwards, but starts with modeling the sample solution. Having the sample
solution at hand, a formal specification of the scenario is available. In this paper, we propose to
use the sample solution for generating the natural language textual description of the exercise.
</bodyText>
<sectionHeader confidence="0.993213" genericHeader="introduction">
2 Background
</sectionHeader>
<bodyText confidence="0.999059588235294">
With five years experience in teaching the course Object-Oriented Modeling at the Vienna Uni-
versity of Technology [BSW+08], it becomes evident that specific modeling concepts are ex-
pressed by recurring phrases, solely contextualized to the described domain. Phrases like “part
of” for expressing composite aggregations or “is a” for generalizations are used repeatedly, irre-
spective of describing houses, persons, or elements of any other domain.
Fig. 1 shows a typical toy example of our modeling course, covering the basic concepts of
Class Diagrams. One possible textual description is as follows.
Persons have a name. Guides and visitors are persons. A guide leads multiple guided
tours. Each guided tour has exactly one guide. Each visitor may attend multiple guided
tours, guided tours are attended by one to 20 visitors. For each guided tour the id
and the duration are known. A guided tour covers exactly one sight, but each sight is
covered by multiple guided tours. A sight has a name and an address. A sight is located
in one city. A city may have multiple sights. For each city name and size are known.
Although this textual description sounds natural, it follows an algorithmic pattern. In a first
step, the most important class of the model is identified as a starting point for the description and
input for the algorithm. This class is described by its name and its attributes. Then, inheritance
relations and associations follow. In the order of exploring related classes, the procedure recurs.
</bodyText>
<figureCaption confidence="0.999446">
Figure 1: Class Diagram example
</figureCaption>
<figure confidence="0.8937455">
Proc. EduSymp 2010 2 / 8
ECEASST
</figure>
<figureCaption confidence="0.998907">
Figure 2: m2n Architecture
</figureCaption>
<sectionHeader confidence="0.997801" genericHeader="method">
3 Realization
</sectionHeader>
<bodyText confidence="0.999664037037037">
The m2n tool (short for model to natural language description) yields a framework for translat-
ing models of arbitrary metamodels to natural language descriptions as depicted in Fig. 2. The
implementation is based on the Eclipse Modeling Framework1, hence any ECORE based meta-
model may be integrated. Three artifacts are necessary to define a translation specification for a
modeling language: a metamodel, a model traversal strategy, and a set of sentence templates for
describing specific concepts.
In the following, these artifacts are examined in detail for a simplified Class Diagram.
Metamodel. The Class Diagram metamodel used in our first prototype comprises a restricted
set of the UML Class Diagram concepts. At the moment, we support the concepts of Class,
Attribute, Generalization (single inheritance), and Association (binary).
Sentence Templates. Standard phrases in the form of sentence templates have to be provided
for each concept of the metamodel. If there are more than one sentence for a concept, one
is randomly selected, which makes the generated text more natural. These sentences contain
wildcards, which are replaced by concrete model values.
Traversal Strategy. Each metamodel needs a dedicated traversal strategy to explore the model.
A traversal strategy should implement a dedicated interface to allow reliable integration into the
m2n framework by the dynamic class loading mechanism of Java.
The traversal strategy for the Class Diagram implements a special kind of a breadth first search
as shown in Listing 1. The most important model element is identified by a heuristic and acts
as a starting point for the algorithm. Currently, subclass relations and associations are counted.
Generalizations are higher ranked than associations. In the example of Fig. 1, the class Person
is selected as most important element, because of its two subclasses.
For the actual text generation, the root class is first introduced in the generated text by a
sentence describing its name and attributes. Second, all direct subclasses are named and put to a
queue holding the succeeding model elements to describe, if they are not printed so far. Third,
associations are specified. Currently, the reading direction is not explicitly available in the Class
Diagram metamodel. To construct a sentence, the direction is derived from source and target
</bodyText>
<footnote confidence="0.666227">
1 http://www.eclipse.org/modeling/emf/
</footnote>
<figure confidence="0.5888825">
3 / 8 Volume 34 (2010)
ECORE MM
Traversal Strategy
Sentences
m2 n
Natural
Language
Description
</figure>
<table confidence="0.9510665">
Position Paper: m2n—A Tool for Translating Models to
Natural Language Descriptions
</table>
<bodyText confidence="0.884255666666667">
roles of the association. Referenced classes are then put into the queue. As long as the queue is
not empty, the algorithm prints the details for the next node. If the model is split into parts, then
a new root node has to be found. The algorithm terminates, when all model elements are printed.
</bodyText>
<figureCaption confidence="0.9933435">
Listing 1: Model to Natural Language Description Generation
Listing 1: Model to Natural Language Description Generation
</figureCaption>
<sectionHeader confidence="0.999725" genericHeader="method">
4 The Long-Term Vision
4 The Long-Term Vision
</sectionHeader>
<bodyText confidence="0.999974833333333">
The presented m2n-tool supports on the one hand teachers in keeping exercises consistent with
the sample solutions, i.e., it facilitates the management of teaching artifacts. On the other hand,
if provided to the students, they can generate natural text out of the given diagram, providing
them some explanation of the diagram.
But these are only side-effects; we developed our tool with a very different intention in mind.
m2n is intended to be used within a major e-learning project aiming at the development of an
interactive e-learning system for Class Diagrams. In the following, we motivate why we need
such an e-learning system, then we shortly describe the basic architecture, and finally we explain
the important role m2n plays in these considerations.
The presented m2n-tool supports on the one hand teachers in keeping exercises consistent with
the sample solutions, i.e., it facilitates the management of teaching artifacts. On the other hand,
if provided to the students, they can generate natural text out of the given diagram, providing
them some explanation of the diagram.
But these are only side-effects; we developed our tool with a very different intention in mind.
m2n is intended to be used within a major e-learning project aiming at the development of an
interactive e-learning system for Class Diagrams. In the following, we motivate why we need
such an e-learning system, then we shortly describe the basic architecture, and finally we explain
the important role m2n plays in these considerations.
</bodyText>
<subsectionHeader confidence="0.9518935">
4.1 Motivation
4.1 Motivation
</subsectionHeader>
<bodyText confidence="0.999998">
One of the basic challenges in teaching modeling is the practical part of the course. Unlike
in programming where the programs of the students are relatively easily testable by checking
whether they show the expected behavior or not, the situation in modeling is different. Especially
One of the basic challenges in teaching modeling is the practical part of the course. Unlike
in programming where the programs of the students are relatively easily testable by checking
whether they show the expected behavior or not, the situation in modeling is different. Especially
</bodyText>
<figure confidence="0.982641222222222">
d c l a s s to nodeQueue */
22 printedME . add ( node ) ; /* p r i n t i n g of node completed */
23 i f ( ! nodeQueue . isEmpty ( ) ) /* i f any nodes l e f t , repeat ; */
24 printModel ( ) ;
Proc. EduSymp 2010 4 / 8
Proc. EduSymp 2010 4 / 8
25 }
25 }
ECEASST
</figure>
<bodyText confidence="0.99973465">
when models are used for describing, analyzing, or designing systems, and when the models are
not executable or transferable to a formal specification like code, automatic testing is hardly
possible. A serious correction and grading is only possible by human teachers, often requiring
considerable intellectual effort to follow the students’ approach, because students often have a
different viewpoint on a matter, which is still correct. It is also possible, that the specification is
interpretable in different ways.
Especially in teaching modeling, learning by doing is extremely important, so such practical
exercises in which the students have to derive a model from a textual specification. Even if
the students use modeling tools instead of drawing the models by hand, automatic correction
is hardly possible, and if it is possible then the specification has to be formulated very narrow,
teaching the students to recognize patterns only instead of allowing them to be creative.
Due to this reasons it is extremely difficult, to build e-learning environments which allow the
students to train on their own and to get valuable feedback from the system, especially when
no teacher is at hand. Naturally, the exercises may be formulated in a very static manner in
terms of multiple choice questions, where the students have to decide if a statement about a
given model is true or false. Another approach is to give the students textual specifications and
a sample solution, which they can compare to their own result. Although such approaches are
certainly helpful, they do not allow to train creativity, which is certainly an important skill in
practical modeling. In the following, we propose an approach which allows a more flexible way
to practice the modeling of Class Diagrams.
</bodyText>
<subsectionHeader confidence="0.997336">
4.2 The Basic Architecture
</subsectionHeader>
<bodyText confidence="0.999180142857143">
The ideal case for teaching modeling is that the students have to realize a software engineering
project where they have to create the models as primary design and documentation artifacts.
Since in many courses it is not possible to combine teaching modeling with realizing a practical
project (or if the assumption is that it is preferable to learn the necessary concepts first before
putting them into practice), typical modeling exercises consist of small textual specifications as
they may be created with m2n. The students are asked to model the given text as precisely as
possible. A good approach is as follows:
</bodyText>
<listItem confidence="0.99855825">
1. identify classes,
2. decorate classes with attributes and operations,
3. include inheritance relationships,
4. introduce the associations between classes.
</listItem>
<bodyText confidence="0.9973725">
One of the major problems hampering the automatic correction is the naming of the modeling
elements. Model elements are usually identified by their names and often there is a huge choice
of freedom on how to name an element. To circumvent this problem we propose the following
approach.
The specification is internally annotated with the information which words describe model
elements. Considering our example from above, the annotated specification contains information
</bodyText>
<table confidence="0.795689">
5 / 8 Volume 34 (2010)
Position Paper: m2n—A Tool for Translating Models to
Natural Language Descriptions
</table>
<bodyText confidence="0.997945545454545">
that a Guide is a class, that Person is a class and that name is an attribute of Person. Naturally,
the annotations are not visible to the students, as they contain the solutions. Additionally, the
relationships between the model elements are known.
In the proposed tool, the student only sees the given textual specification. First, (s)he is al-
lowed to select those terms of the text which (s)he thinks represents classes. Having identified
the classes, attributes and operations are added similarly. When the student selects a term in
the text, a corresponding model element is created in a graphical editor. When the student is
done with the identification of model elements, (s)he adds the relationships between the model
elements. The system monitors the student’s behavior and is able to give immediate feedback.
Similar approaches have been presented in [APL08, BM06, SM04], but our approach is novel
in the way how the specifications are created.
</bodyText>
<subsectionHeader confidence="0.998912">
4.3 The Role of m2n
</subsectionHeader>
<bodyText confidence="0.9999638">
Whenever a new exercise is created, the specification has to be prepared accordingly in order to
be suitable for being used as input for the e-learning tool. Without automatic support, the creation
of the specification with the required information is cumbersome and time-consuming. Further-
more, it has to be done extremely carefully because otherwise the exercise in the e-learning
system is buggy and the students either get confused or they even learn wrong things.
For supporting the teachers in easily creating new exercises, we propose an extension of m2n
which is able to create such an annotated specification automatically which may serve as input
for the e-learning tool. As we have already seen, the teacher provides the sample solution model
and m2n creates the textual version. Furthermore, the extension of m2n also creates an annotated
version of the specification which may be directly imported from the e-learning tool. Naturally,
the sample solution model provides all information necessary and the required annotation is
straightforward in the case that the text is used as provided by our tool. If manual postprocessing
is desired, then the danger is that the model and specification are not synchronized anymore. It
may be possible that certain features are not derived as expected and then manual intervention
is necessary. For this problem, we intend to develop a sophisticated update mechanism allowing
to propagate modifications not only from the model to the specification but also vice versa, i.e.,
from the specification to the model.
Having this extension at hand, we expect to offer an e-learning tool for Class Diagrams which
allows an easy creation of exercises with minimizing the problem of inconsistencies between
specification and model.
</bodyText>
<sectionHeader confidence="0.999541" genericHeader="method">
5 Conclusion
</sectionHeader>
<bodyText confidence="0.930867857142857">
In this paper, we presented a tool for transforming a given Class Diagram to a textual specifica-
tion in natural language. With such a tool teachers can automatically create the textual specifi-
cation from the sample solution of an exercise which may serve as a basis for the description of
the students’ homework or for examination questions.
We realized a first prototype implementation as Eclipse Plugin. Although the text generated
in first experiments yield a good basis for describing a given model, the implementation leaves
Proc. EduSymp 2010 6 / 8
</bodyText>
<sectionHeader confidence="0.493223" genericHeader="conclusions">
ECEASST
</sectionHeader>
<bodyText confidence="0.999963">
much room for interesting extensions and fine-tuning. For example, currently the plural of a
noun is obtained by appending an “s” at the end of the word—irregular forms are neglected.
Furthermore, we will extend the collection of sentences and elaborate on a more sophisticated
assembly algorithm of the text in order to obtain a more natural specification. Also we consider
a subset of the Class Diagram’s elements only at the moment—e.g., we are not able to express
association classes or n-ary associations which may be treated as any other model element. Fur-
thermore, better synchronization support between text and model will be an issue, because if the
text has been edited manually and the model is modified, then the manual changes of the text
should not get lost.
Our tool may also be used by the students for practicing. Students get a textual description of
their model and by experimenting they obtain an explanation of the modifications’ impact. For
the realization of this use case, it will be necessary to build a dedicated user interface which is
able to highlight the modifications.
The long-term goal is building an e-learning framework for learning UML diagrams. Given
a textual specification, the students shall identify model elements like classes, associations, ag-
gregations etc. which have to be arranged as described in the specification. The result of the
students’ effort is compared to a sample solution and differences (i.e., the mistakes) are reported.
Similar approaches are presented in [APL08, BM06, SM04]. In order to obtain the link be-
tween textual specification and sample solution, the text has to be annotated, which is done by
hand so far. With the approach presented in this paper it will be possible to annotate the textual
specification automatically, facilitating the creation of new exercises.
</bodyText>
<sectionHeader confidence="0.979074" genericHeader="references">
Bibliography
</sectionHeader>
<reference confidence="0.99388544">
[Abb83] R. J. Abbott. Program Design by Informal English Descriptions. Communications
of the ACM 26(11):882–894, 1983.
[APL08] L. Auxepaules, D. Py, T. Lemeunier. A Diagnosis Method that Matches Class Di-
agrams in a Learning Environment for Object-Oriented Modeling. In ICALT ’08:
Proc. of the 2008 Eighth IEEE International Conference on Advanced Learning
Technologies. Pp. 26–30. IEEE Computer Society, 2008.
[BM06] N. Baghaei, A. Mitrovic. A Constraint-Based Collaborative Environment for Learn-
ing UML Class Diagrams. In Proc. Intelligent Tutoring Systems. LNCS 4053,
pp. 176–186. Springer, 2006.
[BSW+08] M. Brandsteidl, M. Seidl, M. Wimmer, C. Huemer, G. Kappel. Teaching Models
@ BIG - How to Give 1000 Students an Understanding of the UML. In Promoting
Software Modeling Through Active Education, Educators Symposium Models’08.
Pp. 64–68. Warsaw University of Technology, 2008.
[FKM05] G. Fliedl, C. Kop, H. C. Mayr. From Textual Scenarios to a Conceptual Schema.
Data &amp; Knowledge Engineering 55(1):20–37, 2005.
7 / 8 Volume 34 (2010)
Position Paper: m2n—A Tool for Translating Models to
Natural Language Descriptions
[SM04] P. Suraweera, A. Mitrovic. An Intelligent Tutoring System for Entity Relationship
Modelling. International Journal of Artificial Intelligence in Education (IJAIED)
14(3-4):375–417, 2004.
[WKH08] K. Wolter, T. Krebs, L. Hotz. A Combined Similarity Measure for Determining Sim-
ilarity of Model-based and Descriptive Requirements. In Artificial Intelligence Tech-
niques in Software Engineering (ECAI 2008 Workshop). Pp. 11–15. 2008.
Proc. EduSymp 2010 8 / 8
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.050986">
<note confidence="0.958887">Electronic Communications of the Volume 34 (2010) Proceedings of 6th Educators’ Software Modeling in Education at MODELS (EduSymp 2010)</note>
<title confidence="0.9260105">Position Paper: m2n—A Tool for Translating Models Natural Language Descriptions</title>
<author confidence="0.986102">Petra Brosch</author>
<author confidence="0.986102">Andrea</author>
<note confidence="0.29854625">8 pages Guest Editors: Peter J. Clarke, Martina Seidl Managing Editors: Tiziana Margaria, Julia Padberg, Gabriele Taentzer Home Page:http://www.easst.org/eceasst/ISSN 1863-2122</note>
<title confidence="0.864338333333333">ECEASST Position Paper: m2n—A Tool for Translating Models Natural Language Descriptions</title>
<author confidence="0.999485">Andrea Randak</author>
<email confidence="0.61805">lastname@big.tuwien.ac.at,http://www.big.tuwien.ac.at</email>
<affiliation confidence="0.962105">Business Informatics Group Vienna University of Technology, Austria</affiliation>
<abstract confidence="0.998681833333333">describe the structure of a system, the UML Class Diagram yields the means-of-choice. Therefor, the Class Diagram provides concepts like class, attribute, operation, association, generalization, aggregation, enumeration, etc. When students are introduced to this diagram, they often have to solve exercises where texts in natural language are given and they have to model the described systems. When analyzing such exercises, it becomes evident that certain kinds of phrases describing a particular concept appear again and again contextualized to the described domain. In this paper, we present an approach which allows the automatic generation of textual specifications from a given Class Diagram based on standard phrases in natural language. Besides supporting teachers in preparing exercises, such an approach is also valuable for various e-learning scenarios.</abstract>
<intro confidence="0.985853">exercises, natural language description</intro>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>R J Abbott</author>
</authors>
<title>Program Design by Informal English Descriptions.</title>
<date>1983</date>
<journal>Communications of the ACM</journal>
<volume>26</volume>
<issue>11</issue>
<contexts>
<context position="2688" citStr="[Abb83]" startWordPosition="393" endWordPosition="393"> it is possible to automatically derive one artifact from the other. Already in the early 1980s attempts of automated translation of textual descriptions into program code were conducted. R.J. Abbott [Abb83] discusses a method for deriving programming concepts like data types and references by analyzing informal English descriptions. An important remark of Abbott’s work relates to the automation level of</context>
</contexts>
<marker>[Abb83]</marker>
<rawString>R. J. Abbott. Program Design by Informal English Descriptions. Communications of the ACM 26(11):882–894, 1983.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Auxepaules</author>
<author>D Py</author>
<author>T Lemeunier</author>
</authors>
<title>A Diagnosis Method that Matches Class Diagrams in a Learning Environment for Object-Oriented Modeling.</title>
<date>2008</date>
<booktitle>In ICALT ’08: Proc. of the 2008 Eighth IEEE International Conference on Advanced Learning Technologies. Pp.</booktitle>
<pages>26--30</pages>
<publisher>IEEE Computer Society,</publisher>
<marker>[APL08]</marker>
<rawString>L. Auxepaules, D. Py, T. Lemeunier. A Diagnosis Method that Matches Class Diagrams in a Learning Environment for Object-Oriented Modeling. In ICALT ’08: Proc. of the 2008 Eighth IEEE International Conference on Advanced Learning Technologies. Pp. 26–30. IEEE Computer Society, 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>N Baghaei</author>
<author>A Mitrovic</author>
</authors>
<title>A Constraint-Based Collaborative Environment for Learning UML Class Diagrams.</title>
<date>2006</date>
<booktitle>In Proc. Intelligent Tutoring Systems. LNCS 4053,</booktitle>
<pages>176--186</pages>
<publisher>Springer,</publisher>
<marker>[BM06]</marker>
<rawString>N. Baghaei, A. Mitrovic. A Constraint-Based Collaborative Environment for Learning UML Class Diagrams. In Proc. Intelligent Tutoring Systems. LNCS 4053, pp. 176–186. Springer, 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Brandsteidl</author>
<author>M Seidl</author>
<author>M Wimmer</author>
<author>C Huemer</author>
<author>G Kappel</author>
</authors>
<title>Teaching Models @ BIG - How to Give 1000 Students an Understanding of the UML.</title>
<date>2008</date>
<booktitle>In Promoting Software Modeling Through Active Education, Educators Symposium Models’08. Pp.</booktitle>
<pages>64--68</pages>
<institution>Warsaw University of Technology,</institution>
<marker>[BSW+08]</marker>
<rawString>M. Brandsteidl, M. Seidl, M. Wimmer, C. Huemer, G. Kappel. Teaching Models @ BIG - How to Give 1000 Students an Understanding of the UML. In Promoting Software Modeling Through Active Education, Educators Symposium Models’08. Pp. 64–68. Warsaw University of Technology, 2008.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Fliedl</author>
<author>C Kop</author>
<author>H C Mayr</author>
</authors>
<title>From Textual Scenarios to a Conceptual Schema.</title>
<date>2005</date>
<journal>Data &amp; Knowledge Engineering</journal>
<volume>55</volume>
<issue>1</issue>
<marker>[FKM05]</marker>
<rawString>G. Fliedl, C. Kop, H. C. Mayr. From Textual Scenarios to a Conceptual Schema. Data &amp; Knowledge Engineering 55(1):20–37, 2005. 7 / 8 Volume 34 (2010) Position Paper: m2n—A Tool for Translating Models to Natural Language Descriptions</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Suraweera</author>
<author>A Mitrovic</author>
</authors>
<title>An Intelligent Tutoring System for Entity Relationship Modelling.</title>
<date>2004</date>
<journal>International Journal of Artificial Intelligence in Education (IJAIED)</journal>
<pages>14--3</pages>
<marker>[SM04]</marker>
<rawString>P. Suraweera, A. Mitrovic. An Intelligent Tutoring System for Entity Relationship Modelling. International Journal of Artificial Intelligence in Education (IJAIED) 14(3-4):375–417, 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Wolter</author>
<author>T Krebs</author>
<author>L Hotz</author>
</authors>
<title>A Combined Similarity Measure for Determining Similarity of Model-based and Descriptive Requirements.</title>
<date>2010</date>
<booktitle>In Artificial Intelligence Techniques in Software Engineering (ECAI 2008 Workshop). Pp. 11–15. 2008. Proc. EduSymp</booktitle>
<volume>8</volume>
<marker>[WKH08]</marker>
<rawString>K. Wolter, T. Krebs, L. Hotz. A Combined Similarity Measure for Determining Similarity of Model-based and Descriptive Requirements. In Artificial Intelligence Techniques in Software Engineering (ECAI 2008 Workshop). Pp. 11–15. 2008. Proc. EduSymp 2010 8 / 8</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>