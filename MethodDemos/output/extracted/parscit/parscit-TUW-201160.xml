<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.089978">
<title confidence="0.9993515">
Variable Neighborhood Search for Capacitated
Connected Facility Location
</title>
<author confidence="0.997772">
Markus Leitner and Günther R. Raidl
</author>
<affiliation confidence="0.9999555">
Institute of Computer Graphics and Algorithms
Vienna University of Technology, Vienna, Austria
</affiliation>
<email confidence="0.899453">
{leitner|raidl}@ads.tuwien.ac.at
http://www.ads.tuwien.ac.at
</email>
<sectionHeader confidence="0.999213" genericHeader="abstract">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999670227272727">
The Capacitated Connected Facility Location Problem (CConFL) is an NP-
hard combinatorial optimization problem which arises in the design of last mile
communication networks (fiber-to-the-curb scenarios) [1]. Formally, we are given
an undirected, weighted graph G = (V, E), with edge costs ce &gt; 0, de E E. The
node set V = {r}UF UT is the disjoint union of the root node r, potential facility
locations F, and possible Steiner nodes T. Each facility i E F has associated
opening costs fi &gt; 0 and a maximum assignable capacity Di E N. Furthermore,
we are given a set of potential customers C, with individual capacity demands
dk E N and prizes pk &gt; 0, dk E C, the latter corresponding to the expected
profit when supplying customer k. Each customer k E C may be assigned to one
facility of a subset Fk C F, with assignment costs ai,k &gt; 0, di E Fk. A solution to
CConFL S = (RS, TS, FS, CS, αS) consists of a Steiner Tree (RS, TS), RS C V ,
TS C E, connecting the set of opened facilities FS C F and the root node r.
CS C C is the set of customers feasibly (i.e. respecting the capacity constraints)
assigned to facilities FS, whereas the actual mapping between customers and
facilities is described by αS : CS → FS. The objective value of a feasible solution
S is given by c(S) = Ee∈TS ce+Zi∈FS fi+Ek∈CS aαS(k),k+Ek∈C\CS pk, and we
aim to identify a most profitable solution minimizing this function. This variant
of CConFL has already been tackled by exact methods based on mixed integer
programming [2] and hybrid approaches based on Lagrangian relaxation [1].
Here, we present the first pure metaheuristic approach, which computes high
quality solution faster than existing approaches.
</bodyText>
<sectionHeader confidence="0.934688" genericHeader="method">
2 Greedy Solution Construction
</sectionHeader>
<bodyText confidence="0.909652">
(−fi+� k∈C′ i pk−ai,k)
Given a partial – possibly empty – solution S, a score δi =
ˆci
is computed for each facility i E F \ FS. By C′i C C \ CS we denote the optimal
set of customers still assignable to i, i.e. the set of customers maximizing the
resulting profit which are not yet assigned to another facility in S. C′i is computed
using the Combo algorithm [3] and we further denote by ˆci &gt; 0 the costs for
</bodyText>
<sectionHeader confidence="0.494604" genericHeader="method">
2 Markus Leitner, Günther R. Raidl
</sectionHeader>
<bodyText confidence="0.99992375">
connecting i to the partially constructed Steiner tree by means of an additional
least-cost path. In each step, we add the facility with maximal score, connect it
to the partially constructed Steiner tree, and assign the customers C′i to it, as
long as at least one facility i with δi &gt; 1 exists.
</bodyText>
<sectionHeader confidence="0.992511" genericHeader="method">
3 General Variable Neighborhood Search
</sectionHeader>
<bodyText confidence="0.999332">
In a variable neighborhood descent (VND) [4] we apply the following neighbor-
hood structures to improve different aspects of a solution: Key-path improve-
ment [5, 1] to reduce the costs of the Steiner tree and customer swap [6, 1] as
well as single customer cyclic exchange [1] to optimize realized assignments. For
improving the set of opened facilities, we consider a single facility swap neigh-
borhood which adds or removes exactly one facility. A new opened facility is
connected by an additional least-cost path while redundant edges are removed
after closing a facility in case it has been a leaf of the Steiner tree.
In order to escape from local optima, we embed the VND in a variable neigh-
borhood search (VNS) performing shaking by swapping l = 2, ... , lmax randomly
chosen potential facility locations.
</bodyText>
<sectionHeader confidence="0.983379" genericHeader="method">
4 Greedy Randomized Adaptive Search Procedure
</sectionHeader>
<bodyText confidence="0.998869142857143">
For comparison purposes we further embed above described VND into a greedy
randomized adaptive search procedure (GRASP) [7] based on a randomized ver-
sion of aforementioned constructive heuristic. Let δmin = argminδi {i E F \ FS |
δi &gt; 11 and δmax be the minimal and maximal scores among all relevant facil-
ities, respectively. Instead of always adding the facility with maximal score, at
each step we randomly choose one among the facilities i E F \ FS for which
δmax − β(δmax − δmin) &lt; δi &lt; δmax holds.
</bodyText>
<sectionHeader confidence="0.985498" genericHeader="conclusions">
5 Preliminary Results
</sectionHeader>
<bodyText confidence="0.982045269230769">
We performed computational experiments using the the instances from [1, 2].
VNS is terminated after ten consecutive non-improving iterations of the out-
ermost largest shaking move of size lmax = min{|F|, 101. For GRASP we set
α = 0.2 and generated 100 initial solutions and each experiment has been re-
peated 30 times on a single core of an Intel Core 2 Quad with 2.83GHz and 8GB
RAM. For the VND, we apply the neighborhood structures in the same order as
introduced above, but switch back to the first – i.e. the key-path – neighborhood
after changing the set of opened facilities only. The single customer cyclic ex-
change neighborhood is searched using a next improvement strategy, while best
improvement is applied for all other neighborhood structures.
Table 1 summarizes relative average objective values in percent, correspond-
ing standard deviations, and relative median CPU times of the VNS and GRASP
Variable Neighborhood Search for Capacitated Connected Facility Location 3
compared to the branch-and-cut-and-price approach (dBCP) from [2] which per-
formed best among the previously presented methods. An absolute CPU-time
limit of 7200 seconds has been applied to dBCP. We conclude, that both GRASP
and VNS are able to compute solutions which are only slightly worse that those
of dBCP, while usually needing much less CPU-time. For some instances with
|F |= 200 and |C |= 75, which are particularly hard for dBCP, the obtained
solutions are even significantly better than the ones obtained by dBCP within
two hours. VNS seems to have small advantages over GRASP with respect to
solution quality, while GRASP is usually slightly faster using the current set-
tings. We are currently analyzing the usage of additional large neighborhood
structures based on the mixed integer programming models from [2] and plan to
include a more detailed computational study with additional results on further,
larger instances in the full paper.
</bodyText>
<tableCaption confidence="0.981724333333333">
Table 1. Relative average solution values in %, corresponding standard deviations,
and median CPU times. Instances have been grouped according to IFI and ICI. Each
experiment has been repeated 30 times for GRASP and VNS.
</tableCaption>
<table confidence="0.999739555555555">
IFI ICI # average objective values median CPU times
GRASP −dBCP in % V NS−dBCP GRASP V NS
in %
dBCP dBCP dBCP dBCP
75 75 12 5.02 (2.08) 3.90 (1.45) 0.09 0.17
100 100 12 4.09 (1.30) 3.45 (1.16) 0.23 0.27
200 200 12 4.07 (2.03) 3.25 (1.14) 1.79 1.81
75 200 12 1.86 (0.32) 0.95 (0.28) 0.58 0.59
200 75 12 -6.23 (23.59) -5.62 (23.71) 0.01 0.01
</table>
<sectionHeader confidence="0.993129" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.998318588235294">
1. Leitner, M., Raidl, G.R.: Combining Lagrangian decomposition with very large
scale neighborhoood search for capacitated connected facility location. In: Post-
Conference Book of the Eight Metaheuristics International Conference – MIC 2009.
(to appear)
2. Leitner, M., Raidl, G.R.: Branch-and-cut-and-price for capacitated connected facil-
ity location. Technical Report TR 186–1–10–01, Vienna University of Technology,
Vienna, Austria (2010)
3. Martello, S., Pisinger, D., Toth, P.: Dynamic programming and strong bounds for
the 0–1 knapsack problem. Management Science 45(3) (1999) 414–424
4. Hansen, P., Mladenovi´c, N.: Variable neighborhood search: Principles and applica-
tions. European Journal of Operational Research 130(3) (2001) 449–467
5. Voß, S.: Steiner’s problem in graphs: heuristic methods. Discrete Applied Mathe-
matics 40 (1992) 45–72
6. Contreras, I.A., Diaz, J.A.: Scatter search for the single source capacitated facility
location problem. Annals of Operations Research 157(1) (2008) 73–89
7. Feo, T., Resende, M.: Greedy randomized adaptive search procedures. Journal of
Global Optimization 6(2) (1995) 109–133
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.781274">
<title confidence="0.999754">Variable Neighborhood Search for Connected Facility Location</title>
<author confidence="0.999982">Markus Leitner</author>
<author confidence="0.999982">Günther R Raidl</author>
<affiliation confidence="0.9970395">Institute of Computer Graphics and Vienna University of Technology, Vienna,</affiliation>
<web confidence="0.786102">http://www.ads.tuwien.ac.at</web>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>M Leitner</author>
<author>G R Raidl</author>
</authors>
<title>Combining Lagrangian decomposition with very large scale neighborhoood search for capacitated connected facility location. In:</title>
<date>2009</date>
<booktitle>PostConference Book of the Eight Metaheuristics International Conference – MIC</booktitle>
<note>(to appear)</note>
<contexts>
<context position="485" citStr="[1]" startWordPosition="56" endWordPosition="56">e Capacitated Connected Facility Location Problem (CConFL) is an NPhard combinatorial optimization problem which arises in the design of last mile communication networks (fiber-to-the-curb scenarios) [1]. Formally, we are given an undirected, weighted graph G = (V, E), with edge costs ce &gt; 0, de E E. The node set V = {r}UF UT is the disjoint union of the root node r, potential facility locations F, a</context>
<context position="1838" citStr="[1]" startWordPosition="312" endWordPosition="312">fitable solution minimizing this function. This variant of CConFL has already been tackled by exact methods based on mixed integer programming [2] and hybrid approaches based on Lagrangian relaxation [1]. Here, we present the first pure metaheuristic approach, which computes high quality solution faster than existing approaches. 2 Greedy Solution Construction (−fi+� k∈C′ i pk−ai,k) Given a partial – </context>
<context position="2942" citStr="[5, 1]" startWordPosition="505" endWordPosition="506">ts. 3 General Variable Neighborhood Search In a variable neighborhood descent (VND) [4] we apply the following neighborhood structures to improve different aspects of a solution: Key-path improvement [5, 1] to reduce the costs of the Steiner tree and customer swap [6, 1] as well as single customer cyclic exchange [1] to optimize realized assignments. For improving the set of opened facilities, we consid</context>
<context position="4235" citStr="[1, 2]" startWordPosition="727" endWordPosition="728">tep we randomly choose one among the facilities i E F \ FS for which δmax − β(δmax − δmin) &lt; δi &lt; δmax holds. 5 Preliminary Results We performed computational experiments using the the instances from [1, 2]. VNS is terminated after ten consecutive non-improving iterations of the outermost largest shaking move of size lmax = min{|F|, 101. For GRASP we set α = 0.2 and generated 100 initial solutions and e</context>
</contexts>
<marker>1.</marker>
<rawString>Leitner, M., Raidl, G.R.: Combining Lagrangian decomposition with very large scale neighborhoood search for capacitated connected facility location. In: PostConference Book of the Eight Metaheuristics International Conference – MIC 2009. (to appear)</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Leitner</author>
<author>G R Raidl</author>
</authors>
<title>Branch-and-cut-and-price for capacitated connected facility location.</title>
<date>2010</date>
<tech>Technical Report TR 186–1–10–01,</tech>
<institution>Vienna University of Technology,</institution>
<location>Vienna, Austria</location>
<contexts>
<context position="1781" citStr="[2]" startWordPosition="304" endWordPosition="304">CS aαS(k),k+Ek∈C\CS pk, and we aim to identify a most profitable solution minimizing this function. This variant of CConFL has already been tackled by exact methods based on mixed integer programming [2] and hybrid approaches based on Lagrangian relaxation [1]. Here, we present the first pure metaheuristic approach, which computes high quality solution faster than existing approaches. 2 Greedy Soluti</context>
<context position="4235" citStr="[1, 2]" startWordPosition="727" endWordPosition="728">tep we randomly choose one among the facilities i E F \ FS for which δmax − β(δmax − δmin) &lt; δi &lt; δmax holds. 5 Preliminary Results We performed computational experiments using the the instances from [1, 2]. VNS is terminated after ten consecutive non-improving iterations of the outermost largest shaking move of size lmax = min{|F|, 101. For GRASP we set α = 0.2 and generated 100 initial solutions and e</context>
<context position="5207" citStr="[2]" startWordPosition="884" endWordPosition="884">deviations, and relative median CPU times of the VNS and GRASP Variable Neighborhood Search for Capacitated Connected Facility Location 3 compared to the branch-and-cut-and-price approach (dBCP) from [2] which performed best among the previously presented methods. An absolute CPU-time limit of 7200 seconds has been applied to dBCP. We conclude, that both GRASP and VNS are able to compute solutions wh</context>
<context position="5967" citStr="[2]" startWordPosition="1009" endWordPosition="1009"> while GRASP is usually slightly faster using the current settings. We are currently analyzing the usage of additional large neighborhood structures based on the mixed integer programming models from [2] and plan to include a more detailed computational study with additional results on further, larger instances in the full paper. Table 1. Relative average solution values in %, corresponding standard </context>
</contexts>
<marker>2.</marker>
<rawString>Leitner, M., Raidl, G.R.: Branch-and-cut-and-price for capacitated connected facility location. Technical Report TR 186–1–10–01, Vienna University of Technology, Vienna, Austria (2010)</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Martello</author>
<author>D Pisinger</author>
<author>P Toth</author>
</authors>
<title>Dynamic programming and strong bounds for the 0–1 knapsack problem.</title>
<date>1999</date>
<journal>Management Science</journal>
<volume>45</volume>
<issue>3</issue>
<pages>414--424</pages>
<contexts>
<context position="2360" citStr="[3]" startWordPosition="405" endWordPosition="405">ptimal set of customers still assignable to i, i.e. the set of customers maximizing the resulting profit which are not yet assigned to another facility in S. C′i is computed using the Combo algorithm [3] and we further denote by ˆci &gt; 0 the costs for 2 Markus Leitner, Günther R. Raidl connecting i to the partially constructed Steiner tree by means of an additional least-cost path. In each step, we ad</context>
</contexts>
<marker>3.</marker>
<rawString>Martello, S., Pisinger, D., Toth, P.: Dynamic programming and strong bounds for the 0–1 knapsack problem. Management Science 45(3) (1999) 414–424</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Hansen</author>
<author>N Mladenovi´c</author>
</authors>
<title>Variable neighborhood search: Principles and applications.</title>
<date>2001</date>
<journal>European Journal of Operational Research</journal>
<volume>130</volume>
<issue>3</issue>
<pages>449--467</pages>
<contexts>
<context position="2823" citStr="[4]" startWordPosition="487" endWordPosition="487">ly constructed Steiner tree, and assign the customers C′i to it, as long as at least one facility i with δi &gt; 1 exists. 3 General Variable Neighborhood Search In a variable neighborhood descent (VND) [4] we apply the following neighborhood structures to improve different aspects of a solution: Key-path improvement [5, 1] to reduce the costs of the Steiner tree and customer swap [6, 1] as well as sing</context>
</contexts>
<marker>4.</marker>
<rawString>Hansen, P., Mladenovi´c, N.: Variable neighborhood search: Principles and applications. European Journal of Operational Research 130(3) (2001) 449–467</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Voß</author>
</authors>
<title>Steiner’s problem in graphs: heuristic methods.</title>
<date>1992</date>
<journal>Discrete Applied Mathematics</journal>
<volume>40</volume>
<pages>45--72</pages>
<contexts>
<context position="2942" citStr="[5, 1]" startWordPosition="505" endWordPosition="506">ts. 3 General Variable Neighborhood Search In a variable neighborhood descent (VND) [4] we apply the following neighborhood structures to improve different aspects of a solution: Key-path improvement [5, 1] to reduce the costs of the Steiner tree and customer swap [6, 1] as well as single customer cyclic exchange [1] to optimize realized assignments. For improving the set of opened facilities, we consid</context>
</contexts>
<marker>5.</marker>
<rawString>Voß, S.: Steiner’s problem in graphs: heuristic methods. Discrete Applied Mathematics 40 (1992) 45–72</rawString>
</citation>
<citation valid="true">
<authors>
<author>I A Contreras</author>
<author>J A Diaz</author>
</authors>
<title>Scatter search for the single source capacitated facility location problem.</title>
<date>2008</date>
<journal>Annals of Operations Research</journal>
<volume>157</volume>
<issue>1</issue>
<pages>73--89</pages>
<contexts>
<context position="3007" citStr="[6, 1]" startWordPosition="518" endWordPosition="519">hood descent (VND) [4] we apply the following neighborhood structures to improve different aspects of a solution: Key-path improvement [5, 1] to reduce the costs of the Steiner tree and customer swap [6, 1] as well as single customer cyclic exchange [1] to optimize realized assignments. For improving the set of opened facilities, we consider a single facility swap neighborhood which adds or removes exac</context>
</contexts>
<marker>6.</marker>
<rawString>Contreras, I.A., Diaz, J.A.: Scatter search for the single source capacitated facility location problem. Annals of Operations Research 157(1) (2008) 73–89</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Feo</author>
<author>M Resende</author>
</authors>
<title>Greedy randomized adaptive search procedures.</title>
<date>1995</date>
<journal>Journal of Global Optimization</journal>
<volume>6</volume>
<issue>2</issue>
<pages>109--133</pages>
<contexts>
<context position="3759" citStr="[7]" startWordPosition="641" endWordPosition="641">sen potential facility locations. 4 Greedy Randomized Adaptive Search Procedure For comparison purposes we further embed above described VND into a greedy randomized adaptive search procedure (GRASP) [7] based on a randomized version of aforementioned constructive heuristic. Let δmin = argminδi {i E F \ FS | δi &gt; 11 and δmax be the minimal and maximal scores among all relevant facilities, respectivel</context>
</contexts>
<marker>7.</marker>
<rawString>Feo, T., Resende, M.: Greedy randomized adaptive search procedures. Journal of Global Optimization 6(2) (1995) 109–133</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>