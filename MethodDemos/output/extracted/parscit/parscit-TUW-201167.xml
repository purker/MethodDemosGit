<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.576117">
<title confidence="0.99880425">
Using a Solution Archive to Enhance
Metaheuristics for the Rooted
Delay-Constrained Minimum Spanning Tree
Problem
</title>
<author confidence="0.999746">
Mario Ruthmair, Andreas Hubmer, and Günther R. Raidl
</author>
<affiliation confidence="0.999961">
Institute of Computer Graphics and Algorithms
Vienna University of Technology, Vienna, Austria
</affiliation>
<email confidence="0.796977">
{ruthmair|raidl}®ads.tuwien.ac.at, andreas.hubmer®tuwien.ac.at
</email>
<sectionHeader confidence="0.999481" genericHeader="abstract">
1 Introduction
</sectionHeader>
<bodyText confidence="0.9999748">
When designing a communication network with a central server broadcasting
information to all the participants of the network, some applications, such as
video conferences, require a limitation of the maximal delay from the server to
each client. Beside this delay-constraint minimizing the cost of establishing the
network is in most cases an important design criterion. This network design
problem can be modeled as an NP-hard combinatorial optimization problem
called rooted delay-constrained minimum spanning tree (RDCMST) problem. The
objective is to find a minimum cost spanning tree of a given graph with the
additional constraint that the sum of delays along the paths from a specified
root node to any other node must not exceed a given delay-bound.
More formally, we are given an undirected graph G = (V, E) with a set V
of n nodes, a set E of m edges, a cost function c : E --&gt; R+0 , a delay function
d : E --&gt; R+, a fixed root node s E V , and a delay-bound B &gt; 0. An optimal
solution to the RDCMST problem is a spanning tree T = (V, E&amp;apos;), E&amp;apos; C_ E, with
minimum cost c(T) = EeIEI c(e), satisfying the constraints EeIP(s,v) d(e) &amp;lt;
B, dv E V , where P(s, v) denotes the unique path from root s to node v.
Exact approaches to the RDCMST problem have been examined by Gouveia
et al. in [1] based on the concept of constrained shortest paths utilized in column
generation, Lagrangian relaxation methods and a flow-based reformulation of the
problem on layered acyclic graphs. All these methods can only solve small in-
stances with significantly less than 100 nodes to proven optimality in reasonable
time when considering complete graphs. A constructive heuristic approach based
on Prim’s algorithm to find a minimum spanning tree is described by Salama
et al. in [6]. In [4] we present a more de-centralized approach by applying the
basic concept of Kruskal’s minimum spanning tree algorithm to the RDCMST
problem. Two metaheuristics based on GRASP and variable neighborhood de-
scent (VND) improve the constructed solution. In [5] we reuse this VND as the
local search component in a general variable neighborhood search (GVNS) and
a MAX − MIN ant system (MMAS). The MMAS mostly obtains the best
results in the performed tests.
</bodyText>
<sectionHeader confidence="0.739705" genericHeader="method">
2 The Solution Archive
</sectionHeader>
<bodyText confidence="0.999983104166667">
One of the basic problems of local search and population-based heuristics is
the potentially repeated examination of already visited solutions. To tackle the
problem of revisits a complete solution archive can be built efficiently storing so-
lutions and making it possible to derive new unvisited solutions as replacements
of detected duplicates. First, promising experiments with solution archives to
enhance standard genetic algorithms for binary benchmark problems are pre-
sented in [3]. Here we introduce a specialized solution archive for the RDCMST
problem.
A feasible solution to the RDCMST problem can also be interpreted as a
directed spanning tree (outgoing arborescence) rooted at the source node s.
Therefore each node except the root has a unique predecessor corresponding to
the origin of the incoming arc. Our solution archive uses a trie data structure,
which is mostly known from the domain of (language) dictionaries, where a huge
number of words has to be stored in a very compact way. In our trie, each node
contains an array of n − 1 references to nodes at the next level, and at each
level a dedicated node’s predecessor in a given solution decides which pointer to
follow. Therefore, a single solution is uniquely represented by n − 1 trie nodes.
In this way, the trie has maximum height O(n), and an insertion operation and
a check whether or not a solution is already contained can always be done in
time O(n) independently of the number of stored solutions.
Some special adaptions are applied to the basic trie data structure in order
to reduce the used space while at the same not increasing access time too much.
More specifically, the preprocessed input graph usually is not complete but typ-
ically sparse, so the number of array elements of a trie node can be reduced to
the actual degree of the corresponding node. To maintain constant access time
to an array element a global mapping between adjacent nodes and array indices
is stored. Furthermore we can possibly reduce space by allocating the elements
of a trie node dynamically, e.g. by a linked list, naturally at the expense of access
time. Last but not least, fully explored subtrees are pruned and replaced by an
appropriate marker.
The essential aspect which makes our archive approach different to more
common simple solution caching strategies as e.g. described in [2] is the provision
of a function that derives for each duplicate a typically similar but definitely not
yet visited solution. This operation can also be seen as a kind of “intelligent”
mutation. Here, one has to consider that only a subset of possible predecessor
assignments correspond to a feasible RDCMST solution satisfying both the tree
structure and the delay constraints. In general finding an unvisited predecessor
assignment in the archive takes O(n) time which is extended by a feasibility
check. In a first step we only consider solutions differing in one edge. There are
O(n2) such candidates and each one can be tested for feasibility in constant time
when using appropriate pre-calculated information. If no new feasible solution
can be found the search is successively extended to more distant solutions.
An interesting, although more theoretical side effect of the extension of a
metaheuristic by our archive is that the metaheuristic in principle becomes a
complete, exact optimization approach with bounded runtime: In each iteration,
(at least) one new solution is evaluated, and by the archive it is also efficiently
possible to detect when the whole search space has been covered and the search
can be terminated.
</bodyText>
<sectionHeader confidence="0.987005" genericHeader="method">
3 Integration in Metaheuristics
</sectionHeader>
<bodyText confidence="0.999970545454546">
An important question is where to integrate the archive in a (meta-)heuristic
process and which metaheuristics can benefit from such an extension at all. At
some points the solution diversity may be very high lowering the probability of a
revisit, e.g. after shaking the solution randomly. Therefore, the archive just grows
very large possibly consuming too much space. At other points revisits typically
occur more frequently, e.g. after applying local improvement methods, but due
to the structure of the metaheuristic it cannot benefit much from consulting the
archive. Detailed analyses of variants of archive-extended GRASP, ant colony
optimization, and evolutionary algorithms are currently ongoing work. Generally
speaking, the solution archive must be used with caution but has the potential
to speed up a metaheuristic significantly.
</bodyText>
<sectionHeader confidence="0.998196" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999930631578947">
1. Gouveia, L., Paias, A., Sharma, D.: Modeling and Solving the Rooted Distance-
Constrained Minimum Spanning Tree Problem. Computers and Operations Re-
search 35(2), 600–613 (2008)
2. Kratica, J.: Improving Performances of the Genetic Algorithm by Caching. Com-
puters and Artificial Intelligence 18(3), 271–283 (1999)
3. Raidl, G.R., Hu, B.: Enhancing Genetic Algorithms by a Trie-Based Complete So-
lution Archive. In: Cowling, P., Merz, P. (eds.) Evolutionary Computation in Com-
binatorial Optimisation – EvoCOP 2010. LNCS, vol. 6022, pp. 239–251. Springer
(2010)
4. Ruthmair, M., Raidl, G.R.: A Kruskal-Based Heuristic for the Rooted Delay-
Constrained Minimum Spanning Tree Problem. In: Moreno-D´ıaz, R., Pichler, F.,
Quesada-Arencibia, A. (eds.) EUROCAST 2009. LNCS, vol. 5717, pp. 713–720.
Springer (2009)
5. Ruthmair, M., Raidl, G.R.: Variable Neighborhood Search and Ant Colony Opti-
mization for the Rooted Delay-Constrained Minimum Spanning Tree Problem. In:
et al., R.S. (ed.) PPSN XI, Part II. LNCS, vol. 6239, pp. 391–400. Springer (2010)
6. Salama, H.F., Reeves, D.S., Viniotis, Y.: The Delay-Constrained Minimum Spanning
Tree Problem. In: Blum, C., Roli, A., Sampels, M. (eds.) Proceedings of the 2nd
IEEE Symposium on Computers and Communications. pp. 699–703 (1997)
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.306917">
<title confidence="0.9963705">Using a Solution Archive to Metaheuristics for the Delay-Constrained Minimum Spanning Problem</title>
<author confidence="0.999958">Mario Ruthmair</author>
<author confidence="0.999958">Andreas Hubmer</author>
<author confidence="0.999958">Günther R Raidl</author>
<affiliation confidence="0.999397">Institute of Computer Graphics and Algorithms</affiliation>
<address confidence="0.430323">Vienna University of Technology, Vienna, Austria</address>
<email confidence="0.611616">andreas.hubmer®tuwien.ac.at</email>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>L Gouveia</author>
<author>A Paias</author>
<author>D Sharma</author>
</authors>
<title>Modeling and Solving the Rooted DistanceConstrained Minimum Spanning Tree Problem.</title>
<date>2008</date>
<journal>Computers and Operations Research</journal>
<volume>35</volume>
<issue>2</issue>
<pages>600--613</pages>
<contexts>
<context position="1635" citStr="[1]" startWordPosition="275" endWordPosition="275">e), satisfying the constraints EeIP(s,v) d(e) &amp;lt; B, dv E V , where P(s, v) denotes the unique path from root s to node v. Exact approaches to the RDCMST problem have been examined by Gouveia et al. in [1] based on the concept of constrained shortest paths utilized in column generation, Lagrangian relaxation methods and a flow-based reformulation of the problem on layered acyclic graphs. All these meth</context>
</contexts>
<marker>1.</marker>
<rawString>Gouveia, L., Paias, A., Sharma, D.: Modeling and Solving the Rooted DistanceConstrained Minimum Spanning Tree Problem. Computers and Operations Research 35(2), 600–613 (2008)</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Kratica</author>
</authors>
<title>Improving Performances of the Genetic Algorithm by Caching.</title>
<date>1999</date>
<journal>Computers and Artificial Intelligence</journal>
<volume>18</volume>
<issue>3</issue>
<pages>271--283</pages>
<contexts>
<context position="4952" citStr="[2]" startWordPosition="817" endWordPosition="817">lored subtrees are pruned and replaced by an appropriate marker. The essential aspect which makes our archive approach different to more common simple solution caching strategies as e.g. described in [2] is the provision of a function that derives for each duplicate a typically similar but definitely not yet visited solution. This operation can also be seen as a kind of “intelligent” mutation. Here, </context>
</contexts>
<marker>2.</marker>
<rawString>Kratica, J.: Improving Performances of the Genetic Algorithm by Caching. Computers and Artificial Intelligence 18(3), 271–283 (1999)</rawString>
</citation>
<citation valid="true">
<authors>
<author>G R Raidl</author>
<author>B Hu</author>
</authors>
<title>Enhancing Genetic Algorithms by a Trie-Based Complete Solution Archive.</title>
<date>2010</date>
<booktitle>Evolutionary Computation in Combinatorial Optimisation – EvoCOP 2010. LNCS,</booktitle>
<volume>6022</volume>
<pages>239--251</pages>
<editor>In: Cowling, P., Merz, P. (eds.)</editor>
<publisher>Springer</publisher>
<contexts>
<context position="3082" citStr="[3]" startWordPosition="498" endWordPosition="498">w unvisited solutions as replacements of detected duplicates. First, promising experiments with solution archives to enhance standard genetic algorithms for binary benchmark problems are presented in [3]. Here we introduce a specialized solution archive for the RDCMST problem. A feasible solution to the RDCMST problem can also be interpreted as a directed spanning tree (outgoing arborescence) rooted </context>
</contexts>
<marker>3.</marker>
<rawString>Raidl, G.R., Hu, B.: Enhancing Genetic Algorithms by a Trie-Based Complete Solution Archive. In: Cowling, P., Merz, P. (eds.) Evolutionary Computation in Combinatorial Optimisation – EvoCOP 2010. LNCS, vol. 6022, pp. 239–251. Springer (2010)</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Ruthmair</author>
<author>Raidl</author>
</authors>
<title>G.R.: A Kruskal-Based Heuristic for the Rooted DelayConstrained Minimum Spanning Tree Problem.</title>
<date>2009</date>
<booktitle>EUROCAST 2009. LNCS,</booktitle>
<volume>5717</volume>
<pages>713--720</pages>
<editor>In: Moreno-D´ıaz, R., Pichler, F., Quesada-Arencibia, A. (eds.)</editor>
<publisher>Springer</publisher>
<contexts>
<context position="2119" citStr="[4]" startWordPosition="350" endWordPosition="350">en optimality in reasonable time when considering complete graphs. A constructive heuristic approach based on Prim’s algorithm to find a minimum spanning tree is described by Salama et al. in [6]. In [4] we present a more de-centralized approach by applying the basic concept of Kruskal’s minimum spanning tree algorithm to the RDCMST problem. Two metaheuristics based on GRASP and variable neighborhood</context>
</contexts>
<marker>4.</marker>
<rawString>Ruthmair, M., Raidl, G.R.: A Kruskal-Based Heuristic for the Rooted DelayConstrained Minimum Spanning Tree Problem. In: Moreno-D´ıaz, R., Pichler, F., Quesada-Arencibia, A. (eds.) EUROCAST 2009. LNCS, vol. 5717, pp. 713–720. Springer (2009)</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Ruthmair</author>
<author>Raidl</author>
</authors>
<title>G.R.: Variable Neighborhood Search and Ant Colony Optimization for the Rooted Delay-Constrained Minimum Spanning Tree Problem. In:</title>
<date>2010</date>
<volume>6239</volume>
<pages>391--400</pages>
<editor>et al., R.S. (ed.) PPSN XI, Part II. LNCS,</editor>
<publisher>Springer</publisher>
<contexts>
<context position="2374" citStr="[5]" startWordPosition="388" endWordPosition="388">ng the basic concept of Kruskal’s minimum spanning tree algorithm to the RDCMST problem. Two metaheuristics based on GRASP and variable neighborhood descent (VND) improve the constructed solution. In [5] we reuse this VND as the local search component in a general variable neighborhood search (GVNS) and a MAX − MIN ant system (MMAS). The MMAS mostly obtains the best results in the performed tests. 2 </context>
</contexts>
<marker>5.</marker>
<rawString>Ruthmair, M., Raidl, G.R.: Variable Neighborhood Search and Ant Colony Optimization for the Rooted Delay-Constrained Minimum Spanning Tree Problem. In: et al., R.S. (ed.) PPSN XI, Part II. LNCS, vol. 6239, pp. 391–400. Springer (2010)</rawString>
</citation>
<citation valid="true">
<title>The Delay-Constrained Minimum Spanning Tree Problem.</title>
<date>1997</date>
<booktitle>Proceedings of the 2nd IEEE Symposium on Computers and Communications.</booktitle>
<pages>699--703</pages>
<editor>Salama, H.F., Reeves, D.S., Viniotis, Y.:</editor>
<contexts>
<context position="2111" citStr="[6]" startWordPosition="348" endWordPosition="348"> to proven optimality in reasonable time when considering complete graphs. A constructive heuristic approach based on Prim’s algorithm to find a minimum spanning tree is described by Salama et al. in [6]. In [4] we present a more de-centralized approach by applying the basic concept of Kruskal’s minimum spanning tree algorithm to the RDCMST problem. Two metaheuristics based on GRASP and variable neig</context>
</contexts>
<marker>6.</marker>
<rawString>Salama, H.F., Reeves, D.S., Viniotis, Y.: The Delay-Constrained Minimum Spanning Tree Problem. In: Blum, C., Roli, A., Sampels, M. (eds.) Proceedings of the 2nd IEEE Symposium on Computers and Communications. pp. 699–703 (1997)</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>