<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.000000">
<title confidence="0.805163">
Dialogue Games for Fuzzy Logics
</title>
<sectionHeader confidence="0.827345" genericHeader="abstract">
DIPLOMARBEIT
</sectionHeader>
<bodyText confidence="0.3371342">
zur Erlangung des akademischen Grades
Diplom-Ingenieur
im Rahmen des Studiums
Computational Intelligence
eingereicht von
</bodyText>
<note confidence="0.5653998">
Christoph Roschger, Bakk.techn.
Matrikelnummer 0126178
an der
Fakultät für Informatik der Technischen Universität Wien
Betreuer: Ao.Prof.Dipl-Ing.Dr.techn. Christian G. Fermüller
Wien, 21.10.2008
(Unterschrift Verfasser) (Unterschrift Betreuer)
Technische Universität Wien
A-1040 Wien Karlsplatz 13 Tel. +43/(0)1/58801-0 http://www.tuwien.ac.at
MASTER THESIS
</note>
<title confidence="0.8366915">
Dialogue Games for Fuzzy Logics
Performed at the Department of
</title>
<author confidence="0.959933">
Computer Languages
</author>
<affiliation confidence="0.981292">
Vienna University of Technology
</affiliation>
<keyword confidence="0.2874242">
advised by
Ao.Prof.Dipl.-Ing.Dr.techn.
Christian G. Fermüller
by
Christoph Roschger, Bakk.techn.
</keyword>
<bodyText confidence="0.9290962">
Erlgasse 40/15
1120 Wien
Vienna, October 2008
Zusammenfassung
Formale Dialogspiele werden schon seit langem dazu verwendet, die Semantik verschiedener
Logiken zu charakterisieren. In den 70er Jahren präsentierte Robin Giles seinen Versuch, eine
operationale Grundlage für formales Schließen zu definieren, basierend auf atomaren Exper-
imenten, welche Dispersion aufweisen können. Diese Masterarbeit motiviert und beschreibt
seinen Ansatz und die Verbindung zu t-Norm-basierten Fuzzy-Logiken.
Wir geben eine kurze Einführung in t-Normen und mehrwertige Fuzzy-Logiken, die auf
diese Bezug nehmen. Im Speziellen liegt der Schwerpunkt auf drei solchen fundamen-
talen Fuzzy-Logiken: Lukasiewicz-Logik, Gödel-Logik und Produkt-Logik. Verschiedene
Möglichkeiten, die Spielregeln von Giles’ Spiel zu ändern, um dieses adäquat für Gödel- und
Produkt-Logik zu machen, werden präsentiert und diskutiert. Darüber hinaus beschreiben
wir die starke Verbindung zwischen Gewinnstrategien im Spiel und Ableitungen in einem
analytischen Kalkül, der auf relationalen Hypersequenten basiert.
Eine andere Art von Dialogspielen sind sogenannte “Truth Comparison Games”. Diese
sind besonders geeignet für Gödel-Logik, da sie der gradbasierten Semantik der Gödel-Logik
mehr entsprechen als Giles’ Spiel. Wir präsentieren das Spiel und diskutieren Gewinnstrate-
gien für beide Spieler, welche als Beweis für die Gültigkeit oder Widerlegbarkeit einer Formel
gesehen werden können.
Zusätzlich werden mehrere Hilfsprogramme vorgestellt, die im Kontext dieser Master-
arbeit entwickelt wurden. Darunter befindet sich auch eine webbasierte Anwendung zur
interaktiven Exploration von Giles’ Spiel und dessen Erweiterungen.
i
</bodyText>
<sectionHeader confidence="0.921606" genericHeader="keywords">
Abstract
</sectionHeader>
<bodyText confidence="0.999818555555556">
Formal dialogue games are a traditional approach to characterize the semantics of logics. In
the 1970s Robin Giles attempted to provide an operational foundation for formal reasoning in
physical theories by dialogue games based on atomic experiments that may show dispersion.
This thesis motivates, describes and analyzes his approach and the connection to t-norm
based fuzzy logics.
We give a short introduction into t-norms and many-valued logics based on t-norms. In
particular we focus on three fundamental t-norm based fuzzy logics: Lukasiewicz Logic,
Gödel Logic, and Product Logic. We present and discuss several approaches for extending
the game rules of Giles’s Game in order to make it adequate for Gödel Logic and Product
Logic. Moreover, we give hints at a strong correspondence between winning strategies in the
game and derivations in an analytic proof system based on relational hypersequents.
Another type of dialogue games are truth comparison games. This type is suitable for
Gödel Logic and relates more to the degree based semantics of that logic than Giles’s Game.
We present the game and discuss winning strategies for both players indicating the validity
or refutability of a formula.
Additionally, several utilities implemented in the context of this thesis are presented.
Amongst these is a web-based application which allows for the interactive exploration of
Giles’s Game and its extensions.
</bodyText>
<page confidence="0.499489">
ii
</page>
<tableCaption confidence="0.966158">
Table of Contents
</tableCaption>
<table confidence="0.97995505">
1 Introduction 1
2T-Norm Based Fuzzy Logics 3
2.1 Design Choices 3
2.2 T-Norms 5
2.3 Lukasiewicz Logic 9
2.4 Gödel Logic 10
2.5 Product Logic 11
2.6 A Uniform Hypersequent System 12
3 Giles’s Game 16
3.1 Motivation 16
3.2 Betting on Positive Results 19
3.3 Decomposing Propositions 19
3.4 Analyzing Giles’s Game 24
3.4.1 Risk Values and Valuations 26
3.4.2 Stability of Results 31
3.5 Rules for Other Connectives 32
3.6 Logical Equivalences as Game Equivalencies 35
3.7 Remarks on Quantifiers 37
4 Extending Giles’s Game to Other Logics 43
iii
</table>
<tableCaption confidence="0.901071">
Table of Contents Table of Contents
</tableCaption>
<address confidence="0.5706576">
4.1 Different Ways of Combining Bets 44
4.1.1 Summing Up Bets 44
4.1.2 Joint Bets 44
4.1.3 Selecting Representative Bets 45
4.1.4 Winning conditions 45
</address>
<subsectionHeader confidence="0.69347475">
4.2 Decomposing Complex Assertions 46
4.3 Adequateness of the Rules 49
4.4 Alternative Rules 57
4.5 Rules for Other Connectives 61
</subsectionHeader>
<figure confidence="0.682024235294118">
5 Truth Comparison Games 63
5.1 Extending G by Additional Operators 66
6 Implementation of Giles’s Game 69
6.1 Webgame 69
6.2 Giles 73
6.3 Hypseq 75
6.4 TCGame 75
Notation used 77
Bibliography 79
List of Figures 82
List of Tables 83
Index 84
iv
“Everything is vague to a degree you do not realize
till you have tried to make it precise.”
Bertrand Russell
CHAPTER 1
</figure>
<sectionHeader confidence="0.821386" genericHeader="introduction">
Introduction
</sectionHeader>
<bodyText confidence="0.998977941176471">
Vagueness is a ubiquitous and pervasive phenomenon in information processing. Modelling
vagueness is often accomplished by assigning degrees of truth to propositions. Fuzzy logics,
taken here in Zadeh’s “narrow sense” [Zad96], are based on the extension of the two classical
truth values by infinitely many intermediary degrees of truth. Degrees of truth should
strictly be distinguished from degrees of belief, and therefore require methods different from
probability theory. In particular, in fuzzy logics the semantics of the logical connectives is
required to be truth functional.
In the 1970s Robin Giles attempted to provide an operational foundation for formal reason-
ing in physical theories based on atomic experiments that may show dispersion. A formula
is interpreted by a strategic game, where two players bet on the combined results of atomic
experiments, that may show different outcomes when repeated. The degree of truth is then
related to the expected loss of the player initially asserting the formula. Giles proved that
the propositions that a player can bet on without expecting loss coincide with those that are
valid in Lukasiewicz Logic, one of three fundamental, so-called t-norm based fuzzy logics.
Giles’s remarkable result can, with hindsight, be seen as one of the few attempts to solve
a fundamental problem in approximate reasoning: how to derive a fuzzy logic from first
principles, in this case from dialogue rules combined with a betting scheme.
</bodyText>
<page confidence="0.875806">
1
</page>
<sectionHeader confidence="0.79787" genericHeader="method">
1. Introduction
</sectionHeader>
<bodyText confidence="0.999455625">
In Chapter 2 we motivate fuzzy logics based on so-called t-norms. We present the three
fundamental t-norm based fuzzy logics Lukasiewicz Logic L, Product Logic Π, and Gödel
Logic G. An analytic proof system for these three logics based on relational hypersequents
is described which is of special interest in the context of Giles’s Game.
Chapter 3 presents Giles’s Game itself. Giles’s approach of reasoning in physical theories
by assigning a “tangible meaning” to propositions is motivated and discussed. The dialogue
game rules for subsequently decomposing compound propositions as well as an adequate
betting scheme for atomic propositions are given. This chapter also includes a version of
Giles’s proof which relates the game to Lukasiewicz Logic. Moreover, we provide hints at an
extension of Giles’s Game adequate for first order Lukasiewicz Logic.
Chapter 4 shows that variants of Giles’s Game are adequate for Product Logic and Gödel
Logic. This is accomplished in the first place by changing the underlying betting scheme.
We also have to modify the game rules for decomposing implications. Several ways of doing
so are presented.
Chapter 5 presents so-called truth comparison games. This type of game is a dialogue game
adequate for Gödel Logic G which, in contrast to L and Π, only requires the comparison
of different degrees of truth and no arithmetical operations on these. We also show how
to model strategies for both players in this framework. These strategies can be used for
characterizing validity and refutability of formulas in Gödel Logic.
In the context of this thesis four small tools have been implemented. The applications
and their usage are subject of Chapter 6:
Webgame: A web-based application which enables the interactive exploration of Giles’s
Game and its variants for Product Logic and Gödel Logic. After playing the game
and having reached a final game state, one can simulate the evaluation of atomic
propositions based on (dispersive) experiments using the respective betting scheme.
Giles: A utility which creates and visualizes game trees of Giles’s Game. Most illustrations
of game trees in this thesis are generated using giles.
Hypseq: A tool which constructs and displays derivations of hypersequents in the hyperse-
quent calculus rH presented in Section 2.6.
TCGame: A tool which searches for winning strategies for the proponent in the truth com-
parison game presented in Chapter 5. Such a strategy can be displayed as a tree and
can be seen as a proof of the initial proposition of the game.
</bodyText>
<page confidence="0.953483">
2
</page>
<figure confidence="0.5684105">
“There is nothing worse than a sharp image of a fuzzy concept.”
Anselm Adams
CHAPTER 2
T-Norm Based Fuzzy Logics
</figure>
<bodyText confidence="0.99907">
In this chapter we concretize the notion of a fuzzy logic by choosing so called t-norms as a
starting point for defining a logic. We then describe three important t-norms and correspond-
ing logics in more detail, which are of special relevance when dealing with dialogue games
later on. This chapter also includes a brief description of a proof system using relational
hypersequents and uniform rules for those three logics.
</bodyText>
<subsectionHeader confidence="0.922305">
2.1 Design Choices
</subsectionHeader>
<bodyText confidence="0.960812">
Fuzzy logics are commonly understood as many valued logics that allow to model reasoning
in presence of different degrees of truth. In order to achieve this, we follow Petr Häjek
([Hä02] and [Häj02]) in making the following fundamental “design choices”:
</bodyText>
<footnote confidence="0.8570306">
1. The real unit interval [0, 1] is taken as our set of truth values, 0 meaning absolute falsity,
1 standing for absolute truth. The truth values are linearly ordered using the usual
ordering &lt;. An important implication of this choice is that we always can compare
the truth values of two propositions. For example, we can say, the proposition “I am
tall” is true to a higher degree than the proposition “the weather is good today”.
</footnote>
<page confidence="0.984676">
3
</page>
<subsubsectionHeader confidence="0.451773">
2.1. Design Choices 2. T-Norm Based Fuzzy Logics
</subsubsectionHeader>
<bodyText confidence="0.802251923076923">
2. The truth value of a formula o(A, B) shall solely be determined by the truth values
of the formulas A and B. This notion is called truth functionality and is formalized
as follows: Each binary connective o shall have a truth function fo : [0, 1]2 → [0, 1]
determining for any pair of formulas the truth degree of the compound formula and
similarly for unary connectives.
This requirement, for example, hinders us to simply regard truth values as probabilities
of arbitrary events; the resulting logic would not be truth functional: The probability
value of the proposition “A and B” then is not composable into the truth values of A
and B alone, but depends on how these events are related to each other. In general
one cannot assume that arbitrary experiments are independent of each other. The
same applies to propositions of the form “A or B” as the probability P(A or B) can be
calculated as P(A or B) = P(A)+P(B)−P(A and B). Nevertheless, there are approaches
to probabilistic reasoning in a logical framework; see e.g. [HGE95].
</bodyText>
<listItem confidence="0.705640333333333">
3. When choosing truth functions for connectives each fuzzy logic shall be a generalization
of classical logic. So, for the truth values 0 and 1 the truth functions must behave
classically. For example, if we call a connective “→” implication, its truth function
</listItem>
<bodyText confidence="0.973005823529412">
f, : [0, 1]2 → [0, 1] must satisfy the equalities f,(0, 1) = 1, f,(0, 0) = 1, f,(1, 0) = 0
and f,(1, 1) = 1. Hence, all tautologies (formulas that always evaluate to the truth
value 1 regardless of the truth values of their atoms) in our fuzzy logic are also classical
tautologies, while the other way round this does not need to be true.
4. We start with formulating requirements for the conjunction. These requirements are
described using the notion of a t-norm (see the next section). Based on the truth
function for conjunction a “reasonable” definition for implication can be formulated;
we then will see that having defined truth functions for conjunction and implication
the truth functions for the other connectives are determined as well.
5. The truth function f, for the negation is defined by f,(a) := f,(f(a), 0) where f(a) is
the truth value of a and f, is the truth function for the implication.
In other words: The truth value for the negation of a proposition states to which degree
we can conclude an absolutely false statement from this proposition.
This view of fuzzy logics also corresponds to what Lotfi A. Zadeh, the inventor of fuzzy
sets, describes as fuzzy logics in a narrow sense, [Zad96],[RJM94].
Moreover, we will restrict ourselves to propositional fuzzy logics; a short treatment of
predicate fuzzy logics and their relation to dialogue games will be in Section 3.7.
</bodyText>
<page confidence="0.983282">
4
</page>
<bodyText confidence="0.527363">
2.2. T-Norms 2. T-Norm Based Fuzzy Logics
</bodyText>
<subsectionHeader confidence="0.982555">
2.2 T-Norms
</subsectionHeader>
<bodyText confidence="0.994694933333333">
As mentioned above we start defining a fuzzy logic by looking for suitable truth functions
for conjunction. Possible candidate functions must adhere to the following rather intuitive
requirements:
Asserting the statement “A and B” shall be equivalent to asserting the statement
“B and A”. Although, in natural language this is not necessarily the case (because the
emphasis is rather placed on A respectively B) we require this in analogy to classical logic.
Let “A and B” be a proposition with truth value v. Then, if we replace A by another
statement which has a higher truth value than A, the truth value of the new conjunction
shall not be smaller than v and similarly for B.
Moreover, a small change in the truth value of A should only result in a small change in
the truth value of the statement “A and B”, and the same for B. Thus, we require continuity
of our truth function1.
Finally, in order to ensure that classical logic remains a special case we will further require
that 1 is the unit element and 0 the zero element.
Thus we arrive at the notion of a t-norm:
</bodyText>
<construct confidence="0.39156">
Definition 1. A function * : [0, 1]2 __&gt; [0, 1] is called a t-norm if it is
❼ commutative and associative:
</construct>
<equation confidence="0.987088">
x * y = y * x
(x * y) * z = x * (y * z),
❼ 1 * x = x and 0 * x = 0.
❼ non-decreasing in both arguments:
</equation>
<bodyText confidence="0.5791215">
x &lt; x&apos; implies x * y &lt; x&apos; * y,
y &lt; y&apos; implies x * y &lt; x * y&apos;,
</bodyText>
<footnote confidence="0.99925075">
1Following this argument, it would suffice to require the t-norm to be continuous in each of its variables,
which is in general weaker than calling for continuity of the function itself. However, it can be proved
that because of the non-decreasingness of t-norms, these two properties are equivalent. (See [KMP00],
Chapter 1, Proposition 1.19 )
</footnote>
<page confidence="0.963421">
5
</page>
<bodyText confidence="0.509248">
2.2. T-Norms 2. T-Norm Based Fuzzy Logics
</bodyText>
<equation confidence="0.932135">
A t-norm is continuous if the functions
*x(y) : [0, 1] --&gt; [0, 1], *x (y) := x * y and
*y(x) : [0, 1] --&gt; [0, 1], *y (x) := x * y
</equation>
<bodyText confidence="0.929393">
are continuous.
There exist infinitely many different t-norms, but we will only deal with three of them:
</bodyText>
<listItem confidence="0.999524333333333">
1. Lukasiewicz t-norm * L: x * L y = max(0, x + y − 1),
2. Gödel t-norm *G: x *G y = min(x, y),
3. Product t-norm *Π: x *Π y = x • y
</listItem>
<bodyText confidence="0.9325294">
These are considered to be the most important ones. All other continuous t-norms can
be obtained from them using a so-called ordinal sum construction. (See [Hä02] for a precise
description and proof.)
For defining a truth function for implication for a given t-norm, we will make use of the
residuum of a given t-norm:
</bodyText>
<construct confidence="0.930536333333333">
Definition 2. Let * be a continuous t-norm. Then the operation x =&gt;* y2 is defined as
x =&gt;* y := sup{z  |x * z &lt; y}. It is called the residuum of *.
Lemma 1. Let * be a continuous t-norm and =&gt;* its residuum. Then x* (x =&gt;* y) &lt; y holds.
</construct>
<equation confidence="0.56323875">
Proof.
x * (x =&gt;* y) = x * sup{z  |x * z &lt; y} = sup{x * z  |x * z &lt; y} &lt; y
Here we make use of the fact that the t-norm * is non-decreasing and continuous in its second
argument.
Instead of x * (x =&gt;* y) &lt; y we could also write (x =&gt;* y) E {z  |x * z &lt; y} or sup{z  |x * z &lt;
y} E {z  |x * z &lt; y}. As we see, we could have defined x =&gt;* y as max{z  |x * z &lt; y} as well.
The residuum, as it is defined here, is uniquely determined by the property
`dx, y, z E [0, 1] : z * x &lt; y if and only if z &lt; x =&gt;* y
</equation>
<bodyText confidence="0.879610666666667">
In fact, * does not even have to be continuous. The condition already holds for all left-
continuous t-norms. The logic based on all left-continuous t-norms is called monoidal t-norm
logic or short MTL (see [EG01]).
</bodyText>
<footnote confidence="0.550494">
2Instead of e.g. =&gt;* L we will just write =&gt; L.
</footnote>
<page confidence="0.993864">
6
</page>
<bodyText confidence="0.748983090909091">
2.2. T-Norms 2. T-Norm Based Fuzzy Logics
There are several reasons suggesting to use the residuum as the truth function for impli-
cation:
• The residuum x =&gt;* y is non-increasing in x and non-decreasing in y. This means that
the implication gets less true as we make the antecedent x more true. Vice versa, the
implication gets more true as we make the succedent more true.
• Knowing the truth values x and x =&gt;* y one can compute the truth value y (a lower
bound of y, respectively) using the term x * (x =&gt;* y). Moreover, if x &gt; y we can
show that x * (x =&gt;* y) = y. This follows from the last step of the proof of the lemma
together with the consideration that fx(y) := x * y is continuous (x * 1 = fx(1) = x and
x * 0 = fx(0) = 0, thus there must exist a z such that fx(z) = x * z = y):
</bodyText>
<equation confidence="0.479376">
x * (x =&gt;* y) = sup{x * z  |x * z &lt; y} = y
This can be regarded as a fuzzy version of the modus ponens inference rule.
</equation>
<listItem confidence="0.7204295">
• In analogy to classical logic, where we can conclude everything from a false antecedent
(quodlibet ex falso), x =&gt;* y evaluates to 1 if x is smaller than y.
</listItem>
<bodyText confidence="0.976805333333333">
So, the expression x * (x =&gt;* y) evaluates to y if y &lt; x and to x if x &lt; y; thus, it gives us
the minimum of x and y. Similarly, it is possible to express the maximum in terms of * and
=&gt;* using the following lemma:
</bodyText>
<construct confidence="0.8362815">
Lemma 2. For each continuous t-norm * and its residuum =&gt;* the following two equalities
hold:
</construct>
<equation confidence="0.979569666666667">
(i) min(x, y) = x * (x =&gt;* y)
(ii) max(x, y) = min((x =&gt;* y) =&gt;* y, (y =&gt;* x) =&gt;* x)
Proof. (i) we have just seen.
</equation>
<bodyText confidence="0.90800125">
(ii): Let x &lt; y. Then x =&gt;* y = 1 and (x =&gt;* y) =&gt;* y = 1 =&gt;* y = y. On the other hand,
we know y * (y =&gt;* x) &lt; x and using the definition of the residuum we can conclude that
y &lt; (y =&gt;* x) =&gt;* x. Thus, min(((x =&gt;* y) =&gt;* y), ((y =&gt;* x) =&gt;* x)) = y; the case y &lt; x is
symmetric.
</bodyText>
<footnote confidence="0.695294333333333">
For the three t-norms mentioned above it is possible to compute their residua directly:3
Note that, although we only use continuous t-norms, their residua do not need to be contin-
3The residuum of product conjunction is also often called Goguen implication in literature.
</footnote>
<page confidence="0.997438">
7
</page>
<figure confidence="0.834605785714286">
2.2. T-Norms 2. T-Norm Based Fuzzy Logics
uous. In fact, it is possible to show that the residuum =&gt; L of Lukasiewicz Logic is the only
continuous one.
t-norm residuum
Lukasiewicz x * y = max(0, x + y − 1)
x =&gt; L y = min(1, 1 − x + y)
x * y = min(x, y)
~1 if x &lt; y
y otherwi
x =&gt;G y = se
Gödel
Product x * y = x • y ~ 1 if x &lt; y
x =&gt;Π y =
y/x otherwise
</figure>
<tableCaption confidence="0.963732">
Table 2.1: T-Norms and Their Residua
</tableCaption>
<bodyText confidence="0.946843333333333">
Given a continuous t-norm and its residuum we are now ready to define a propositional
logic. To denote atomic propositions we use lower letters a, b, ..., for arbitrary propositions
we use the upper letters A, B, ....
</bodyText>
<construct confidence="0.66918875">
Definition 3. Let * be a continuous t-norm and =&gt;* its residuum. We define a logic L* based
on a language with binary connectives --&gt;, &amp; and constant L. A valuation or interpretation
for L* is a function v assigning to each propositional variable a truth value from the real unit
interval [0, 1], uniquely extended to v* for formulas by:
</construct>
<equation confidence="0.8147795">
v*(A&amp;B) = v*(A) * v*(B) v*(A --&gt; B) = v(A) =&gt;* v(B) v*(L) = 0
Furthermore, based on these three ones we define the following connectives:
—A := A --&gt; L
A A B := A&amp;(A --&gt; B)
</equation>
<bodyText confidence="0.8266131">
A V B := ((A --&gt; B) --&gt; B) A ((B --&gt; A) --&gt; A)
Definition 4. Let * be a continuous t-norm. Then two formulas A and B are equivalent in
L*, denoted A - B, if and only if for all valuations v, the equality v*(A) = v*(B) holds.
To distinguish between &amp; and A, which represent different forms of conjunction, we call
&amp; strong conjunction and A min-conjunction. Note that, by Lemma 2 min-conjunction and
disjunction just select the minimum, respectively the maximum, of the truth values of its
two arguments.
We call the logics L* L, L*G and L*Π, Lukasiewicz Logic L, Gödel Logic G and Product
Logic Π, respectively.
Finally, the notion of a valid formula is defined as expected:
</bodyText>
<page confidence="0.990177">
8
</page>
<construct confidence="0.759067666666667">
2.3. Lukasiewicz Logic 2. T-Norm Based Fuzzy Logics
Definition 5. Let L* be the logic based on the t-norm ∗. A formula A is valid in L*, written
�=L* A, iff v*(A) = 1 for all valuations v for L*.
</construct>
<subsectionHeader confidence="0.997085">
2.3 Lukasiewicz Logic
</subsectionHeader>
<bodyText confidence="0.977191">
Lukasiewicz Logic L is the fuzzy logic based on the Lukasiewicz t-norm x ∗ L y = max(0, x +
y − 1). In the 1920s Jan Lukasiewicz introduced a family of many-valued logics [Luk20]. L
is the infinite-valued member of this family.
</bodyText>
<figure confidence="0.999114210526316">
1
0.8
00 0.2
0.6
0.4
0.4
0.6 0.8
y
x
0.2
0
1
x*y
1
0.8
0.6
0.4
0.2
1
0.8
00 0.2
0.4
0.4
0.6 0.8
0.6
y
x
0.2
1
0
x =&gt;* y
1
0.8
0.6
0.4
0.2
(a) The Lukasiewicz T-Norm (b) Residuum of the Lukasiewicz T-
Norm
</figure>
<figureCaption confidence="0.993329">
Figure 2.1: Lukasiewicz T-Norm
</figureCaption>
<construct confidence="0.54046975">
Theorem 1. Lukasiewicz Logic L is the only logic based on a continuous t-norm where ⇒*
is continuous.
For a proof of Theorem 1 we refer to [FK06].
Another property of L is that all connectives are definable by the implication → and the
constant ⊥. Since the connectives V, A, and , are derived from →, &amp; and ⊥ in Definition
3, the only relevant connective here is &amp;:
Lemma 3. Strong conjunction &amp; can be defined as
A&amp;B := ,(A → ,B).
</construct>
<footnote confidence="0.932134666666667">
Proof. According to Definition 3 the valuation of the formulas ,(A → ,B) is calculated as
1 − (vL(A) ⇒L (1 − vL(B))). We see that vL(,(A → ,B)) equals 0 if vL(A) + vL(B) &lt; 1 holds
and equals vL(A) + vL(B) − 1 otherwise which is equivalent to ∗ L.
</footnote>
<page confidence="0.974869">
9
</page>
<subsectionHeader confidence="0.319418">
2.4. Gödel Logic 2. T-Norm Based Fuzzy Logics
</subsectionHeader>
<bodyText confidence="0.746102">
Moreover, the maximum of two truth values can be expressed as follows:
</bodyText>
<equation confidence="0.576735571428571">
max(x, y) = ((x =&gt;L y) =&gt;L y)
yielding a simpler definition for V, namely A V B := ((A --&gt; B) --&gt; B).
Lukasiewicz also gave an axiomatic characterization of L:
( L1) A --&gt; (B --&gt; A)
( L2) (A --&gt; B) --&gt; ((B --&gt; C) --&gt; (A --&gt; C))
( L3) (,A --&gt; ,B) --&gt; (B --&gt; A)
( L4) ((A --&gt; B) --&gt; B) --&gt; ((B --&gt; A) --&gt; A)
</equation>
<bodyText confidence="0.627169666666667">
A formula A is derivable from this four axioms by modus ponens if and only if |= L A holds,
i.e. if and only if vL(A) = 1 for all valuations v for L. A proof of this is presented in [HGE95].
Note that negation is involutive in L, i.e. , =6 A - A holds for all formulas A.
</bodyText>
<subsectionHeader confidence="0.995405">
2.4 Gödel Logic
</subsectionHeader>
<bodyText confidence="0.9026174">
Gödel Logic G is based on the t-norm x *G y = min(x, y). Thus, the same truth value is
assigned to both formulas A and A&amp;A. Moreover, the connectives A and &amp; coincide. Kurt
Gödel defined a family of finite-valued logics in [Göd32]. G was introduced 1959 by Dummet
[Dum59] as the infinite-valued version of these logics.
Note that G does not enjoy double negation. Instead, it is easy to see that
</bodyText>
<equation confidence="0.726237666666667">
vG(,A) = ⎧ 1 if vG(A) = 0
⎨ 0 otherwise
⎩
</equation>
<bodyText confidence="0.932758666666667">
As for Lukasiewicz Logic, there exist also axiomatizations for Gödel Logic. One of partic-
ular interest is obtained when taking an axiomatization of Intuitionistic Logic and adding
the following axiom:
</bodyText>
<equation confidence="0.427195">
((A --&gt; B) --&gt; C) --&gt; (((B --&gt; A) --&gt; C) --&gt; C)
</equation>
<footnote confidence="0.911089666666667">
(For a proof that this axiomatization is indeed adequate for G we refer to [Hä02].) Therefore,
G is often called an intermediary logic between Intuitionistic Logic and Classical Logic or,
sometimes as well, “Intuitionistic Fuzzy Logic”.
</footnote>
<page confidence="0.988603">
10
</page>
<figure confidence="0.998564512820513">
2.5. Product Logic 2. T-Norm Based Fuzzy Logics
(a) The Gödel T-Norm
(b) Residuum of the Gödel T-Norm
1
0.8
00 0.2
0.6
0.4
0.4
0.6 0.8
y
x
0.2
0
1
x * y
1
0.8
0.6
0.4
0.2
1
0.8
00 0.2
0.4
0.4
0.6 0.8
0.6
y
x
0.2
1
0
x =&gt;* y
1
0.8
0.6
0.4
0.2
</figure>
<figureCaption confidence="0.994026">
Figure 2.2: Gödel T-Norm
</figureCaption>
<subsectionHeader confidence="0.980082">
2.5 Product Logic
</subsectionHeader>
<bodyText confidence="0.966555">
Product Logic Π is based on the product t-norm x *Π y = x y. It was introduced in 1996
[HGE96]. The residuum, x =&gt;Π y = 1 for x &lt; y and x =&gt;Π y = y/x otherwise, however was
already defined by Goguen in 1969 [Gog69].
The truth function for negation is exactly the same one as for Gödel Logic.
</bodyText>
<figure confidence="0.997285846153846">
x*y
,
0.8
0.6
0.4
0.2
0.4
x
0.6 0.8
,
0.8
0.6
y
00
0.2
0.4
0.2
,
0
0.2
0.4
x =&gt;* y
1
0.8
0.6
0.4
0.2
x
0.6 0.8
1
0.8
0.6
y
00
0.4
0.2
1
0
(a) The Product T-Norm (b) Residuum of the Product T-Norm
</figure>
<figureCaption confidence="0.998519">
Figure 2.3: Product T-Norm
</figureCaption>
<bodyText confidence="0.98223925">
Note that the �Π is not continuous at the point x = 0, y = 0: There the residuum 0 �Π 0
is 1, but the limit limt→0(t �Π 0) is 0.
As well as for L and G it is possible to give axiomatizations for Π, see [Hä02] as an
example.
</bodyText>
<page confidence="0.995717">
11
</page>
<subsectionHeader confidence="0.8908425">
2.6. A Uniform Hypersequent System 2. T-Norm Based Fuzzy Logics
2.6 A Uniform Hypersequent System
</subsectionHeader>
<bodyText confidence="0.999121291666667">
In this section we present a uniform and analytic proof system for L, G, and Π following A.
Ciabattoni, C.G. Fermüller and G. Metcalfe in [CFM04]; we will refer to it as rH. This proof
system is based on so-called relational hypersequents or, short, r-hypersequents and features
uniform logical rules for L, G, and Π which are invertible. In spite of the existence of several
other calculi for fuzzy logics, this one is of special interest concerning dialogue games. We
will see later in Chapter 3 that there is a close correspondence between the game rules of
Giles’s Game and the logical rules of rH.
Ordinary sequent systems feature rules with the premises as well as the conclusion being
a sequent, that is, two (possibly empty) multisets of formulas divided by Gentzen’s sequent
arrow h, [Gen69].
Hypersequent systems can be seen as an extension to sequent systems where the premises
and conclusions do not consist of sequents but of finite sets of sequents. There are calculi
for many fuzzy logics presented in a framework of hypersequent systems, see, as an example
[MOG05], [Avr91], and [MOG04] for hypersequent calculi for L, G, and Π.
On the other hand, relational sequents can be seen as a variant of ordinary Gentzen
sequents where Gentzen’s sequent arrow h is replaced by other symbols. A relational sequent
then may contain one of these symbols instead of the sequent arrow h. In [BF99] such
sequents are used in a calculus for G which has, in contrast to the respective hypersequent
calculus, invertible rules. In the case of rH, we have two types of sequents where in one
Gentzen’s sequent arrow is replaced by &lt; and in the other by &lt;. When make a statement
about relational sequents where that symbol is not important, we will use the variable &lt; to
denote either &lt; or &lt; consistently for the whole statement.
Relational hypersequents are the combination of these two concepts. For rH they are
formally defined as follows:
</bodyText>
<equation confidence="0.7764105">
Definition 6. A relational hypersequent (r-hypersequent) is a finite multiset of the form:
G = Γ1 &lt;1 Δ1  |...  |Γn &lt;n Δn
</equation>
<bodyText confidence="0.780589333333333">
where &lt;i ∈ {&lt;, &lt;} and Γi and Δi are finite multisets of formulas for i = 1, ... , n. The
r-hypersequent G is called atomic if all formulas in G are atomic.
Next we define which r-hypersequents are regarded to be valid:
</bodyText>
<page confidence="0.991422">
12
</page>
<construct confidence="0.606114">
2.6. A Uniform Hypersequent System 2. T-Norm Based Fuzzy Logics
Definition 7. An r-hypersequent G = Γ1 &lt;1 Δ1 |... |Γn &lt;n Δn is valid for L c { L, G, Π},
written |=L G, iff for all valuations v for L,
</construct>
<bodyText confidence="0.9210925">
#vLΓi &lt;i #vLΔi for some i, 1 &lt; i &lt; n,
where #vL0 = 1 for L c { L, G, Π} and
</bodyText>
<equation confidence="0.8077705">
L Y {v(A)}
#vL(Γ) = 1 + {v(A) − 1} #vG(Γ) = 1 + min {v(A)} #v Π(Γ ) = 1 +
A∈Γ A∈Γ
A∈Γ
</equation>
<bodyText confidence="0.983203333333333">
Note that using this definition, for any formula A the hypersequent &lt; A is valid iff A is
valid in the respective logic. Also note that the symbols &lt; and &lt; are used both semantically
as relations and syntactically as symbols in sequents.
Since an r-hypersequent is valid if one relational sequent occurring in it is valid (viewed
as an r-hypersequent with one element), an r-hypersequent can be regarded as a disjunction
of sequents at the meta-level.
The logical rules of rH to decompose non-atomic r-hypersequents are defined as follows:
(G and H are used as metavariables to denote possibly empty r-hypersequents; Γ, A is short
for Γ ∪· {A} and Γ, Δ for Γ ·∪Δ where ∪· is the multiset union.
</bodyText>
<equation confidence="0.9734595">
Definition 8. We define the following uniform logical rules for &lt; c {&lt;, &lt;}:
G  |Γ &lt; Δ  |Γ, B &lt; A, Δ G  |Γ &lt; Δ  |B &lt; A
(--&gt;, &lt;, l) G  |Γ, A --&gt; B &lt; Δ
G  |Γ &lt; Δ G  |Γ, A &lt; B, Δ  |A &lt; B
(--&gt;, &lt;, r) G  |Γ &lt; A --&gt; B, Δ
G  |Γ, A, B &lt; Δ G  |Γ, L &lt; Δ G  |Γ &lt; L, Δ  |Γ &lt; A, B, Δ
(&amp;, &lt;, l) (&amp;, &lt;, r) G  |Γ &lt; A&amp;B, Δ
G  |Γ, A&amp;B &lt; Δ
</equation>
<bodyText confidence="0.9983255">
As an example the rule (&amp;, &lt;, l) can be read as: “If both r-hypersequents G  |Γ, A, B &lt; Δ
and G  |Γ, L &lt; Δ are derivable, then the r-hypersequent G  |Γ, A&amp;B &lt; Δ is derivable as well.”
</bodyText>
<subsubsectionHeader confidence="0.452851">
Theorem 2. Soundness and Completeness of rH:
</subsubsectionHeader>
<listItem confidence="0.98332675">
• Soundness: If an r-hypersequent G is derivable in rH from atomic r-hypersequents
valid in L, G, or Π, then G is valid in L, G, or Π respectively.
• Completeness: If an r-hypersequent is valid in L, G, or Π then G is derivable in rH
from atomic r-hypersequents valid in L, G, or Π respectively.
</listItem>
<page confidence="0.971132">
13
</page>
<subsectionHeader confidence="0.832938">
2.6. A Uniform Hypersequent System 2. T-Norm Based Fuzzy Logics
</subsectionHeader>
<bodyText confidence="0.6543632">
For a proof of Theorem 2 we refer to [CFM04]. Note that by Theorem 2 a formula A is
valid in L, G, or Π if and only if “&lt; A” is derivable in rH. From Theorem 2 it is easy to
prove the following:
Theorem 3. The rules of rH are invertible: E.g. if the r-hypersequent G 1 Γ, A&amp;B &lt; Δ is
valid, then both r-hypersequents G 1 Γ, A, B &lt; Δ and G 1 Γ, L &lt; Δ are valid as well.
Another property of rH which is easy to observe is its analyticity: Every formula occuring
in a premise also occurs in the conclusion. This implies that in a derivation of A only
subformulas of A occur.
Uniform rules for A and V are derivable using Definition 3 but we can also give more
streamlined versions:
</bodyText>
<equation confidence="0.9988706">
G 1 Γ, A &lt; Δ 1 Γ, B &lt; Δ G 1 Γ &lt; A, Δ G 1 Γ &lt; B, Δ
(A, &lt;, l) G 1 Γ, A A B &lt; Δ (A, &lt;, r) G 1 Γ &lt; A A B, Δ
G 1 Γ, A &lt; Δ G 1 Γ, B &lt; Δ G 1 Γ &lt; A, Δ 1 Γ &lt; B, Δ
(V, &lt;, l) (V, &lt;, r) G 1 Γ, A V B &lt; Δ
G 1 Γ &lt; A V B, Δ
</equation>
<bodyText confidence="0.980599285714286">
Obviously, repeatedly applying the uniform logical rules upwards to an r-hypersequent
terminates with atomic r-hypersequents. Such a derivation can be seen as a tree with the
starting r-hypersequent as root and atomic r-hypersequents as leaves. In order to decide if
the r-hypersequent in the root of such a tree is valid, we have to decide this property for each
leaf. Because of the soundness property of rH, if all of them are valid, then we can conclude
that the r-hypersequent in the root is valid as well. As an example Figure 2.4 shows a proof
tree starting with the r-hypersequent &lt; (a O (a --&gt; b)) --&gt; b.
</bodyText>
<figure confidence="0.901285538461538">
(Atomic)
a &lt; b 1 a, b &lt; a, b
(Atomic)
a &lt; b 1 b &lt; a
(Atomic)
L&lt; b (&amp;, 6, l)
(—, &lt;, l)
(Atomic)
&lt;
(—, r)
&lt; (a&amp;(a --&gt; b)) --&gt; b
a&amp;(a --&gt; b) &lt; b
a, a --&gt; b &lt; b
</figure>
<figureCaption confidence="0.992973">
Figure 2.4: Sample proof for a&amp;(a --&gt; b)
</figureCaption>
<bodyText confidence="0.851448333333333">
In [CFM04] it is shown that checking an atomic r-hypersequent for validity is polynomial.
For Lukasiewicz Logic, for example, this can be done efficiently using linear programming.
Checking the validity of an arbitrary r-hypersequent is not polynomial, of course. Moreover,
</bodyText>
<page confidence="0.99574">
14
</page>
<subsectionHeader confidence="0.92483">
2.6. A Uniform Hypersequent System 2. T-Norm Based Fuzzy Logics
</subsectionHeader>
<bodyText confidence="0.999716222222222">
when applying the given rules upwards, the size of the r-hypersequents may grow exponen-
tially. To overcome this problem it is possible to define new rules at the cost of introducing
new propositional variables at each step.
For the definition of these rules, as well as purely syntactic calculi for L,G, and Π together
with proofs of soundness and completeness of these calculi (including the calculus defined
here) we refer to [CFM04].
If we are only interested in Lukasiewicz Logic we can simplify the rules of rH for decom-
posing implications without affecting the soundness and the completeness of the calculus.
In this case we can use the following two rules instead:
</bodyText>
<equation confidence="0.986433">
G 1 T&apos; &lt; Δ 1 T&apos;, B &lt; A, Δ G 1 T&apos; &lt; Δ G 1 T&apos;, A &lt; B, Δ
(→, &lt;, l) G 1 T&apos;, A → B &lt; Δ (→, &lt;, r) G 1 T&apos; &lt; A → B, Δ
</equation>
<bodyText confidence="0.565486">
Here the relation “&lt;” is not needed.
</bodyText>
<page confidence="0.977442">
15
</page>
<bodyText confidence="0.9001485">
“Half this game is 90% mental.”
Danny Ozark, manager of the Philadelphia Phillies
</bodyText>
<sectionHeader confidence="0.788813" genericHeader="method">
CHAPTER 3
</sectionHeader>
<subsectionHeader confidence="0.80746">
Giles’s Game
</subsectionHeader>
<bodyText confidence="0.99929575">
This chapter describes a way of modeling the semantics of fuzzy logics using dialogue
games combined with bets, proposed by Robin Giles in the 1970s [Gil74]. We motivate
this approach, present the game itself, and show the correspondence between the game and
Lukasiewicz Logic.
</bodyText>
<subsectionHeader confidence="0.999378">
3.1 Motivation
</subsectionHeader>
<bodyText confidence="0.993643555555555">
Robin Giles, a physicist and philosopher of science, presented his characterization of Lukasiewicz
Logic by means of dialogue games in the 1970s while striving for a logic to describe reasoning
about physical experiments.
It is assumed that a physical experiment referring to a theory admits an unlimited number
of trials. The reason for this is that a proposition in a physical theory must not predict an
event in the future at an absolute date, but predict, what will happen if certain preconditions
are satisfied.
So, an experiment consists of a number of preconditions and descriptions of what the
outcome should be; Giles calls these conditions of admissability. For example, the proposition
</bodyText>
<page confidence="0.94815">
16
</page>
<subsectionHeader confidence="0.956027">
3.1. Motivation 3. Giles’s Game
</subsectionHeader>
<bodyText confidence="0.969073">
“When there are dark1 clouds, it will rain within the next hour” might be formulated as:
</bodyText>
<listItem confidence="0.99977">
1. Look for a dark cloud. If it is not seen, the trial is inadmissable.
2. If a dark cloud is seen, wait for rain for one hour.
3. If it rains the outcome is ’yes’, otherwise it is ’no’ ”.
</listItem>
<bodyText confidence="0.99907462962963">
The point is now, that the outcome of a trial does not always need to be the same. Giles
calls such experiments dispersive and the ones which always yield the same outcome are
dispersionfree. In some cases, it is possible to make a dispersive experiment dispersion-free
or “less” dispersive by adding more conditions of admissability. In our (naive) example,
we could add the precondition that the temperature has to be above zero degrees Celsius
(because otherwise it would snow instead of rain). In some areas it is possible to use only
dispersion-free propositions, for example geometry or classical mechanics, but in other areas
this is just not possible, as in quantum mechanics. There it can occur that exactly the
same experiment yields different results on a number of trials and there are no possible
preconditions to add which would make the the experiment significantly less dispersive.
This arguably calls for a non-classical logic, as there is no way to capture this phenomenon
using classical logic directly. One way to remedy this situation is to use probabilities. For a
dispersive experiment A, one could make an assertion such as “the probability of obtaining
the outcome ’yes’ when conducting A exceeds 12”. Giles now gives two different explanations
for what is meant by such a statement: the avowed meaning and the tangible meaning.
The avowed meaning is the explanation which a physicist making an assertion would give
to someone else. For the above example this might be that the limit of the ratio of “yes”
outcomes to “no” outcomes in an infinite series of trials is larger than 1 2. For dispersive
experiments such an assertion may be unverifiable, since verifying it would require infinitely
many trials. Moreover, the probabilities two physicists assign to the very same dispersive
experiment may differ, as these assignments are based on their experience and there is no
effective way of deciding who is right.
In contrast, the tangible meaning requires a different approach; it rather consists of an
exact description of some obligation undertaken by the assertor. For example, a physicist
stating our example assertion may act as follows: If challenged by an enquirer, he will pay €
1 for every “no”-outcome of a trial of A when on the other hand he gets € 1 for every “yes”-
outcome. This sense of meaning relates better to actual communication than the avowed
</bodyText>
<footnote confidence="0.984533">
1For the sake of simplicity, let us assume that it is clear to everyone, when a cloud is dark and when it is
not.
</footnote>
<page confidence="0.98977">
17
</page>
<subsectionHeader confidence="0.924195">
3.1. Motivation 3. Giles’s Game
</subsectionHeader>
<bodyText confidence="0.99998764516129">
meaning. Note that, in order to make such an assertion, the physicist will probably think
about the success probability of his experiment as well as an enquirer will do (otherwise
they would be squandering money), but none of them claims that his probability is the true
objective probability value.
The next question is how to deal with logical connectives. For example, if there are
two assertions A and B and a physicist asserts “A and B” or “A implies B” how should a
suitable tangible meaning be derived? In the dispersion-free case the answer is easy, one
can use classical logic for this, but in the dispersive case this is not possible. Giles uses
dialogue games for that purpose: Assume that the physicist and his enquirer are engaged
in a debate following certain rules, until finally both end up only making assertions with all
connectives eliminated on which they can bet. The resulting dialogue and the betting on
the assertions together constitute the tangible meaning of the initial assertion. The game
rules for decomposing compound propositions are taken from Paul Lorenzen’s [Lor60] who
used these rules to define dialogue games for intuitionistic logic. This fact emphasizes a clear
separation between the treatment of compound propositions and the evaluation of atomic
ones.
From a logician’s point of view, there are other advantages of using dialogue games to
analyze fuzzy logics. The central point here is the fact the logic presented by Giles using
dialogue games and bets coincides with Lukasiewicz logic (as proved in [Gil74]). Using
dialogue games it is possible to define Lukasiewicz Logic not by a “volatile” axiomatic system
but by a dialogue game with commonly avowed rules which seem “reasonable”. Another
reason is to get a better insight into the meaning of logical connectives. (For example:
What is the difference between strong conjunction and min-conjunction when used in a
dialogue in “real life”?) Although Giles himself originally motivated his dialogue games by
physical theories as shown here, in later publications (e.g. [Gil82]), he explicitly speaks of a
logic to define grades of membership of fuzzy sets.
Note that there is a difference between vague propositions used in fuzzy logics and dis-
persive physical experiments used by Giles. The former is about degrees of truth whereas
the latter is about probabilities which are fundamentally different concepts. The relation
between these two established by Giles’s Game is in no way self-evident and will be subject
of a formal proof in this chapter.
</bodyText>
<page confidence="0.953101">
18
</page>
<subsectionHeader confidence="0.9656525">
3.2. Betting on Positive Results 3. Giles’s Game
3.2 Betting on Positive Results
</subsectionHeader>
<bodyText confidence="0.925382727272727">
Let us assume that there are two players, called you and me, both of us asserting a finite
multiset of atomic propositions. Each atomic proposition is assigned a (physical) experiment.
For each experiment a trial can be conducted resulting either in the outcome “yes” or “no”.
Note that experiments may be dispersive.
For denoting the experiment associated with an atomic proposition we use the following
convention:
Definition 9. Let a be an atomic proposition. Then the experiment associated with a is
denoted as EQ. Stating “The probability of EQ amounts to p” is short for “The probability
that the experiment EQ will yield the outcome ‘yes’ amounts to p”.
When evaluating the atomic propositions for each proposition a trial of the corresponding
experiment is carried out and the following rule is applied:
</bodyText>
<construct confidence="0.931066">
Rule 1. Let a be an atomic proposition. He who asserts a agrees to pay his opponent ➾ 1
if a trial of EQ yields outcome “no”.
</construct>
<bodyText confidence="0.999236909090909">
If a proposition is asserted more than once, the according trial is conducted for each
assertion separately. In consequence I can even lose money in such situations where you
assert the same propositions as I do. If, for example, we both assert the atomic proposition
a, with the probability of EQ less than 1, it is possible that “your” trial of EQ yields the
outcome “yes” and “my” trial yields the outcome “no”. Therefore I will lose € 1.In contrast,
in average you lose approximately as often as I do, so my expected loss is 0.
Another consequence is that we have to distinguish between asserting a proposition once
and more than once, which is a difference to classical logic. Note that I can lose at most €
1 for a single assertion of an atomic proposition. The dialogue rules below will ensure that
this property remains satisfied also for compound propositions. This is called the principle
of limited liability.
</bodyText>
<subsectionHeader confidence="0.999399">
3.3 Decomposing Propositions
</subsectionHeader>
<bodyText confidence="0.99981575">
Let us now introduce the connectives →, ¬, ∧, ∨. We present a dialogue game for arbitrary
propositions built up from atomic propositions using these four connectives.
Again, there are two players, you and me. In the beginning I assert only one proposition
while you assert none. During the game this initial proposition is subsequently decomposed
</bodyText>
<page confidence="0.957031">
19
</page>
<subsectionHeader confidence="0.645444">
3.3. Decomposing Propositions 3. Giles’s Game
</subsectionHeader>
<bodyText confidence="0.999497764705882">
until we both assert only atomic propositions. These can be evaluated by conducting trials
as detailed in the previous section.
The idea to use a dialogue game as well as the rules themselves refer to Paul Lorenzen’s
characterization of intuitionistic logic (see [Lor60]). These rules are intended to specify the
meaning of the connectives independently of the underlying evaluation scheme for atomic
propositions.
Lorenzen’s game uses so-called frame rules to determine which player may attack which
of the other player’s assertions at which point and when he may defend his own assertions.
In Giles’s Game this is not constrained. Any player who can move is allowed to do so
immediately. Moves do not have to alternate and a player can always attack any of the
other player’s compound assertions. The result of the game does not depend on the order
in which the several assertions are being attacked as will be shown below.
Lorenzen calls the one player who asserts the initial proposition the “proponent”, the
other player “opponent”, whereas Giles calls the players “me” and “you” with “me” being
the proponent; the latter nomenclature is used here.
In general, one of the players picks one of the other player’s compound propositions. He
can either attack it or grant it:
</bodyText>
<listItem confidence="0.994448666666667">
• Attacking: the game rules define for each connective how to attack an assertion and
how the other player can defend it. Afterwards, the attacked assertion is deleted from
the game. Thus, an assertion can only be attacked once. (If the assertion was not
deleted after being attacked, it could get attacked by the other player several times,
thus violating the principle of limited liability as mentioned in section 3.2.)
• Granting: the assertion is simply deleted from the game. A player will choose this move
</listItem>
<bodyText confidence="0.920673818181818">
if he risks to lose more money by attacking an assertion than by granting it. As we
will see, this case occurs only if the attacked compound proposition is an implication.
Giles’s Game constitutes a pragmatic foundation for logics: asserting that a proposition
is true means committing oneself to asserting also another proposition if attacked by the
opponent and ultimately an obligation to pay some money according to the betting scheme
being presented in the next section.
The following game rules are taken directly from [Gil74]. Note that their formulation is
rather informal. One has to keep in mind that each move consists of an attack and an answer
to this attack, regardless of the context in the current game. Also note that all these rules
obey to the principle of limited liability: For a game starting my assertion of a proposition,
I always have a strategy guaranteeing that my expected loss in the end does not exceed ➾ 1.
</bodyText>
<page confidence="0.763491">
20
</page>
<subsectionHeader confidence="0.514642">
3.3. Decomposing Propositions 3. Giles’s Game
Implication
</subsectionHeader>
<bodyText confidence="0.9763761">
The rule for implication given by Giles is as follows:
Rule 2. He who asserts A --&gt; B agrees to assert B if his opponent will assert A.
For atomic propositions a and b this rule can be motivated as follows: let us assume that
I assert the proposition a --&gt; b. In classical logic this means that I believe a to be false or b
to be true. Now, in the context of dispersive experiments, a does not have to be “completely
false” nor does b have to be “absolutely true”; the point is that Eb is more probable than
Ea.
If I believe Eb to be more probable than Ea then I will willingly assert b if you assert
a, because when conducting the experiments and then evaluating a --&gt; b classically, my
assertion will get true more often than it will get false.
</bodyText>
<subsectionHeader confidence="0.666844">
Negation
</subsectionHeader>
<bodyText confidence="0.869644076923077">
Assume that I assert an atomic proposition of the form ,a. I would do so, if I believed the
probability of a to be rather small. The according dialogue rule should reflect that I am the
better off the smaller the probability of a is. To achieve this, the idea is now to let you state
a and I, in exchange, state something which is absolutely false.
First, let us introduce the atomic proposition L and the corresponding experiment E1
with probability zero:
Definition 10. Let E1 be an experiment which always evaluates to “no”.
Using L, the according rule looks as follows (generalized from atomic experiments to
arbitrary ones):
Rule 3. He who asserts ,A agrees to assert L if his opponent will assert A.
Note that this amounts to an instance of the Implication Rule 2, where ,A is an abbre-
viation for A --&gt; L. In this case, the opponent can safely attack the implication because by
asserting A he is surely better off than the proponent who has to assert L.
</bodyText>
<sectionHeader confidence="0.628475" genericHeader="method">
Disjunction
</sectionHeader>
<bodyText confidence="0.950875">
For disjunction Giles gives the following rather natural rule:
Rule 4. He who asserts A ∨ B commits himself to assert either A or B at his own choice.
</bodyText>
<page confidence="0.951564">
21
</page>
<subsectionHeader confidence="0.645959">
3.3. Decomposing Propositions 3. Giles’s Game
</subsectionHeader>
<bodyText confidence="0.9989352">
Note that this rule, in the strict sense, does not really include an attack, but merely
consists of a defense. The reason is that an opponent acting rationally will not grant such an
assertion, because an attack implies no disadvantages for him. As mentioned above, it does
not matter at which point of the game an assertion is being attacked. It suffices to require
that the assertion is defended at some point as indicated.
</bodyText>
<subsectionHeader confidence="0.660215">
Conjunction
</subsectionHeader>
<bodyText confidence="0.981987285714286">
Finally, the rule for conjunction is:
Rule 5. He who asserts A ∧ B commits himself to assert either A or B at his opponent’s
choice.
Note that a natural alternative is to stipulate that asserting a conjunction obliges one
to assert both conjuncts. However, this requires to allow for admitting falsity in order to
maintain the principle of limited liability. Giles motivated this rule in [Gil82] from another
perspective.
</bodyText>
<subsectionHeader confidence="0.5915">
An example dialogue
</subsectionHeader>
<bodyText confidence="0.9963401875">
As an example let me assert the proposition (a ∧ b) → (¬b ∨ a) and let you be the opponent
playing against me. The multiset of assertions made by a player at some point in the game
is called the player’s tenet. Thus, at the start of the game, my tenet consists in the assertion
(a ∧ b) → (¬b ∨ a) and yours is empty. Both tenets together make up the game state. We
denote these using the notation “[ your tenet  |my tenet ]”. In this case the initial game
state is [ |(a ∧ b) → (¬b ∨ a)]. A game state is called atomic or final if all assertions are
atomic. When an atomic game state is reached, the dialogue ends and the evaluation of the
atomic assertions begins.
At the beginning there is only one compound assertion with implication as its outmost
connective. You now have the choice to admit it (in this case we would end up in the state
[|]) or to attack it. Let us assume, you do the latter. According to the rule, you must assert
the premise a ∧ b, and I must assert the conclusion ¬b ∨ a in reply. We arrive at the game
state [a ∧ b  |¬b ∨ a].
Now I could either challenge your assertion or I could defend mine. Assume I do the
former by requiring you to assert a (I could as well have chosen b); the resulting game state
is [a  |¬b ∨ a].
</bodyText>
<page confidence="0.920107">
22
</page>
<figure confidence="0.480621">
3.3. Decomposing Propositions 3. Giles’s Game
</figure>
<figureCaption confidence="0.97042">
Figure 3.1: Game Tree for the Game Starting With (a A b) --&gt; (,b V a)
</figureCaption>
<bodyText confidence="0.99691275">
Next I have to defend my assertion, since there is no other compound assertion in the
game; let me choose ,b. We get to the state [a 1 ,b].
Finally, you can choose whether to attack ,b. Since you are in any case better off by
attacking it (not attacking would result in [a 1]) let us assume, you do so. Finally we have
reached an atomic state, namely [a, b 1 1].
When evaluating this final game state we get as a result that I win the game if the sum
of the probabilities of of Ea and Eb is not smaller than 1.
As this is just one example dialogue other choices of you and me might result in other
atomic states.
Note the correspondence between the dialogue game rules given here and the rules of the
hypersequent calculus rH presented in Section 2.6. For example, the rules for an implication
are: 2
</bodyText>
<equation confidence="0.7958125">
G 1 Γ &lt; Δ 1 Γ, B &lt; A, Δ G 1 Γ &lt; Δ G 1 Γ, A &lt; B, Δ
(--&gt;, l) G 1 Γ, A --&gt; B &lt; Δ (--&gt;, r) G 1 Γ &lt; A --&gt; B, Δ
</equation>
<bodyText confidence="0.885846">
When interpreting the symbol “1” as a disjunction at the meta-level, one can read these
</bodyText>
<footnote confidence="0.678492">
2As mentioned in Section 2.6 the &lt; symbol is not necessary for Lukasiewicz Logic.
</footnote>
<figure confidence="0.973338321428571">
You attack by asserting b
I defend by asserting 0
You grant (b-&gt;0)
You grant (b-&gt;0)
You attack by asserting b
I defend by asserting 0
[  |((a/\b)-&gt;((b-&gt;0)\/a))]
You attack by asserting (a/\b)
I defend by asserting ((b-&gt;0)\/a)
You grant ((a/\b)-&gt;((b-&gt;0)\/a))
[  |]
[(a/\b)  |((b-&gt;0)\/a)]
I choose b
[a  |((b-&gt;0)\/a)]
[b  |((b-&gt;0)\/a)]
I choose a
[a  |(b-&gt;0)]
[a  |a]
[b  |(b-&gt;0)]
[b  |a]
[a  |]
[b,a  |0]
[b  |]
[b,b  |0]
I choose a
I choose (b-&gt;0)
I choose a
I choose (b-&gt;0)
</figure>
<page confidence="0.941413">
23
</page>
<subsectionHeader confidence="0.991391">
3.4. Analyzing Giles’s Game 3. Giles’s Game
</subsectionHeader>
<bodyText confidence="0.999804">
rules directly as game rules:
For (--&gt;, l), in the case where you assert an implication A --&gt; B, I have the following choice
(with T&apos;, A --&gt; B and Δ representing our tenets): Either I grant your implication (T&apos; &lt; Δ), or I
attack it. In the latter case I assert the premisse A while you have to assert the conclusion
B which is expressed by T&apos;, B &lt; A, Δ.
For (--&gt;, r), in the case where I assert an implication A --&gt; B it is up to you which game
state we reach next: you can grant my assertion (T&apos; &lt; Δ) or you can attack it (T&apos;, A &lt; B, Δ).
Thus, in order to have a winning strategy I must have a winning strategy for both your
choices.
</bodyText>
<subsectionHeader confidence="0.999634">
3.4 Analyzing Giles’s Game
</subsectionHeader>
<bodyText confidence="0.9993402">
Having defined the rules for Giles’s Game, we now take a look at which formulas can be
decided to be “subjectively true” by means of the game and which properties the resulting
logic has got. We see that the game based characterization yields a language semantically
richer than classical logic. Furthermore, we will see that this logic coincides with Lukasiewicz
Logic.
</bodyText>
<construct confidence="0.982559">
Definition 11. A proposition is called subjectively true (for me) if I will willingly assert it
and subjectively false if I will willingly assert its negation. I willingly assert any proposition
if I have a strategy such that in each final state I do not expect any loss.
</construct>
<bodyText confidence="0.991005">
Consider the following three propositions (a, b and c stand for arbitrary atomic proposi-
tions for which an experiment can be carried out):
</bodyText>
<listItem confidence="0.998776666666667">
(a) (a A b) --&gt; c
(b) a --&gt; (b --&gt; c)
(c) c V ,(a A b)
</listItem>
<bodyText confidence="0.999423">
These propositions are pairwise classically equivalent: they are all classically true if a is false
or b is false or c is true, and are false otherwise. But, when using Giles’s Game there is a
semantic difference between these three propositions.
Let us consider the first one, “(aAb) --&gt; c”; the according initial game state is [1 (a A b) --&gt; c].
You can attack my implication, reaching the state [a A b 1 c], now I can choose between a
and b and the game will end up in either [a 1 c] or [b 1 c] (at my choice). So I will assert
</bodyText>
<page confidence="0.924762">
24
</page>
<subsectionHeader confidence="0.942125">
3.4. Analyzing Giles s Game 3. Giles s Game
</subsectionHeader>
<bodyText confidence="0.999792666666667">
this proposition, if and only if, for me, at least one of the elementary game states [a 1 c] and
[b 1 c] is desirable.
The game for the second proposition starts with [1 a --&gt; (b --&gt; c)], you can attack by as-
serting a reaching the state [a 1 b --&gt; c] and you can attack again reaching the final state
[a, b 1 c]. Again, as for the previous proposition, I will engage in the game if [a 1 c] or [b 1 c] is
acceptable for me, because then [a, b 1 c] surely is as well. But, in contrast, I will also engage
in the game in other cases. If, for example, I assign a probability value of 0.3 to Ea and Eb, I
expect to get €1.4 from you at average, but on the other hand I could never lose more than
€1, no matter what the probability of E, was. So, if it was 0.1, neither the final state [a 1 c]
nor [b 1 c] would be acceptable, but [a, b 1 c] would. Thus the proposition a --&gt; (b --&gt; c)l is
“more general” than the first one.
Finally, if I assert the third proposition, i.e. [1 c V ,(a A b)], I can can choose, according
to the or-Rule between [1 c] and [1 ,(a A b)] as successor states. If I choose the latter, you
can safely attack reaching [a A b 1 1] and at last I can choose between the two final states
[a 1 1] and [b 1 1]. So, I will assert the proposition if I find at least one of the three final
game states [1 c], [a 1 1] and [b 1 1] acceptable. This will only be the case if I believe E,
always to return the outcome “yes”, or Ea or Eb always to return the outcome “no”. If I
do so, I will also assert the other two propositions, but the other way round this is not the
case. Thus the third proposition is “less general” than the two others.
Another difference to classical logic arises when we take a look at classical tautologies.
A tautology or logical identity is usually defined as a proposition which is true under any
valuation and we can do the same in the context of Giles’s Game. Following Giles we assume
that I, the proponent of the initial proposition, am always capable of assigning probability
values to all experiments associated with atomic propositions.
</bodyText>
<construct confidence="0.6998095">
Definition 12. A (compound) proposition which I would willingly assert, regardless of the
probabilities assigned to its atomic parts is called a logical identity.
</construct>
<bodyText confidence="0.99425225">
In contrast to classical logic this definition would be ambiguous without the assumption
that I can assign probability values to all atomic propositions. Take as an example the
following two propositions (a and b being atomic propositions). Both are classical logical
identities:
</bodyText>
<listItem confidence="0.9035735">
(a) (a --&gt; b) --&gt; a
(b) (a --&gt; b) V (b --&gt; a)
</listItem>
<page confidence="0.983366">
25
</page>
<subsectionHeader confidence="0.939057">
3.4. Analyzing Giles s Game 3. Giles s Game
</subsectionHeader>
<bodyText confidence="0.9981566">
For proposition (a) the game starts at [1 a --&gt; (b --&gt; a)]; if you attack the implication, we
reach [a 1 b --&gt; a]. If you attack my assertion of b --&gt; a again we end up in [a, b 1 a] . Now
regardless of the probability of Ea, our losses from asserting a will cancel in the long run
and depending on the results of Eb I may gain some money, but I will surely not lose any.
If you choose not to challenge both of the implications but to admit one of them, we end up
in the game states [1], respectively [a 1]. In both these final states I will not lose any money
in the long run either.
Apparently, for example (a) it does not matter which probabilities I assign to the atomic
propositions. But for (b) the game starts in [1 (a --&gt; b) V (b --&gt; a)]. It is my choice which
disjunct to choose:
</bodyText>
<listItem confidence="0.9884453">
• If I believe Eb to be more probable than Ea, I will defend the left disjunct reaching
[1 a --&gt; b]. If you attack at this point, we will end up in [a 1 b]. Alternatively, if you
admit the implication, we will get to [1]. In both cases, when repeating the evaluation
of the final game state reached, I do not expect to lose any money in the long run.
• On the other hand, if I believe Ea to be more probable than Eb, I will defend the right
disjunct reaching [1 b --&gt; a] and ending up in either [b 1 a] or in [1]. Again, in both cases
I do not expect to lose any money in the long run.
• If I believe a to be exactly as probable as b, it does not matter which part I choose
as in every final state reachable I would neither lose (nor win) any money in the long
run.
</listItem>
<bodyText confidence="0.99995">
We see that proposition (b) is subjectively true (for me) for every possible assignment
of probabilities to the experiments Ea and Eb, but unlike proposition (a) I must have this
knowledge in order to find an optimal strategy for me.
</bodyText>
<subsectionHeader confidence="0.96688">
3.4.1 Risk Values and Valuations
</subsectionHeader>
<bodyText confidence="0.999841285714286">
Giles’s Game can be interpreted as zero sum game with perfect information in terms of game
theory:
We stipulate that I am able to assign subjective probability values to all experiments
associated with atomic propositions. If I want to analyze the game regardless of your strategy,
then I can assume that you play according to the same subjective probability values as I do.
Then your decisions, you playing rationally, will be in fact the “worst case” for me at the
same time. This way we are able to use insights from game theory about zero sum games
</bodyText>
<page confidence="0.809195">
26
</page>
<subsectionHeader confidence="0.988006">
3.4. Analyzing Giles’s Game 3. Giles’s Game
</subsectionHeader>
<bodyText confidence="0.997306272727273">
with perfect information during our analysis of Giles’s Game such as the existence of optimal
strategies.
As motivated by the last example as well as for further analyzing the game, we now
assume, that I can assign a probability value π(Ea) to each atomic proposition. A language
where this is possible is called probability definite (as opposed to truth definite from classical
logic). At the first glance this seems to contradict the motivation of Giles’s Game that
calls for “tangible meanings” instead of “avowed meanings” which are employed when using
probabilities classically. To overcome this, Giles gives a definition of subjective probabilities
that provides a tangible meaning for them:
Definition 13. Let a be an atomic proposition. Then the subjective probability of a, denoted
π(Ea), with respect to a player P is the real value such that for any e &gt; 0, he is willing:
</bodyText>
<listItem confidence="0.858845">
(a) to assert a in return for a payment of €(1 − π(Ea) + e) and
(b) to assert ¬a in return for a payment of €(π(Ea) + e).
</listItem>
<bodyText confidence="0.950832846153846">
For example, if I assign the probability 0.2 to the experiment Ea, I expect to lose €0.8 in
average when asserting a. If I receive a payment of €(1 − 0.2 + e) &gt; €0.8 for asserting a, it
is rational for me to do so. On the other hand, asserting ¬a corresponds to the final game
state [a  |1] where I lose €0.2 in average. Again, for a payment of €(0.2 + e) I will willingly
do so.
The so-called risk values (a) of an atomic proposition a is defined as my expected loss
when asserting a.
(a) = 1 − π(Ea) and denotes my expected loss when asserting a. So, for any atomic
proposition a both 0 &lt; (a) &lt; 1 and (1) = 1 hold.
Similarly, the risk value of a tenet containing only the atomic propositions a1, ... , an is
denoted as
(a1, ... , an) L =
and the risk value of an atomic (final) game state [a1, ... , an  |b1, ... , bm] as
</bodyText>
<equation confidence="0.9915574">
Xn
i=1
(ai)
(a1,..., an  |b1,..., bm) L = Xm (bi) − Xn (ai)
i=1 i=1
</equation>
<bodyText confidence="0.998259333333333">
The aim is to determine a corresponding risk value also for compound propositions once
risk values have been assigned to all atomic propositions. To do so, we define the risk value
of an arbitrary game state as follows:
</bodyText>
<page confidence="0.919116">
27
</page>
<figure confidence="0.24152">
3.4. Analyzing Giles s Game 3. Giles s Game
❼there exists a strategy for you guaranteeing that my expected loss will never be less than
</figure>
<equation confidence="0.839514">
(Γ  |Δ) L.
</equation>
<bodyText confidence="0.959679058823529">
The existence and uniqueness of the risk value of an arbitrary game state follows from the
saddle point theorem which is a basic theorem of game theory. It basically assures that, in
a zero-sum game with perfect information, there do always exist optimal strategies for both
you and me such that a fixed game value can be assigned to the game. This game value will
always be the result of the game assuming both players play rationally according to their
optimal strategies.
In order to determine the risk value for an arbitrary game state we first decide which
move to do next and then we look at all possible successor states according to the game
rules. If at this move I have a choice to make, r is assigned the minimum of all risk values
of the successor states. But on the other hand, if you have a choice to make, I assign r the
maximum of all risk values of the successor states. This procedure corresponds to me always
making the “best” choice while assuming the “worst case” for your choices.
For an assertion made by you my expected loss can be formalized as follows:
(Γ, A --&gt; B  |Δ) L = min{(Γ  |Δ) L, (Γ, B  |A, Δ) L}
(Γ, A ∧ B  |Δ) L = min{(Γ, A  |Δ) L, (Γ, B  |Δ) L}
(Γ, A ∨ B  |Δ) L = max{(Γ, A  |Δ) L, (Γ, B  |Δ) L}
and for assertions made by me:
</bodyText>
<equation confidence="0.784014666666667">
(Γ  |A --&gt; B, Δ) L = max{(Γ, A  |B, Δ) L, (Γ  |Δ) L}
(Γ  |A ∧ B, Δ) L = max{(Γ  |A, Δ) L, (Γ  |B, Δ) L}
(Γ  |A ∨ B, Δ) L = min{(Γ  |A, Δ) L, (Γ  |B, Δ) L}
</equation>
<footnote confidence="0.723602333333333">
It is easy to see that the risk function assigning a real value to each game state is indeed
well-defined by these equations i.e. that there is a unique risk value assigned to each game
state.
</footnote>
<equation confidence="0.819853">
Definition 14. Let G = [Γ  |Δ] be an arbitrary game state. The risk value of G, denoted
(Γ  |Δ) L, is the real value such that in a game starting in G:
❼ I have a strategy guaranteeing that my expected loss will never exceed (Γ  |Δ) L and
</equation>
<page confidence="0.978716">
28
</page>
<subsectionHeader confidence="0.834632">
3.4. Analyzing Giles s Game 3. Giles s Game
</subsectionHeader>
<bodyText confidence="0.931131333333333">
Next we want to prove that this risk function for arbitrary game states corresponds to
Lukasiewicz Logic. In order to do so, we first define how to evaluate game states with respect
to Lukasiewicz Logic:
</bodyText>
<construct confidence="0.651109">
Definition 15. (a) For a proposition A and an interpretation v we define the function
(A)L := 1 − vL(A), where vL is the extension of v to arbitrary propositions as defined
in Definition 3,
</construct>
<listItem confidence="0.9881055">
(b) for a multiset Γ of propositions we define the function (Γ)L := LA∈Γ (A)L and
(c) for a game state [Γ 1 Δ] we define the function (Γ 1 Δ)L := (Γ)L − (Δ)L.
</listItem>
<bodyText confidence="0.980271666666667">
Note that these are only definitions, they are (for now) not related to the risk function for
game states given by the rules above; however, they are connected by the following theorem:
Lemma 4. Let [Γ 1 Δ] be an arbitrary game state. For each atomic proposition a let v(a) =
π(Ea), i.e. the truth value assigned to a is equal to the subjective probability assigned to
a. Then (Γ 1 Δ)L = (Γ 1 Δ) L, in other words: the functions (• 1 •)L and (• 1 •) L coincide for all
game states.
Proof. We show Lemma 4 using induction on the number of connectives occurring in all
propositions in the game state. This can be regarded as the complexity of the game state.
If there are zero connectives, there are only atomic propositions and it is easy to see that
</bodyText>
<equation confidence="0.975869">
(a1,... , an 1 b1,..., bm)L = Xm (bi) − Xn (ai) = Xm (1 − vL(bi)) − Xn (1 − vL(ai))
i=1 i=1 i=1 i=1
Xm (1 − π(Ebi)) − Xn (1 − π(Eai)) = Xm (bi) − Xn (ai) = (a1,..., an 1 b1,..., bm) L.
i=1 i=1 i=1 i=1
</equation>
<bodyText confidence="0.9970445">
Now, assume that the Lemma holds if there are at most k connectives occurring in a game
state. We have to check each of the six formulas for defining (• 1 •) L on arbitrary game states
</bodyText>
<page confidence="0.929915">
29
</page>
<subsectionHeader confidence="0.641451">
3.4. Analyzing Giles s Game 3. Giles s Game
</subsectionHeader>
<bodyText confidence="0.674615">
given above; here only two of them are spelled out, for the others it works analogously:
</bodyText>
<equation confidence="0.9793124">
(Γ, A --&gt; B  |Δ) LL
= (Δ)L − (Γ)L − (A --&gt; B)L
= (Δ)L − (Γ)L − 1 + vL(A --&gt; B)
= (Δ)L − (Γ)L − 1 + (vL(A) =&gt; L vL(B))
= (Δ)L − (Γ)L − 1 + inf{1, 1 − vL(A) + vL(B)}
= (Δ)L − (Γ)L − 1 + inf{1, 1 − 1 + (A)L + 1 − (B)L}
= inf{1 + (Δ)L − (Γ)L − 1, 1 + (A)L − (B)L + (Δ)L − (Γ)L − 1}
= inf{(Γ  |Δ)L, (Γ, B  |A, Δ)L} (*)
= inf{(Γ  |Δ) L, (Γ, B  |A, Δ) L}
=(Γ, A --&gt; B  |Δ) L.
</equation>
<bodyText confidence="0.9985675">
where at step (*) the induction step is performed: in both game states [Γ  |Δ] and [Γ, B  |A, Δ]
there occur less connectives than in [Γ, A --&gt; B  |Δ].
If the move involves an implication asserted by me, the proof works as follows (again with
the inductions step performed at *):
</bodyText>
<equation confidence="0.999024818181818">
(Γ  |A --&gt; B, Δ) LL
= (A --&gt; B)L + (Δ)L − (Γ)L
= (Δ)L − (Γ)L + 1 − vL(A --&gt; B)
= (Δ)L − (Γ)L 1 − (vL(A) =&gt; L vL(B))
= (Δ)L − (Γ)L + 1 − inf{1, 1 − vL(A) + vL(B)}
= (Δ)L − (Γ)L + 1 + sup{−1, −1 + vL(A) − vL(B)}
= (Δ)L − (Γ)L + 1 + sup{−1, −1 + 1 − (A)L − 1 + (B)L}
= sup{−1 + (Δ)L − (Γ)L + 1, −1 − (A)L + (B)L + (Δ)L − (Γ)L + 1}
= sup{(Γ  |Δ)LL, (Γ, A  |B, Δ)L} (*)
= sup{(Γ  |Δ) L, (Γ, A  |B, Δ) L}
=(Γ  |A --&gt; B, Δ) L
</equation>
<bodyText confidence="0.8392685">
and analogously for (Γ, A V B  |Δ)L, (Γ, A ∧ B  |Δ)L, (Γ  |A V B, Δ)L and (Γ  |A ∧ B, Δ)L.
For an arbitrary proposition A let us define the risk value of A (for me), denoted (A) L, by
</bodyText>
<page confidence="0.963115">
30
</page>
<table confidence="0.8310352">
3.4. Analyzing Giles s Game 3. Giles s Game
the risk value of the game state where I assert A and you assert nothing (i.e. [ |A]).
Using Lemma 4 it is finally possible to show that the inverted risk value 1 − (A)L, and the
valuation of A in Lukasiewicz Logic coincide:
Theorem 4. Let A be an arbitrary proposition and v an interpretation. Assume that for
each atomic proposition a occurring in A that π(Ea) = v(a) (as in Lemma 4). Then the
inverted risk value 1 − (A) coincides with the truth value vL(A) induced by v according to
Definition 3, i.e. 1 − (A)L, = vL(A).
Proof. Let A be an arbitrary proposition. Then:
1 − (A)L, = 1 − ( |A)L, = 1 − ( |A)L = 1 − (1 − vL(A)) = vL(A)
</table>
<subsectionHeader confidence="0.981696">
3.4.2 Stability of Results
</subsectionHeader>
<bodyText confidence="0.999442769230769">
When evaluating an atomic game state, we can not only calculate my expected loss in this
game state under a certain valuation. The variance of my loss may as well be of special
interest as there is no corresponding concept in Lukasiewicz Logic. One might, for example,
order propositions with the same truth value by the variance of my loss in the final game
state(s) reached assuming both players play rationally.
Let [a1, a2, ... , ak  |ak+1, ak+2, . . . , aT7,] be a final game state and let Xi with i = 1 ... n
be random variables with Xi = 0 if Eai yields the outcome “yes” and Xi = 1 otherwise.
Furthermore, we stipulate that my expected value of Xi, denoted E(Xi) is equal to the
subjective probability of Eai, namely π(Eai).
Then the variance Var(Xi) can be computed as Var(Xi) = E(X2i ) − (E(Xi))2 = E(Xi) −
(E(Xi))2 (since Xi E {0, 1}).
The variance of my loss in the game state [a1, a2,... , ak  |ak+1, ak+2, . . . , aT7,] is computed
as:
</bodyText>
<page confidence="0.997741">
31
</page>
<tableCaption confidence="0.329699">
3.5. Rules for Other Connectives 3. Giles’s Game
</tableCaption>
<equation confidence="0.9847854">
Var(ha1, ... , ak  |ak+1, ... , an) L = Var(
Xn Var(Xi) + Xk Var(Xi)
i=k+1 i=1
Xn (E(Xi) − (E(Xi))2)
i=1
</equation>
<bodyText confidence="0.995457142857143">
assuming that all random variables are independent from each other (i.e.: their covariance
is 0).
We see that the variance depends on the number of atomic propositions as well as on
their valuations. The function f defined by f : [0, 1] --&gt; [0, 1], x 7--&gt; x − x2 has a maximum at
x = 0.5. Therefore, the variance of an atomic game state is larger for atomic propositions
where probabilities of the corresponding experiments are near to 0.5 than for propositions
where these probabilities are near to 0 or 1.
</bodyText>
<subsectionHeader confidence="0.99287">
3.5 Devising Rules for Other Connectives
</subsectionHeader>
<bodyText confidence="0.995940875">
So far, we have defined rules for the connectives ∧, ∨ and --&gt; corresponding to min-conjunction,
max-disjunction and implication. The aim now is to show how rules for other connectives
such as strong conjunction and strong disjunction can be derived.
In order to do so, we first define, when two game states are equivalent:
Definition 16. Two final game states are called equivalent if my expected expected risk is
the same for both states for all possible valuations.
Thus, as an example, the game final states [a, b  |a] and [b |] are equivalent as my loss and
your loss from asserting a will cancel in the long run.
</bodyText>
<subsectionHeader confidence="0.972085">
Strong Conjunction
</subsectionHeader>
<bodyText confidence="0.961456">
As shown in Lemma 3 strong conjunction can be expressed using only implications by the
equivalence
</bodyText>
<sectionHeader confidence="0.54833" genericHeader="method">
A&amp;B - ¬(A --&gt; ¬B) - (A --&gt; (B --&gt; l)) --&gt; l
</sectionHeader>
<bodyText confidence="0.99664">
Thus, one way to deal with formulas containing strong conjunction in Giles’s game is to
simply expand them according to the above equivalence so that they contain only connectives
</bodyText>
<page confidence="0.975751">
32
</page>
<figure confidence="0.390592666666667">
Xn Xi − Xk Xi)
i=k+1 i=1
3.5. Rules for Other Connectives 3. Giles’s Game
the original game is defined for. But if we want to identify a game rule for &amp; there are two
other possibilities:
(a) We can derive a game rule directly using the semantics of &amp; in analogy to Lemma 4,
</figure>
<bodyText confidence="0.956659">
where this is exemplified for the connectives --&gt;, ∨, and∧.
</bodyText>
<listItem confidence="0.989329">
(b) Alternatively, we can analyze the game tree of a game starting in [ |A&amp;B]. Again we
assume that both players act rationally. This allows us to exclude some final game
states and from the remaining ones we can derive a new game rule. By Theorem 4
each formula can be assigned a definite risk value, respectively truth value, between
0 and 1. Therefore we can use this analysis for arbitrary formulas of the form A&amp;B
where A and B denote compound formulas.
</listItem>
<figureCaption confidence="0.972528">
Figure 3.2: Game Tree for a&amp;b
</figureCaption>
<bodyText confidence="0.947306">
Here we will focus on possibility (b):
Let the game start in the game state [ |(A --&gt; (B --&gt; 1)) --&gt; 1]. Figure 3.2 shows the whole
game tree illustrating which player can do which moves at any point in the game. At first,
you can attack my implication reaching the game state [A --&gt; (B --&gt; 1)  |1]. My risk value for
this game state is 1 (because of asserting 1) but you can, by the principle of limited liability,
limit your expected risk to 1 or even lower. So, you playing rationally, will not admit my
implication. (Moreover, on the game tree we see that all final states on the right branch are
</bodyText>
<figure confidence="0.8839818125">
[  |((a-&gt;(b-&gt;0))-&gt;0)]
You attack by asserting (a-&gt;(b-&gt;0))
I defend by asserting 0
You grant ((a-&gt;(b-&gt;0))-&gt;0)
[  |]
[(a-&gt;(b-&gt;0))  |0]
I attack by asserting a
You defend by asserting (b-&gt;0)
I grant (a-&gt;(b-&gt;0))
[  |0]
[(b-&gt;0)  |a,0]
I attack by asserting b
You defend by asserting 0
I grant (b-&gt;0)
[  |a,0]
[0  |b,a,0]
</figure>
<page confidence="0.965617">
33
</page>
<subsectionHeader confidence="0.295489">
3.5. Rules for Other Connectives 3. Giles’s Game
</subsectionHeader>
<bodyText confidence="0.972344625">
better for you than [1]). Now I have two choices: I can either admit your implication, reaching
the final game state [1 1] or attack it reaching [B --&gt; 1 1 A, 1]. When choosing the latter, I
can again decide whether to admit, reaching [1 A, 1], or to attack, reaching [1 1 A, B, 1], but
when playing rationally I have to do the latter move as instead of reaching [1 A, 1] I could
as well have reached [1 1] with my first decision which is better than (or at least equal to)
the other game state for me.
Now the only remaining final game states are [1 1] and [1 1 A, B, 1], which is equivalent to
[1 A, B] and as we have seen it depends on my decisions which of both ones is reached. So
we can define as a “shortcut” a rule for strong conjunction: (Note that this rule also is in
accordance with the principle of limited liability.)
Rule 6. He who asserts A&amp;B undertakes to either to assert both A and B or to assert 1 at
his own choice.
Note that this rule also gives an intuitive “meaning” to strong conjunction: When asserting
“A&amp;B” I have to assert both A and B or to admit to have asserted falsity. Using the formal
definition of strong conjunction given in chapter 2.2, this meaning was not obvious at all,
nor was the difference in the meanings of strong conjunction and min-conjunction.
</bodyText>
<equation confidence="0.94599525">
Remark. We can as well motivate this game rule in the way described in (a):
(1 A&amp;B)E, = (1 A&amp;B)° = 1 − (vL(A) * vL(B)) = 1 − max (0, vL(A) + vL(B) − 1)
= min (1, (1 − vL(A)) + (1 − vL(B))) = min (1, (1 A)° + (1 B)E,)
= min (1, (1 A)E, + (1 B)E,)
</equation>
<bodyText confidence="0.784291">
which also suggests for Rule 6.
</bodyText>
<subsectionHeader confidence="0.643079">
Strong Disjunction
</subsectionHeader>
<bodyText confidence="0.870552888888889">
The same method can be employed to find a shortcut rule for strong disjunction using the
expansion
AVB - ,A --&gt; B - (A --&gt; 1) --&gt; B
Figure 3.5 shows the corresponding game tree. We can observe that in the game state
[A --&gt; 1 1 B] I can safely attack your implication because reaching the final game state
[1 1 A, B] is in any case not worse than [1 B] (because asserting A does never mean a higher
risk for me than asserting 1 does for you). So there are only two relevant final game states,
namely [1] and [1 1 A, B], but this time it is you who chooses one of them. An according
game rule can be formulated as follows:
</bodyText>
<page confidence="0.983685">
34
</page>
<figure confidence="0.717634">
3.6. Logical Equivalences as Game Equivalencies 3. Giles’s Game
</figure>
<figureCaption confidence="0.85514">
Figure 3.3: Game Tree for aVb
Rule 7. He who asserts AVB undertakes to either to assert [1 l A, B] if challenged by his
opponent.
</figureCaption>
<bodyText confidence="0.9993615">
In the case of atomic propositions this rule states that I will succeed in the game [l aVb] (i.e.
have non negative gain) if either the experiment Ea or Eb or both yield the outcome “yes”
in the expected case. This corresponds to what is intuitively understood as conjunction.
Note that we initially could have defined only the game rule for implication (and, thus,
negation by using ,A - A --&gt; 1). Then we can expand the other connectives A and V using
Definitions 3 and 3. The analysis of the according expansions, analogously to as it is done
here for strong conjunction and disjunction in this section, then gives us exactly the same
game rules as presented originally by Giles.
</bodyText>
<subsectionHeader confidence="0.9821105">
3.6 Logical Equivalences as Game Equivalencies
Minimum
</subsectionHeader>
<bodyText confidence="0.849268166666667">
Giles’s game can be used to prove the equality of two formulas with respect to Lukasiewicz
Logic.
Lemma 2 states that “min(x, y) = x * (x =&gt;∗ y)” which corresponds to the fact that the
two formulas “a A b” and “a&amp;(a --&gt; b)” are equivalent in Lukasiewicz Logic. We can prove
this equivalence by using Giles’s game. In order to do so, we look at the two games starting
in “a A b” and in “a&amp;(a --&gt; b)”. We try to show that, given a valuation for a and b, my
</bodyText>
<figure confidence="0.967519789473684">
[  |((a-&gt;0)-&gt;b)]
You attack by asserting (a-&gt;0)
I defend by asserting b
You grant ((a-&gt;0)-&gt;b)
[  |]
[(a-&gt;0)  |b]
I attack by asserting a
You defend by asserting 0
I grant (a-&gt;0)
[  |b]
[0  |a,b]
35
3.6. Logical Equivalences as Game Equivalencies 3. Giles’s Game
expected gain is the same for both formulas (assuming both players play rationally).
[  |a]
You choose a
[  |(a/\b)]
You choose b
[  |b]
</figure>
<figureCaption confidence="0.999418">
Figure 3.4: Game Tree for a A b
</figureCaption>
<bodyText confidence="0.996632666666667">
The first game starts in the state [l a A b]. If you attack my assertion, you will choose one
of the two propositions and we end up either in the state [l a] or in the state [l b] at your
choice.
</bodyText>
<figure confidence="0.5419758">
[  |a]
You grant (a-&gt;b)
[  |(a-&gt;b),a]
I choose a, (a-&gt;b)
[  |(a&amp;(a-&gt;b))]
[a  |b,a]
You attack by asserting a
I defend by asserting b
I choose 0
[  |0]
</figure>
<figureCaption confidence="0.982972">
Figure 3.5: Game Tree for a&amp;(a --&gt; b)
</figureCaption>
<bodyText confidence="0.999696333333333">
The second game starts with [l a&amp;(a --&gt; b)]. I can either choose to admit the falsity of
my assertion ending up in [l 1] or not, resulting in the successor state [l a, a --&gt; b]. Now, if
you admit the implication asserted by me, we end up in [l a], if you do not, we end up in
[a l a, b]. This game state is equivalent to the final state [l b]. Now, since both these final
states are never worse for me than the game state [l 1], I do never have to admit the falsity
of my assertion in the first place. So the game ends either in [l a] or in a game state which is
equivalent to [l b] at your choice which is exactly the same result as for the first game and we
can conclude that the propositions “a A b” and “a&amp;(a --&gt; b)” are equivalent in Lukasiewicz
Logic.
</bodyText>
<page confidence="0.940305">
36
</page>
<figure confidence="0.873007769230769">
3.7. Remarks on Quantifiers 3. Giles’s Game
Maximum
We can also prove the second equality of Lemma 2, namely “max(x, y) = min(((x =&gt;* y) =&gt;*
y), ((y =&gt;* x) =&gt;* x))” which can be formulated as stating that the two formulas “a ∨ b” and
“(a --&gt; (b --&gt; b)) ∧ (b --&gt; (a --&gt; a))” are equivalent in Lukasiewicz Logic by employing Giles’s
game.
The first game starts with [ |a ∨ b] and ends either in [ |a] or in [ |b] at my choice as shown
in figure 3.6.
[  |a]
I choose a
[  |(a\/b)]
I choose b
[  |b]
</figure>
<figureCaption confidence="0.998889">
Figure 3.6: Game Tree for a ∨ b
</figureCaption>
<bodyText confidence="0.998460555555556">
The second game starts in the game state [ |((a --&gt; b) --&gt; b) ∧ ((b --&gt; a) --&gt; a)]. Figure 3.6
shows the according game tree. Note that the final game states [b  |a, b] and [a  |b, a] are
equivalent to [ |a] and [ |b] respectively.
We can observe that the final game state [|] is worse for you than all other final game
states, so you will never choose to reach [|]. Furthermore, depending on your choices we
will get either to the game state [a --&gt; b  |b] or [b --&gt; a  |a]. But in both states I can decide
between ending up in [ |a] or in [ |b] (or an equivalent game state), which is exactly the same
result we had for the first game. Thus we can conclude that both propositions “a ∨ b” and
“((a --&gt; b) --&gt; b) ∧ ((b --&gt; a) --&gt; a)” are equivalent in Lukasiewicz Logic.
</bodyText>
<subsectionHeader confidence="0.998682">
3.7 Remarks on Quantifiers
</subsectionHeader>
<bodyText confidence="0.990647">
So far we have considered only propositional fuzzy logics, particularly propositional Lukasiewicz
Logic. That means, we had propositional variables as atomic formulas compound proposi-
tions built from these by connecting them with unary or binary connectives.
If we want to model first order Lukasiewicz Logic, we extend our syntax by variable symbols
x, y ..., constant symbols d, e, ..., predicate symbols P, Q,... and the quantifiers 3, `d just as
for classical first order logic. In the following we restrict our attention to languages where
</bodyText>
<page confidence="0.996749">
37
</page>
<subsectionHeader confidence="0.912001">
3.7. Remarks on Quantifiers 3. Giles’s Game
</subsectionHeader>
<bodyText confidence="0.99324275">
for each element of the domain of the intended interpretation there exists a corresponding
constant symbol.
Valuations are then generalised from propositional formulas to quantifiers as usual. For a
continuous t-norm * the semantics of these quantifiers are defined as:
</bodyText>
<equation confidence="0.904427">
v*(3xA(x)) := sup v*(A(d))
d
v*(`dxA(x)) := inf v*(A(d))
d
</equation>
<bodyText confidence="0.998768">
As for the other connectives we can observe that these quantifiers behave classically if A(x)
is assigned a truth value of either 0 or 1 for all instances.
The question now is, if it is possible to extend Giles’s Game in such a way that it is
adequate for first order Lukasiewicz Logic. We will see that we can answer this question
only partly positive.
We will use the following two rules for dealing with quantifiers:
</bodyText>
<equation confidence="0.92072675">
Rule 8. He who asserts `dxP(x) undertakes to assert P(d) for any constant chosen by his
opponent.
Rule 9. He who asserts 3xP(x) undertakes to assert P(d) for some constant chosen by
himself.
</equation>
<bodyText confidence="0.999830375">
These rules, as the other game rules as well, have already been suggested by Lorenzen in
[Lor61]. Here is also the reason why we have to require a constant symbol for each possible
value a variable can assume: if for a certain value there existed no constant symbol, no
player could choose this value according to Rules 8 and 9.
Note that, if x can only assume finitely many different values denoted by the constant
symbols d1, ... , dn, then, according to rule 5, stating the proposition `dxP(x) is equivalent
to stating the proposition P(d1) ∧ P(d2) ∧ ... ∧ P(dn). This is in perfect accordance with
the “normal” usage of the `d quantifier. The same applies to the 3 quantifier, which can be
regarded as a series of disjunctions.
We have to extend the concept of conducting experiments: we introduce parametric ex-
periments. A parametric experiment has (finitely many) parameters used when conducting
a trial. With each (n-ary) predicate symbol P we associate a (yes/no) experiment EP, where
EP has n parameters corresponding to the arguments of P. Nonparametric experiments then
can seen as a special case where the number of parameters is zero. In the example below
the argument to P is a natural number.
With this game-based characterization of quantifiers, however, two problems arise:
</bodyText>
<page confidence="0.977583">
38
</page>
<subsectionHeader confidence="0.256962">
3.7. Remarks on Quantifiers 3. Giles’s Game
</subsectionHeader>
<listItem confidence="0.999335">
• If I assert ∀xP(x) for an atomic proposition P(x), how should you, in general, decide
which constant to choose, if you have no means of calculating it analytically. Especially
if EP is some experiment which chaotically depends on the value of its parameter, you
would have to try out the experiment for each value that the interpretation assigns to
x (that is, possibly infinitely many times).
• Moreover, there may not exist an optimal choice. Consider, as an example, the follow-
ing experiment:
</listItem>
<bodyText confidence="0.998337625">
Let x denote a natural number. Then the experiment EP with parameter x consists
of tossing a coin x times. If each time the result is “heads” then the outcome of the
experiment is “no”, otherwise it is “yes”.
Now assume that I assert the proposition 3xP(x). According to rule 9 I will, of course,
choose a large value for x as this increases the chances that the outcome of the experi-
ment will be “yes”. But no matter how large the value of x is, choosing a higher value
would have been a better choice. So there is no optimal strategy for me and I will not
be able to enforce that I will not lose any money in the long run. But, as the valuation
of 3xP(x) is computed as supd v(P(d)) = 1, I should be able to do so by theorem 4.
About the first problem, we cannot do much. The only way, if we want to characterize
quantifiers by dialogue game rules, is to assume omniscient players. This means that I am
capable of assigning not only a subjective probability value for each x to the proposition a(x)
but, moreover, I know which value of x to choose in order to achieve a desired subjective
probability value.3 Assuming omniscient players, solves this problem, but we then have to
keep in mind that this game no longer constitutes a tangible meaning for propositions with
quantifiers as in practice such a strategy cannot implemented.
According to the second problem, theorem 4 no longer holds when incorporating quan-
tifiers. This does not come completely unexpected: Scarpellini has proved in [Sca62] that
first order Lukasiewicz Logic is not axiomatizable. If we could extend Giles’s game by “sim-
ple” rules to propositions containing quantifiers, we would be able to define corresponding
rules for the relational hypersequent calculus rH. But this would yield an axiomatization of
Lukasiewicz Logic, which does apparently not exist.
In Definition 14 we defined the risk value of an arbitrary game state G as the smallest
risk value of a final state I can enforce for a game starting in G. Now, with the presence of
</bodyText>
<footnote confidence="0.978521333333333">
3If it was just for this one problem, it would suffice to know, for which value of x I assume the highest
and lowest subjective probability values to the proposition P(x). But, as we will see, for dealing with the
second problem we will need more than that.
</footnote>
<page confidence="0.997447">
39
</page>
<subsectionHeader confidence="0.80743">
3.7. Remarks on Quantifiers 3. Giles’s Game
</subsectionHeader>
<bodyText confidence="0.867532">
quantifiers in our logic, we have to alter this definition as follows:
</bodyText>
<equation confidence="0.9052902">
Definition 17. Let G = [Γ 1 Δ] be an arbitrary game state. The risk value of G, denoted
(Γ 1 Δ) L, is the real value such that in a game starting in G for any given value e &gt; 0:
❼ I have a strategy guaranteeing that my expected loss will never exceed (Γ 1 Δ) L + e and
❼ there exists a strategy for you guaranteeing that my expected loss will never be less than
(Γ 1 Δ) L − e.
</equation>
<bodyText confidence="0.999805571428571">
This definition allows us to assign a “sharp” risk value to game states containing proposi-
tions with quantifiers, e.g. for the example above the risk value assigned to the game state
[1 3xp(x)] equals 0 because I can enforce a final game state where my risk value is, although
non-negative, arbitrarily small by choosing an accordingly large value for x. Moreover, that
risk value again satisfies theorem 4. When trying to prove this fact, one can proceed as
before for the rules without quantifiers. The crucial point is recognizing that the risk value
of a game state where a proposition is bound by a quantifier can be calculated as follows:
</bodyText>
<equation confidence="0.973908">
(Γ, `dxP(x) 1 Δ) L = inf (Γ, P(d) 1 Δ) L
d
(Γ, 3xP(x) 1 Δ) L = sup (Γ, P(d) 1 Δ) L
d
(Γ 1 `dxP(x), Δ) L = sup (Γ 1 P(d), Δ) L
d
(Γ 1 3xP(x), Δ) L = inf (Γ 1 P(d), Δ) L
</equation>
<bodyText confidence="0.958243733333333">
d
As an example, the first equality can be argued as follows: Let c denote the risk value of the
game state [Γ, `dxP(x) 1 Δ]. I am able to choose any appropriately valued constant d, such that
the risk value of the game state [Γ, P(d) 1 Δ] approaches infd (Γ, P(d) 1 Δ) L arbitrarily closely.
Then, if c &gt; infd (Γ, P(x) 1 Δ) L I can choose a constant d such that (Γ, P(d) 1 Δ) L lies between c
and infd (Γ, P(d) 1 Δ) L. But then you have no strategy to ensure that the game ends in a finale
state where the risk value exceeds c − e if e is smaller than c − (Γ, P(d) 1 Δ) L which is a direct
contradiction to the definition of a risk value. On the other hand, if c &lt; infd (Γ, P(d) 1 Δ) L
and e &lt; infd (Γ, P(d) 1 Δ) L −c then I will not be able to find a value d such that (Γ, P(d) 1 Δ) L
does not exceed c + e because in that case (Γ, P(d) 1 Δ) L would have to be smaller than
infd (Γ, P(d) 1 Δ) L. So, since both cases c &gt; infd (Γ, P(d) 1 Δ) L and c &lt; infd (Γ, P(d) 1 Δ) L yield
contradictions, the only possibility left is c = infd(Γ, P(d) 1 Δ) L. (For the other equalities we
can reason completely analogously.)
Assume now, that you have asserted the proposition `dxP(x). Then I have to call on you
to assert P(d), where I choose d such that v*(P(d)) &lt; infd v*(P(d)) − n~ where n denotes the
</bodyText>
<page confidence="0.991691">
40
</page>
<subsectionHeader confidence="0.912706">
3.7. Remarks on Quantifiers 3. Giles’s Game
</subsectionHeader>
<bodyText confidence="0.999921">
number of quantifiers in all propositions of the given game state. The term “1n” is necessary
because otherwise, if there occur more than one quantifiers in the given game state, the risk
values of the final game state and the initial game state can differ by more than e.
The fact that we do not only have to know the suprema (resp. infima) for all propositions
containing a variable which is bound by a quantifier, but also which values to choose in order
to approach that suprema and infima arbitrarily closely, is another facet of the first problem
of omniscient players.
</bodyText>
<page confidence="0.993994">
41
</page>
<figure confidence="0.869059">
3.7. Remarks on Quantifiers 3. Giles’s Game
</figure>
<figureCaption confidence="0.985914">
Figure 3.7: Game Tree for ((a → b) → b) ∧ ((b → a) → a)
</figureCaption>
<page confidence="0.960145">
42
</page>
<figure confidence="0.896176407407408">
[  |(((a-&gt;b)-&gt;b)/\((b-&gt;a)-&gt;a))]
You choose ((b-&gt;a)-&gt;a)
You choose ((a-&gt;b)-&gt;b)
[  |((b-&gt;a)-&gt;a)]
[  |((a-&gt;b)-&gt;b)]
You attack by asserting (b-&gt;a)
I defend by asserting a
You attack by asserting (a-&gt;b) You grant ((a-&gt;b)-&gt;b) You grant ((b-&gt;a)-&gt;a)
I defend by asserting b
[(b-&gt;a)  |a]
[  |]
[(a-&gt;b)  |b]
I attack by asserting b
You defend by asserting a
I attack by asserting a
You defend by asserting b
I grant (b-&gt;a)
I grant (a-&gt;b)
[a  |b,a]
[  |a]
[b  |a,b]
[  |b]
“You keep changin’ the rules and I can’t play the game.
I can’t take it much longer. I think I might go insane.”
Michael and Janet Jackson, Scream
CHAPTER 4
Extending Giles’s Game to Other Logics
</figure>
<bodyText confidence="0.999851692307692">
The relation between Giles’s Game as presented in the previous chapter and Lukasiewicz
Logic established by Theorem 4 is, in other words, that my risk value for a proposition and
the truth value assigned to that proposition in Lukasiewicz Logic under a corresponding
interpretation always add up to one. (My risk value is defined as the expected amount of
money I will lose when stating that proposition in the game, assuming both players playing
rationally)
At this point the question arises if it is possible to modify the game rules to characterize
other logics, e.g. Gödel Logic G and Product Logic Π.
Here we will answer this question only partly positive: It is possible to give game rules for
both logics such that if a proposition is valid in the respective logic, then I have a winning
strategy for that game and there exists a winning strategy for you otherwise.
First we will modify the rules for evaluating atomic game states reflecting the evaluation
functions for G an Π.
</bodyText>
<page confidence="0.996004">
43
</page>
<subsectionHeader confidence="0.845139">
4.1. Different Ways of Combining Bets 4. Extending Giles’s Game to Other Logics
4.1 Different Ways of Combining Bets
4.1.1 Summing Up Bets
</subsectionHeader>
<bodyText confidence="0.997388">
Let us assume that after playing Giles’s Game we have finally reached an atomic game state
G = [p1, . . . , pm  |q1, . . . , qn]. Moreover, let (pi) and (qi) denote the risk values associated
with the atomic propositions pi and qi.
When evaluating the atomic game state G, the expected account of money that I have to
pay you, known as the risk value of my tenet, is calculated as
</bodyText>
<equation confidence="0.74113">
(q1,..., qn)i, =
</equation>
<bodyText confidence="0.99284275">
(see section 3.4.1).&apos; This formula corresponds to the betting scheme of Giles’s Game where
for each atomic proposition an experiment is conducted and for every negative outcome of
such an experiment the asserting player has to pay €1 to his opponent.
My expected gain can then be calculated as (p1, ... , pm)i, − (q1, ... , qn)i,.
</bodyText>
<subsectionHeader confidence="0.659753">
4.1.2 Joint Bets
</subsectionHeader>
<bodyText confidence="0.999973">
Let us consider another version of the game where you have to pay me €1 unless all trials
of experiments associated with propositions asserted by you test positively, and I have to
pay you €1 unless all trials of experiments associated with propositions asserted by me test
positively. In this case the risk value of a players tenet [q1, ... , qn] is calculated as
</bodyText>
<equation confidence="0.994427">
(q1,..., qn)Π = 1 − Yn (1 − (qi))
i=1
</equation>
<bodyText confidence="0.866354666666667">
assuming that all experiments are independent of each other.
My expected gain in the atomic game state [p1, ... , pm  |q1, ... , qn] can then be calculated
as
</bodyText>
<equation confidence="0.98734">
(p1, ... , pm)Π − (q1, ... , qn)Π = 1 − Ym (1 − (pi)) − (1 − Yn (1 − (qi)))
i=1 i=1
Yn (1 − (qi)) − Ym (1 − (pi))
i=1 i=1
</equation>
<footnote confidence="0.999518">
1Since in this section we introduce other betting schemes, we use (•) L instead of (•) in order to be able to
distinguish the risk values for different betting schemes.
</footnote>
<page confidence="0.978368">
44
</page>
<figure confidence="0.708376666666667">
Xn
i=1
(qi)
</figure>
<subsectionHeader confidence="0.438693">
4.1. Different Ways of Combining Bets 4. Extending Giles’s Game to Other Logics
</subsectionHeader>
<bodyText confidence="0.999517888888889">
We will use joint bets below when identifying dialogue game rules for Product Logic.
To indicate the soundness of this approach for Product Logic Π consider the proposition
A = q1&amp;q2&amp; ... &amp;qm with qi being atomic. If we play the according game starting in
[ |((p1&amp;p2)&amp; ...)&amp;pn]2, we will finally end up in the atomic game state [ |p1, p2, . . ., pn]
assuming you playing rationally. Now, according to the betting scheme presented here,
my expected gain is 1 − fln i=1(1 − hqii) = 1 − flm i=1 π(Eqi)€ where π(Eqi) is the subjective
probability of the experiment Eqi (see definition 13). If we want to associate a truth value of
a tenet analogously to section 3.4.1 as one minus its risk value, we arrive at the truth value
fln i=1 pi(Eqi) for the tenet [q1,..., qn].
</bodyText>
<subsectionHeader confidence="0.979035">
4.1.3 Selecting Representative Bets
</subsectionHeader>
<bodyText confidence="0.9997545">
Consider yet another betting scheme: Each player has to select one of his opponent’s atomic
propositions. The according experiment is conducted and if it fails, the player asserting
the proposition has to pay €1 to his opponent. We will use this betting scheme below for
identifying dialogue game rules for Gödel Logic. Assuming both players playing rational, as
in section 3.4.1, they will select an experiment which has the lowest probability value (and,
thus a high risk value), hence the risk value of a tenet [q1, ... , qm] is calculated as:
</bodyText>
<equation confidence="0.738678125">
hq1,..., qmiG = min (1 − hqii)
16i6m
My expected gain in the atomic game state [p1, ... , pm  |q1, ... , qn] can then be calculated
as:
hp1, ... , pmiG − hq1,..., qniG = 1 − min (1 − hpii) − (1 − min (1 − hqii))
16i6m 16i6m
= min (1 − hqii) − min (1 − hpii)
16i6m 16i6m
</equation>
<bodyText confidence="0.99795">
Note that this definition corresponds to the evaluation of conjunctions of atomic formulas
(analogously to the case for Π, above) according to the semantics of Gödel Logic G.
</bodyText>
<subsectionHeader confidence="0.936181">
4.1.4 Winning conditions
</subsectionHeader>
<bodyText confidence="0.9982605">
If we are not interested in finding out the exact value of my gain or loss but only in the
winner of the game, we can formulate the following winning condition W6~ for ~ ∈ { L, Π, G}
</bodyText>
<footnote confidence="0.567972">
2Note that &amp; is associative, so we can put the parentheses any way we want.
</footnote>
<page confidence="0.995986">
45
</page>
<subsectionHeader confidence="0.732637">
4.2. Decomposing Complex Assertions 4. Extending Giles’s Game to Other Logics
</subsectionHeader>
<bodyText confidence="0.733592333333333">
for the atomic game state [q1,... , qn 1 p1, ... , pm]:
W6o [q1,... , qn 1 p1,..., pm]⇐⇒ hp1,..., pmio &lt; hq1,..., qnio
For Π and G this definition is equivalent to:
</bodyText>
<equation confidence="0.9948598">
W6Π [q1,... , qn 1 p1,..., pm] ⇐⇒ Yn (1 − hqii) 6 Ym (1 − hpii)
i=1 i=1
W6G [q1,..., qn 1 p1,..., pm]⇐⇒ min
16i6n (1 − hqii) � min
16i6m (1 − hpii)
</equation>
<subsectionHeader confidence="0.695219">
4.2 Rules for Decomposing Complex Assertions
</subsectionHeader>
<bodyText confidence="0.999124666666667">
As mentioned above we will use joint bets for defining a dialogue game suitable for Π and
selecting representative bets for G. However, these schemes together with the game rules
from Giles’s Game for decomposing compound propositions do not suffice for characterizing
these logics. Consider for example the formula ,p → q and an interpretation v with v(p) = 0
as well as v(q) &lt; 1. Evaluating the formula in the fuzzy logic based on the t-norm ∗ gives
us:
</bodyText>
<equation confidence="0.846499">
v*(,p → q) = (v*(p → ⊥) ⇒* v(q)) = ((v*(p) ⇒* 0) ⇒* v(q)) = (1 ⇒* v(q) &lt; 1)
</equation>
<bodyText confidence="0.999755533333333">
The formula is neither valid in Π nor in G, hence I should have no winning strategy for
a game starting in [1 (p → ⊥) → q]. If you do not attack my implication in the first place,
I have already won. Otherwise we get to the game state [p → ⊥ 1 q] and if I attack your
implication we end up in [⊥ 1 q, p]. Evaluating this game state using joint bets as well as
selecting representative bets gives us the same result: I win because the respective winning
conditions are fulfilled in both cases. (Note that using the winning conditions for Lukasiewicz
Logic you would win the game if we reached this final game state. On the other hand, if I
did not attack your implication, you would win the game as well.)
It is no coincidence that this counter-example involves the truth value 0, respectively the
proposition ⊥. The problem this truth value is that if one player asserts an atomic proposition
with truth value 0, the risk value for his tenet is 1, regardless of the other propositions he
asserts. As seen in the example, as soon as I can force you to assert ⊥ at any point in the
game, I win the game. This is, because, even if my tenet has the truth value 0, I will not
lose any money in the long run. I can always restrict my loss to € 1 or lower (according to
the principle of limited liability), while each run I get € 1 from you.
</bodyText>
<page confidence="0.985251">
46
</page>
<subsectionHeader confidence="0.758628">
4.2. Decomposing Complex Assertions 4. Extending Giles’s Game to Other Logics
</subsectionHeader>
<bodyText confidence="0.990304923076923">
If we exclude the symbol 1 from our language and evaluate formulas using joint bets, but
over the left-open interval (0, 1] instead of [0, 1], we arrive at a logic known as Cancellative
Hoop Logic(CHL), [EGHM03]. Note that eliminating 0 and, thus, 1 significantly reduces the
expressiveness of the language since negation is defined in terms of 1.
There are several ways for introducing new rules in order to make the game adequate for
Π and G. We will first concentrate on the rules given in [Fer09], but we will also describe
alternative formulations.
In order to remedy the situation, the approach presented in [Fer09] is to introduce an
additional flag ➯. The flag ➯ being raised announces that I will only be declared winner of
the game if the evaluation of the final elementary state yields a strictly positive (and not
just non-negative) expected gain for me. In other words: For me, in order to win the game,
it does no longer suffice not to lose any money, instead I have to gain money in the long run.
Formally, this is accomplished by using the winning condition W&lt;∗ if the flag ➯ is raised:
</bodyText>
<equation confidence="0.849791">
W&lt;� [q1,..., qm  |p1,..., pn] �&gt; (q1,..., qn)o &lt; (p1,... , pm)o
</equation>
<bodyText confidence="0.964684">
We replace rule 2 by the following two rules: (Note that the game rules are no longer
symmetric for both players.)
</bodyText>
<construct confidence="0.998109285714286">
Rule 1a. If I assert A --&gt; B then, whenever you choose to attack this statement by asserting
A, I have the following choice: either I assert B in reply or I challenge your attack on A --&gt; B
by replacing the current game with a new one in which you assert A and I assert B.
Rule 1b. If you assert A --&gt; B then, whenever I choose to attack this statement by asserting
A, you have the following choice: either you assert B in reply or you challenge my attack
on A --&gt; B by replacing the current game with a new one in which the flag ➯ is raised and I
assert A while you assert B.
</construct>
<bodyText confidence="0.910244777777778">
Admittedly, these rules appear rather ad hoc at this point. What we can observe easily is
that now our counterexample ¬p --&gt; q with v(p) = 0 from above is no problem any longer.
When we get to the game state [p --&gt; 1  |q] and I attack your implication, you may, by rule
1b, challenge my attack by replacing the current game with a new one starting in [1  |p] in
which the flag ➯ is raised. If you do so, we both won’t gain any money, but because of the
flag being raised now I am not declared the winner of the game, but you are.
This is of course no proof that these rules are sufficient in order to characterize G and Π;
this fact has to be proved separately (and will be done). A motivation for the new rules can
be obtained when comparing the rules of the dialogue game and the corresponding rules of
</bodyText>
<page confidence="0.996979">
47
</page>
<subsectionHeader confidence="0.751449">
4.2. Decomposing Complex Assertions 4. Extending Giles’s Game to Other Logics
</subsectionHeader>
<bodyText confidence="0.990472">
the relational hypersequent calculus rH as defined in Definition 8. As for Lukasiewicz Logic
in Section 3.4 we can informally read the following two rules as game rules:
</bodyText>
<equation confidence="0.9940686">
G 1 T&apos; &lt; Δ G 1 T&apos;, A &lt; B, Δ 1 A &lt; B
(→, &lt;, r)
G 1 T&apos; &lt; A → B, Δ
G 1 T&apos; &lt; Δ 1 T&apos;, B &lt; A, Δ G 1 T&apos; &lt; Δ 1 B &lt; A
(→, &lt;, l) G 1 T&apos;, A → B &lt; Δ
</equation>
<bodyText confidence="0.992431454545455">
In rule (→, &lt;, l) the two branches do only differ by the relational sequent T&apos;, B &lt; A, Δ on
the one side and B &lt; A on the other one. In the corresponding game rule 1b you have the
choice between adding the assertion B to your tenet (and me adding A to mine) leaving the
flag ➯ as it is or to replace the current game with a new one where the flag is raised, you
asserting only B and me asserting only A.
For rule (→, &lt;, r) we have a similar situation with the difference that now both relational
sequents T&apos;, A&lt; B, Δ and A &lt; B are on the same branch (while by the corresponding game rule
now I can choose between attacking your assertion and starting a new game). Also note,
that now we have A &lt; B and by the game rule, in the new game the flag ➯ is not raised
either.
An alternative formulation of the rules 1a and 1b is the following one:
</bodyText>
<construct confidence="0.837383666666667">
Rule 1’. If I have a winning strategy for winning the game starting in the state [A 1 B], then
I am not allowed to attack your assertion of A → B. (And vice versa, i.e., for the roles of
you and me switched.)
</construct>
<bodyText confidence="0.982633461538461">
According to rule 1b, if I attack your assertion of A → B, then you can challenge that
attack and by replacing the current game by a new one starting in [B 1 A] (with the flag ➯
being raised). Consequently, if I believe the risk value of A to be higher than the risk value
of B (and if I play rationally), I will not that attack. This in essence means that I have a
winning strategy for a game starting in [A 1 B].
Now, rule 1’ explicitly forbids me to perform this in (and only in) that case. As we see,
when employing rule 1’ instead of 1a and 1b, both players may have fewer choices to make
in such situations but the existence of winning strategies is not affected.
Although rule 1’ may better fit Giles’s original format than rules 1a and 1b, there is a
certain drawback: In Giles’s original game as well as in its variant using rules 1a and 1b it
is possible to play the game without reasoning about winning strategies. If we add rule 1’,
a players is enforced to do so in order to know if he is allowed to attack an assertion of the
form A → B made by his opponent.
</bodyText>
<page confidence="0.995916">
48
</page>
<subsectionHeader confidence="0.835784">
4.3. Adequateness of the Rules 4. Extending Giles’s Game to Other Logics
4.3 Adequateness of the Rules
</subsectionHeader>
<bodyText confidence="0.99876355">
We show that Giles’s Game augmented with rules 1a and 1b is indeed suitable for Π and
G when employing the according winning conditions. One way to do so is to formalize
strategies for both players of the game and then formally prove the equivalence between
these strategies and the according rules of the hypersequent calculus rH defined in section
2.6. In [Fer09], for example, the rules 1a and 1b are derived from the corresponding rules
of the hypersequent calculus rH.
Here we will go another way: We will directly prove that the game based on the new
rules characterizes G and Π similarly to proving that Giles’s original game characterizes L
in section 3.4. The main difference to the proof presented there is that for Lukasiewicz Logic
we had the result that the risk value of the game starting with me asserting one proposition
directly corresponds to the truth value of that proposition evaluated in L. (see theorem 4)
For the new game we don’t have this close correspondence any longer. Instead we will see
that I will win the game (i.e. I have a strategy to enforce a final game state which fulfills the
winning condition for G or Π) if and only if the proposition the game started with evaluates
to 1 in G, respectively Π.
In contrast to section 3.4 we are not really interested in the concrete risk value of a game
state. What we need to know is only if I have a strategy to enforce a game state where I
win the game.3
First, we extend the definition of the winning conditions W&apos;„[1&apos; 1 Δ] for o E {&lt;, &lt;} from
atomic game states to arbitrary game states.
</bodyText>
<construct confidence="0.6025365">
W&apos;„[1&apos;, A A B 1 Δ] ⇐⇒ W&apos;„[1&apos;, A 1 Δ] or W&apos;„ [1&apos;, B 1 Δ]
W&apos;„ [1&apos;, A V B 1 Δ] ⇐⇒ W&apos;„[1&apos;, A 1 Δ] and W&apos;„ [1&apos;, B 1 Δ]
W&apos;„[1&apos; 1 A A B, Δ] ⇐⇒ W&apos;„[1&apos; 1 A, Δ] and W„&apos;[1&apos; 1 B, Δ]
W&apos;„[1&apos; 1 A V B, Δ] ⇐⇒ W&apos;„[1&apos; 1 A, Δ] or W„&apos;[1&apos; 1 B, Δ]
</construct>
<bodyText confidence="0.786689333333333">
These definitions directly correspond to Rules 5 and 4: If, according to the corresponding
rule, I have a choice to make, I then I have a strategy to win the game if and only if I have
such a strategy in one of the succeeding game states. On the other hand, if you have a choice
</bodyText>
<footnote confidence="0.99664775">
3We could, of course, formalize the risk value of a game state analogously to section 3.4. The problem with
this approach is that a risk value of 0 does not necessarily mean that I have won the game; this depends
on the flag ➯ having been raised in the final game state where the game ended. If we just calculated the
risk value of a game state, this information would be lost.
</footnote>
<page confidence="0.996327">
49
</page>
<subsectionHeader confidence="0.895167">
4.3. Adequateness of the Rules 4. Extending Giles’s Game to Other Logics
</subsectionHeader>
<bodyText confidence="0.997712333333333">
to make, I will only win the game, if for all succeeding game states I have a wining strategy.
If you assert an implication, then I have a winning strategy if I can either win the game by
granting that implication or by attacking it. In the latter case you may choose to challenge
my attack. Thus, here I need a winning strategy if you choose to do so as well as if you
choose not to challenge my attack. (Note that if you challenge my attack the flag is raised
in the new game which is reflected by the winning condition W&lt;&apos; being used here):
</bodyText>
<figure confidence="0.493858">
W&apos;&apos; [Γ, A --&gt; B 1 Δ] #=&gt; W&apos;&apos;[Γ 1 Δ] or both W&apos;&apos;[Γ, B 1 A, Δ] and W&lt;&apos; [B 1 A]
For an implication asserted by me we get analogously:
</figure>
<figureCaption confidence="0.276612">
W&apos;&apos;[Γ 1 A --&gt; B, Δ] #=&gt; both W&apos;&apos; [Γ 1 Δ] and either W&apos;&apos; [Γ, A 1 B, Δ] or W&lt;,&apos; [A 1 B]
</figureCaption>
<bodyText confidence="0.7145925">
For atomic game states we have seen in Section 4.1 how to evaluate the winning condition
(with o E {G, ΠI and π as the subjective probability of an experiment):
</bodyText>
<equation confidence="0.85666675">
W&apos;G[p1, p2,..., pm 1 q1, q2,..., qn] #=&gt; min π(Epi) a min π(Eqj )
1&lt;,i&lt;,m 1&lt;,j&lt;,n
W&apos;Π[p1, p2,..., pm 1 q1, q2,..., qn] #=&gt; m π(Epi) Q fin π(Eqj )
i=1 j=1
</equation>
<bodyText confidence="0.8608338">
Next, let us extend the evaluation functions for G and Π at first to multisets of formulas
and finally to game states:
Definition 18. (a) For a proposition A, an interpretation v, and o E {G, ΠI we define the
function (A)&apos; := 1 − v&apos;(A) where o E {G, ΠI and v&apos; is the extension of v to arbitrary
propositions as defined in Definition 3,
</bodyText>
<listItem confidence="0.39333">
(b) for a multiset Γ of propositions we define the functions
</listItem>
<table confidence="0.891831111111111">
(Γ)G:= 1 − min � vΠ(G)
GcΓ vG(G) and (Γ)Π := 1 −
GcΓ
(and ()G = ()Π = 0)
(c) for a game state [Γ 1 Δ] and o E {G, ΠI we define the function (Γ 1 Δ)&apos; := (Γ)&apos; − (Δ)&apos;.
The values (Γ 1 Δ)G and (Γ 1 Δ)Π can be calculated as:
(Γ 1 Δ)G = min vG(G) − min � �vΠ(G) − vΠ(D)
GcΓ DcΔ vG(D) and (Γ 1 Δ)Π = DcΔ
GcΓ
</table>
<page confidence="0.889865">
50
</page>
<subsectionHeader confidence="0.899067">
4.3. Adequateness of the Rules 4. Extending Giles’s Game to Other Logics
</subsectionHeader>
<bodyText confidence="0.9998224">
The relation between these definitions and the winning condition derived from the game
rules is expressed by the following lemma:
Lemma 5. Let [Γ  |Δ] be an arbitrary game state. For each atomic proposition a let v(a) =
π(Ea), i.e. the truth value assigned to a is equal to the subjective probability assigned to a.
Then the following relation holds for o E {G, Π} and a E {&lt;, &lt;}:
</bodyText>
<equation confidence="0.972094">
(Γ  |Δ)° a 0 W/°[Γ  |Δ]
</equation>
<bodyText confidence="0.9854038">
Proof. As in section 3.4.1 we use induction by the number of connectives occurring in all
propositions in the game state. If there are zero connectives, there are only atomic proposi-
tions and it is easy to see by the definition of the winning conditions that Lemma 5 holds.
In this case, we can easily see that the extended (inverted) evaluation function and my risk
value for the game state coincide:
</bodyText>
<equation confidence="0.9697106">
(p1,..., pm  |q1,... , qn)G a 0 �&gt; min v(pi) − min v(qj) a 0
1&lt;i&lt;m 1&lt;j&lt;n
�&gt; min p(pi) − min p(qj) a 0
1&lt;i&lt;m 1&lt;j&lt;n
�&gt; W/G[p1,..., pm  |q1,..., qn]
</equation>
<bodyText confidence="0.945744875">
For Π this is shown goes completely analogously.
Assume that Lemma 5 holds if there are at most n connectives occurring in a game state.
We have to check each of the six formulas for defining W/° on arbitrary game states given
above. We only show the case where you assert a conjunction and the two cases where one
player asserts an implication.
Let us assume that you assert a conjunction of two propositions. In this case we have to
prove the following
(Γ, A ∧ B  |Δ)° a 0 W/° [Γ, A  |Δ] or W/°[Γ, B  |Δ]
</bodyText>
<page confidence="0.969937">
51
</page>
<subsectionHeader confidence="0.426378">
4.3. Adequateness of the Rules 4. Extending Giles’s Game to Other Logics
</subsectionHeader>
<bodyText confidence="0.395093">
For Π we have:
</bodyText>
<table confidence="0.870927928571429">
hΓ, A A B 1 ΔiΠ a 0
⇐⇒ vΠ(A A B ) · fi fivΠ(G) − vΠ(D) a 0
G∈Γ D∈Δ
⇐⇒ min vΠ(A), vΠ(B)~ · fi fivΠ(G) − as fi !vΠ(G) &gt; 0
G∈Γ D∈Δ vΠ(D) a 0
G∈Γ
fi fivΠ(G) − fi fivΠ(G) − !vΠ(D) a 0
⇐⇒ min vΠ(A) · D∈Δ vΠ(D), vΠ(B) · D∈Δ
G∈Γ G∈Γ
~ hΓ, A 1 ΔiΠ, hΓ, B 1 ΔiΠ~
⇐⇒ min a 0
⇐⇒ hΓ, A 1 ΔiΠ a 0 or hΓ, B 1 ΔiΠ a 0
and for G we have analogously:
hΓ, A A B 1 ΔiG a 0
</table>
<equation confidence="0.992533263157895">
~ ~
⇐⇒ min vG(A A B), min
G∈Γ vG(G) − min
D∈Δ vG(D) a 0
~ ~
min vG(A), vG(B)~ , min
⇐⇒ min G∈Γ vG(G) − min
D∈Δ vG(D) a 0
~ ~
⇐⇒ min G∈Γ,A vG(G), min
min G∈Γ,B vG(G) − min
D∈Δ vG(D) a 0
~ ~
⇐⇒ min G∈Γ,A vG(G) − min
min D∈Δ vG(D), min
G∈Γ,B vG(G) − minD∈Δ vG(D) a 0
~ hΓ, A 1 ΔiG, hΓ, B 1 ΔiG~
⇐⇒ min a 0
⇐⇒ hΓ, A 1 ΔiG a 0 or hΓ, B 1 ΔiG a 0
</equation>
<bodyText confidence="0.9960785">
By applying the induction hypothesis hΓ 1 Δi° a 0 ⇐⇒ W/° [Γ 1 Δ] (for a ∈ {&lt;, &lt;}) to the
game states [Γ, A 1 Δ] and [Γ, B 1 Δ] we can conclude that
</bodyText>
<subsectionHeader confidence="0.403755">
hΓ, A A B 1 Δi° a 0⇐⇒ W/°[Γ, A A B 1 Δ]
</subsectionHeader>
<bodyText confidence="0.972373">
The three other cases dealing with conjunction and disjunction go completely analogously,
but things get interesting as we get to the new rules for implication:
If I assert an implication we have to prove:
</bodyText>
<footnote confidence="0.229679">
hΓ 1 A → B, Δi° a 0 ⇐⇒ W/° [Γ 1 Δ] and either W/° [Γ, A 1 B, Δ] or W6° [A 1 B] (4.1)
</footnote>
<page confidence="0.90416">
52
</page>
<figure confidence="0.856542866666667">
4.3. Adequateness of the Rules 4. Extending Giles’s Game to Other Logics
(a) Let us assume that v°(A) &lt; v°(B). Then the equality
hΓ 1 A → B, Δi° = hΓ 1 Δi° (4.2)
holds:
hΓ 1 A → B, ΔiΠ = fi vΠ(G) − vΠ(A → B) · fi vΠ(D)
GEΓ DEΔ
fi= vΠ(G) − 1 · fi vΠ(D) = hΓ 1 ΔiΠ
GEΓ DEΔ
hΓ 1 A → B, ΔiG = min vG(G) − min(vG(A → B), min vG(D))
GEΓ DEΔ
= min vG(G) − min(1, min vG(D)) = hΓ 1 ΔiG
GEΓ DEΔ
and hA 1 Bi° &lt; 0 because of hA 1 Bi° = v°(A) − v°(B) &lt; 0
These two facts finally help us to see that
hΓ 1 A → B, Δi° a 0 ⇐⇒ hΓ 1 Δi° a 0 and either hΓ, A 1 B, Δi° a 0 or hA 1 Bi° &lt; 0
</figure>
<bodyText confidence="0.9456758">
and applying the induction hypothesis to the game states [Γ 1 Δ], [Γ, A 1 B, Δ] and [A 1 B]
gives the desired result.
(b) Now let us assume that vΠ(A) &gt; vΠ(B). In this case we cannot prove Equivalence 4.1
directly, we have to prove both “directions” separately, but before let us show that the
equivalence
</bodyText>
<table confidence="0.9221059">
hΓ 1 A → B, Δi° a 0 ⇐⇒ hΓ, A 1 B, Δi° a 0 (4.3)
holds:
fi fi
hΓ 1 A → B, ΔiΠ a 0 ⇐⇒ vΠ(G) − vΠ(B)
GEΓ vΠ(A) · vΠ(D) a 0
DEΔ
fi fi vΠ(D) a 0
⇐⇒ vΠ(A) · vΠ(G) − vΠ(B) ·
GEΓ DEΔ
⇐⇒ hΓ, A 1 B, ΔiΠ a 0
</table>
<page confidence="0.850475">
53
</page>
<tableCaption confidence="0.256222">
4.3. Adequateness of the Rules 4. Extending Giles’s Game to Other Logics
</tableCaption>
<table confidence="0.990050909090909">
hΓ 1 A → B, ΔiG a 0 ⇐⇒ min C I/
GEΓ vG(G) − min vG(B), min
DEΔ vG(D) a 0
⇐⇒ min C I/
GEΓ vG(G) a min vG(B), min
DEΔ vG(D)
C I/ C I/
⇐⇒ min vG(A), min
GEΓ vG(G) a min vG(B), min
DEΔ vG(D)
⇐⇒ hΓ, A 1 B, ΔiG a 0
</table>
<bodyText confidence="0.8137655">
We will use this for proving both directions of Equivalence 4.1:
• hΓ 1 A → B, Δi° a 0 ⇒ W&apos;° [Γ 1 Δ] and either W&apos;° [Γ, A 1 B, Δ] or W6° [A 1 B]):
In order to see that the left hand side of the conjunction evaluates to true in this
case, we have to show that hΓ 1 A → B, Δi° a 0 ⇒ hΓ 1 Δi° a 0 holds:
</bodyText>
<equation confidence="0.79392425">
hΓ 1 A → B, ΔiΠ = � vΠ(G) − vΠ(A → B) · � vΠ(D)
GEΓ DEΔ
&gt; Y vΠ(G) − 1 · � vΠ(D) = hΓ 1 ΔiΠ
GEΓ DEΔ
</equation>
<table confidence="0.931797285714286">
hΓ 1 A → B, ΔiG = min C I/
GEΓ vG(G) − min vG(A → B), min
DEΔ vG(D)
&gt; min C I/
GEΓ vG(G) − min 1, min
DEΔ vG(D) = hΓ 1 ΔiG
Together with Equivalence 4.3 we see that
</table>
<tableCaption confidence="0.341772">
hΓ 1 A → B, Δi° a 0 ⇒ hΓ 1 Δi° a 0 and either hΓ, A 1 B, Δi° a 0 or hA 1 Bi° &lt; 0
</tableCaption>
<bodyText confidence="0.942640222222222">
Again, applying the induction hypothesis to the game states [Γ 1 Δ], [Γ, A 1 B, Δ]
and [A 1 B] gives us the desired result.
• hΓ 1 A → B, Δi° a 0 ⇐ W&apos;° [Γ 1 Δ] and either W&apos;° [Γ, A 1 B, Δ] or W6° [A 1 B]:
Assume that the premise is true. Then also W&apos;∗ [Γ 1 Δ] holds. By applying the
induction hypothesis we can conclude that hΓ 1 Δi° a 0 holds and by Equivalence
4.3 we can conclude that the conclusion hΓ 1 A → B, Δi° holds.
The last (interesting) case arises, if you assert an implication. We then have to prove:
hΓ, A → B 1 Δi° a 0 ⇐⇒ W&apos;°[Γ 1 Δ] or both W&apos;° [Γ, B 1 A, Δ] and W&lt;° [B 1 A] (4.4)
Again, we have to distinguish between the case where v°(A) &lt; v°(B) holds and the one where
</bodyText>
<page confidence="0.964633">
54
</page>
<subsectionHeader confidence="0.699342">
4.3. Adequateness of the Rules 4. Extending Giles’s Game to Other Logics
</subsectionHeader>
<bodyText confidence="0.755815">
the inequation does not hold:
</bodyText>
<listItem confidence="0.507540666666667">
(a) Let us assume that v°(A) &lt; v°(B). We see that the equality
(Γ, A --&gt; B 1 Δ)° = (Γ 1 Δ)° (4.5)
as follows:
</listItem>
<equation confidence="0.706788">
(Γ, A --&gt; B 1 Δ)Π = vΠ(A --&gt; B) • � �vΠ(G) − vΠ(D)
GEΓ DEΔ
= 1 • Y �vΠ(G) − vΠ(D) = (Γ 1 Δ)Π
GEΓ DEΔ
(Γ, A --&gt; B 1 Δ)G = min(vG(A --&gt; B), min vG(G)) − min vG(D)
GEΓ DEΔ
= min(1, min vG(G)) − min vG(D) = (Γ 1 Δ)G.
GEΓ DEΔ
</equation>
<bodyText confidence="0.8553985">
Moreover, we see that (B 1 A)° &gt; 0 because of (B 1 A)° = v°(B) − v°(A) &gt; 0.
These two facts imply
(Γ, A --&gt; B 1 Δ)° &lt;0 =&gt; (Γ 1 Δ)° &lt;0 or both (Γ, B 1 A, Δ)° &lt;0 and (B 1 A)° &lt; 0.
Applying the induction hypothesis to the game states [Γ 1 Δ], [Γ, B 1 A, Δ], and [B 1 A]
gives us the desired result.
(b) Now let us assume that vΠ(A) &gt; vΠ(B). As before, we prove both directions separately.
And, again, it is useful to observe that
(Γ, A --&gt; B 1 Δ)° &lt;0 =&gt; (Γ, B 1 A, Δ)° &lt; 0. (4.6)
The proof of this statement goes completely analogously to the proof of the corre-
sponding statement in the case where I assert the implication.
</bodyText>
<listItem confidence="0.998622166666667">
• (Γ, A --&gt; B 1 Δ)° &lt;0 =&gt; W/° [Γ 1 Δ] or both W/° [Γ, B 1 A, Δ] and W&lt;° [B 1 A]: Taking into
account that (B 1 A)° &lt; 0, we see from Observation 4.6 that the implication
(Γ, A --&gt; B 1 Δ)° &lt;0 =&gt; (Γ 1 Δ)° or both (Γ, B 1 A, Δ)° and W&lt;° [B 1 A] holds. Applying
the induction hypothesis to the game states [Γ 1 Δ], [Γ, B 1 A, Δ] and [B 1 A] gives
us the desired result.
• (Γ, A --&gt; B 1 Δ)° &lt; 0 W/°[Γ 1 Δ] or both W/°[Γ, B 1 A, Δ] and W&lt;° [B 1 A]:
</listItem>
<page confidence="0.945672">
55
</page>
<subsectionHeader confidence="0.872518">
4.3. Adequateness of the Rules 4. Extending Giles’s Game to Other Logics
</subsectionHeader>
<bodyText confidence="0.903318">
By applying the induction hypothesis to the game states [Γ 1 Δ], [Γ, B 1 A, Δ] and
[B 1 A] we see that we need to prove the following:
(Γ, A ---&gt; B 1 Δ)~ &lt; 0 (Γ 1 Δ)~ &lt; 0 V ((Γ, B 1 A, Δ)~ &lt; 0 A (B 1 A)~ &lt; 0)
We see that (Γ, B 1 A, Δ)~ &lt; 0 =&gt; (Γ 1 Δ)~ &lt; 0 holds because of:
</bodyText>
<equation confidence="0.849342">
(Γ 1 Δ)n = FI FIvn(G) − vn(D)
G∈r D∈Δ
FI&gt; vn(A ---&gt; B) - FIvn(G) − vn(D) = (Γ, A ---&gt; B 1 Δ)n
G∈r D∈Δ
(Γ 1 Δ)G = min vG(G) − min vG(D)
</equation>
<table confidence="0.8087396">
G∈r D∈Δ
FI&gt; min vG(A ---&gt; B), !
G∈r FI
vn(G) − vn(D) = (Γ, A ---&gt; B 1 Δ)G.
D∈Δ
</table>
<tableCaption confidence="0.265038">
Together with Observation 4.6 we can conclude that the implication holds.
</tableCaption>
<bodyText confidence="0.5143131">
Lemma 5 finally implies that a formula is valid in G or Π if I have a winning strategy for
the according game:
Theorem 5. Let A be an arbitrary proposition and v an interpretation. Assume that for
each atomic proposition a occurring in A that v(a) = π(EQ) (as in Lemma 5). Then I have
a strategy to win the game (for G or Π) if and only if v~(A) = 1 the truth value 1 is assigned
to A by the extension of v to arbitrary propositions for the respective logic (as in Definition
3), i.e. :
W6~ [1 A] =&gt; v~(A) = 1 for o E {G, ΠI
Proof. By Lemma 5 and the definition of the winning conditions I have a strategy to win
the game starting in [1 A] if and only if W6~ [1 A] holds:
</bodyText>
<footnote confidence="0.8877135">
W6~ [1 A] =&gt; (1 A)∗ &lt; 0 =&gt; 1 − v~(A) &lt; 0 =&gt; 1 &lt; v~(A) =&gt; 1 = v~(A).
Note that this version of Giles’s Game is still adequate for Lukasiewicz Logic L in the
same sense as it is adequate for Π and G. The proof of this goes completely analogously to
the proof of the adequateness of the new rules for these two logics.
</footnote>
<page confidence="0.981123">
56
</page>
<subsectionHeader confidence="0.6497485">
4.4. Alternative Rules 4. Extending Giles’s Game to Other Logics
4.4 Alternative Rules
</subsectionHeader>
<bodyText confidence="0.999776">
Instead of using the rules 1a and 1b, one can identify adequate rules for G and Π as follows:
if one player attacks a formula of the form A --&gt; B and that attack is challenged by the other
player, the game is not replaced by a new one, where one player asserts A and the other
one B.Instead a new game is started where one player asserts A and the other one 1. This
sometimes simplifies the game. On the other hand, the close correspondence between the
game rules and the hypersequent calculus rH is lost this way.
</bodyText>
<construct confidence="0.998320875">
Rule 1a’. If I assert A --&gt; B then, whenever you choose to attack this statement by asserting
A, I have the following choice: either I assert B in reply or I challenge your attack on A --&gt; B
by replacing the current game with a new one in which you assert A and I assert 1 and where
the flag ➯ is not raised.
Rule 1b’. If you assert A --&gt; B then, whenever I choose to attack this statement by asserting
A, you have the following choice: either you assert B in reply or you challenge my attack
on A --&gt; B by replacing the current game with a new one in which the flag ➯ is raised and I
assert A while you assert 1.
</construct>
<bodyText confidence="0.933966533333333">
Informally these rules ensure that an implication of the form A --&gt; B may be attacked if
and only if A does not evaluate to 0 in the respective logic.
In order to prove that Rules 1a and 1b can be replaced by Rules 1a’ and 1b’, we proceed
analogously to Lemma 5.
Note that, when using Rules Rules 1a’ and 1b’, whenever the flag ➯ is raised, only such
game states can be reached in a dialogue, in which your tenet contains the atomic proposition
1. The reason for this is as follows: By rule 1b’, the formula 1 is added to your tenet, when
the flag ➯ gets raised. The only way 1 can disappear from your tenet is by rule 1a’ if I
challenge your attack. In this case the flag ➯ is unraised. Therefore, in the following we will
only regard winning conditions, which can possibly be reached in a dialogue.
The definition of the winning condition has to be changed in the two cases where the
attacked formula is an implication:
W&apos;,&gt; [1&apos; 1 A --&gt; B, Δ] ⇐⇒ W,&gt;&apos;[1&apos; 1 Δ] and either W&apos;,&gt;[1&apos;, A 1 B, Δ] or W6,&gt; [A 1 1]
W&apos;,&gt; [1&apos;, A --&gt; B 1 Δ] ⇐⇒ W,&gt;&apos;[1&apos; 1 Δ] or both W&apos;,&gt;[1&apos;, B 1 A, Δ] and W&lt;,&gt; [1 1 A]
For rule 1a’ we have to prove that
</bodyText>
<listItem confidence="0.280197">
(1&apos; 1 A --&gt; B, Δ),&gt; a 0 ⇐⇒ W&apos;. [1&apos; 1 Δ] and either W.&apos;[1&apos;, A 1 B, Δ] or W6,&gt; [A 1 1]
</listItem>
<page confidence="0.970341">
57
</page>
<figure confidence="0.4788994">
4.4. Alternative Rules 4. Extending Giles’s Game to Other Logics
i.e., by the induction hypothesis, that
hΓ 1 A → B, Δi° &lt; 0 ⇐⇒ hΓ 1 Δi° &lt; 0 and either hΓ, A 1 B, Δi° &lt; 0 or hA 1 ⊥i° &lt; 0. (4.7)
As before, we have to distinguish two cases:
(a) Assume that v°(A) &lt; v°(B). Equality 4.2, hΓ 1 A → B, Δi° = hΓ 1 Δi°, still holds. We
</figure>
<figureCaption confidence="0.347836">
prove both directions of Equivalence 4.7 separately: The direction “⇐” does clearly
hold because if the conjunction holds, then the left hand side must also hold, and by
Equality 4.2 the left hand side of the implication then holds as well.
</figureCaption>
<bodyText confidence="0.868323">
We still have to prove the other direction “⇒”: if v°(A) = 0 holds, then also hA 1 ⊥i° &lt; 0
holds. Again, by Equality 4.2 the implication is clearly fulfilled.
</bodyText>
<table confidence="0.887906882352941">
If v°(A) &gt; 0 then the implication
hΓ 1 A → B, Δi° &lt; 0 implies hΓ, A 1 B, Δi° &lt; 0 (4.8)
holds for Π because of the following two facts:
hΓ 1 A → B, ΔiΠ = hΓ 1 ΔiΠ = � �vΠ(G) − vΠ(D)
GEΓ DEΔ
Y Y
&gt; vΠ(G) − vΠ(B)
GEΓ vΠ(A) · vΠ(D),
DEΔ
and, building on that: �
� vΠ(G) − vΠ(B)
hΓ 1 A → B, ΔiΠ &lt; 0 ⇒ vΠ(A) · vΠ(D) &lt; 0
GEΓ DEΔ
� � vΠ(D) &lt; 0
⇐⇒ vΠ(A) · vΠ(G) − vΠ(B) ·
GEΓ DEΔ
⇐⇒ hΓ, A 1 B, ΔiΠ &lt; 0.
</table>
<bodyText confidence="0.7960364">
For G we have to take into account at this point that some game states are not
reachable in a dialogue as mentioned above. Consider for example four atomic variables
a, b, g, d with the valuation v(a) = 0.5, v(b) = 0.5, v(g) = 0.8, v(d) = 0.9. The extended
evaluation function for G for the game state [g 1 a → b, d] where the flag ➯ is raised
then gives us hg 1 a → b, diG = 0.1 −0.2 = −0.1 &lt; 0. On the other hand, the inequation
</bodyText>
<page confidence="0.992339">
58
</page>
<subsectionHeader confidence="0.465689">
4.4. Alternative Rules 4. Extending Giles’s Game to Other Logics
</subsectionHeader>
<bodyText confidence="0.9896096">
hg, a 1 b, diG = 0 &lt; 0 is not fulfilled and, consequently, Implication 4.8 does not hold.
Note that the game states [g 1 a → b, d] and [g, a 1 b, d], both with the flag ➯ being
raised, are such game states which can not be reached.
For proving Implication 4.8 we therefore assume that, whenever the flag ➯ is raised
(which corresponds to requiring hΓ 1 A → B, ΔiG to be strictly less than 0), then
</bodyText>
<table confidence="0.843436916666667">
minG∈Γ vG(G) = 0 holds.
hΓ 1 A → B, ΔiG &lt; 0 ⇐⇒ min C I
G∈Γ vG(G) − min vG(A → B), min
D∈Δ vG(D) &lt; 0
⇐⇒ − min vG(D) &lt; 0
D∈Δ
C I
(as 0 &lt; vG(B)) ⇒ − min vG(B), min
D∈Δ vG(D) &lt; 0
C I C I
⇐⇒ min vG(A), min
G∈Γ vG(G) − min vG(B), min
D∈Δ vG(D) &lt; 0
⇐⇒ hΓ, A 1 B, ΔiG &lt; 0
hΓ 1 A → B, ΔiG &lt; 0 ⇐⇒ min C I
G∈Γ vG(G) − min vG(A → B), min
D∈Δ vG(D) &lt; 0
⇐⇒ min vG(G) − min vG(D) &lt; 0
G∈Γ D∈Δ
C I C I
(as 0 &lt; vG(A) &lt; vG(B)) ⇒ min vG(A), min
G∈Γ vG(G) − min vG(B), min
D∈Δ vG(D) &lt; 0
⇐⇒ hΓ, A 1 B, ΔiG &lt; 0
</table>
<tableCaption confidence="0.346832666666667">
(b) On the other hand, if v°(A) &gt; v°(B) we can proceed exactly as we did in the proof of
Lemma 5 for rule 1a.
Next, for rule 1b’ we analogously have to prove that
</tableCaption>
<bodyText confidence="0.763684">
hΓ, A → B 1 Δi° &lt; 0 ⇐⇒ W&apos;°[Γ 1 Δ] or both Wö [Γ, B 1 A, Δ] and W&lt;° [⊥ 1 A]
i.e., by the induction hypothesis, that
hΓ, A → B 1 Δi° &lt; 0 ⇐⇒ hΓ 1 Δi° &lt; 0 or both hΓ, B 1 A, Δi° &lt; 0 and h⊥ 1 Ai° &lt; 0. (4.9)
As before, we have to distinguish two cases:
</bodyText>
<page confidence="0.991726">
59
</page>
<subsubsectionHeader confidence="0.364919">
4.4. Alternative Rules 4. Extending Giles’s Game to Other Logics
</subsubsectionHeader>
<bodyText confidence="0.906747">
(a) Let us assume that v°(A) &lt; v°(B). Then Equality 4.5, hΓ, A → B 1 Δi° = hΓ 1 Δi°, still
holds. Let us prove both directions of the equivalence separately: The direction “⇒”
does clearly hold because, if the left hand side of the implication holds, then by the
equality mentioned the left hand side of the disjunction also holds and, thus, the whole
right hand side of the implication holds as well.
We still have to prove the other direction “⇐”: If v°(A) = 0, the term h⊥ 1 Ai° &lt; 0
will be false and, again, by the equivalence the implication is clearly fulfilled.
If v°(A) &gt; 0 ,then h⊥ 1 Ai° holds. We prove that hΓ, B 1 A, Δi° &lt; 0 ⇒ hΓ, A → B 1 Δi° &lt; 0
holds as follows:
hΓ, B 1 A, ΔiΠ &lt; 0 ⇐⇒ vΠ(B) · H vΠ(G) − vΠ(A) · H vΠ(D) &lt; 0
</bodyText>
<equation confidence="0.923757333333333">
GEΓ DEΔ
vΠ(B) H Y
⇐⇒ vΠ(A) · vΠ(G) − vΠ(D) &lt; 0
GEΓ DEΔ
⇒1 · H HvΠ(G) − vΠ(D) &lt; 0
GEΓ DEΔ
⇐⇒ hΓ 1 ΔiΠ &lt; 0
⇐⇒ hΓ, A → B 1 ΔiΠ &lt; 0
C I ( I
</equation>
<table confidence="0.774143142857143">
hΓ, B 1 A, ΔiG &lt; 0 ⇐⇒ min vG(B), min
GEΓ vG(G) − min vG(A), min
DEΔ vG(D) &lt; 0
⇒ min vG(G) − min vG(D) &lt; 0
GEΓ DEΔ
⇐⇒ hΓ 1 ΔiG &lt; 0
⇐⇒ hΓ, A → B 1 ΔiG &lt; 0
</table>
<bodyText confidence="0.987099285714286">
Together with the equality mentioned before we can now establish the direction “⇐”
of Equivalence 4.9.
(b) On the other hand, if v°(A) &gt; v°(B) we can proceed exactly as we did in the proof
before for rule 1b when taking into account that W&lt;° [B 1 A] being true implies that
also W&lt;° [⊥ 1 A] holds.
Again, note that this version of Giles’s Game is still adequate for Lukasiewicz Logic L.
The proof is completely analogous to the one for Π and G.
</bodyText>
<page confidence="0.985536">
60
</page>
<tableCaption confidence="0.231471">
4.5. Rules for Other Connectives 4. Extending Giles’s Game to Other Logics
</tableCaption>
<subsectionHeader confidence="0.825129">
4.5 Rules for Other Connectives
</subsectionHeader>
<bodyText confidence="0.9998874375">
In contrast to Lukasiewicz Logic, where we were able to derive a game rule for strong
conjunction by expanding propositions of the form A&amp;B and analyzing the resulting game
tree, there is generally no such expansion for all t-norm based fuzzy logics and especially not
for Gödel Logic G and Product logic Π.
What can be done, is to define a game rule for strong conjunction and then to prove this
rule the same way as the other game rules for Π and G. Not really surprisingly, we do not
even have to invent a new rule, we will see that we can instead use the same rule we obtained
for Lukasiewicz Logic L. This rule states that a player asserting a proposition of the form
A&amp;B has to either assert both A and B or to assert L. The player’s choice to discard both
A and B and instead to assert L ensures the principle of limited liability, that is to provide
a strategy where the player asserting A&amp;B will in no case lose more then ➾ 1 in the long
run. When dealing with G and Π this choice is no longer necessary as for both this logics
the principle of limited liability is already guaranteed by the betting and evaluation scheme
regardless of the final game state. On the other hand, leaving the rule as it is does no harm
to G and Π and the resulting game still is suitable for L as well.
The winning conditions for propositions of the form A&amp;B are, by the game rule, given by:
</bodyText>
<equation confidence="0.603403">
W&apos;° [Γ 1 A&amp;B, 0] ⇐⇒ W&apos;° [Γ 1 A, B, 0] or W&apos;° [Γ 1 L, 0]
W&apos;° [Γ, A&amp;B 1 0] ⇐⇒ W&apos;°[Γ, A, B 1 0] and W&apos;°[Γ, L 1 0].
</equation>
<bodyText confidence="0.984106">
For proving that the extended evaluation function for game states is still adequate after
adding this rule, we need to prove that:
</bodyText>
<equation confidence="0.597796">
(Γ 1 A&amp;B, 0)° a 0 ⇐⇒ W&apos;° [Γ 1 A&amp;B, 0]
(Γ, A&amp;B 1 0)° a 0 ⇐⇒ W&apos;° [Γ, A&amp;B 1 0]
</equation>
<bodyText confidence="0.771643333333333">
This amounts to showing that:
(Γ 1 A&amp;B, 0)° a 0 ⇐⇒ (Γ 1 A, B, 0)° a 0 or (Γ 1 L, 0)° a 0
(Γ, A&amp;B 1 0)° a 0 ⇐⇒ (Γ, A, B 1 0)° a 0 and (Γ, L 1 0)° a 0
</bodyText>
<page confidence="0.973293">
61
</page>
<figure confidence="0.77362548">
4.5. Rules for Other Connectives 4. Extending Giles’s Game to Other Logics
The first statement is entailed by the following facts:
(Γ 1 A&amp;B, Δ)Π = H vΠ(G) − vΠ(A&amp;B) • H vΠ(D)
GEΓ DEΔ
H= vΠ(G) − vΠ(A) • vΠ(B) • H vΠ(D) = (Γ 1 A, B, Δ)Π
GEΓ DEΔ
(Γ 1 A&amp;B, Δ)G = min C I
GEΓ vG(G) − min vG(A&amp;B), min
DEΔ vG(D)
and
Hmin min (vG(A), vG(B)) ,
DEΔ
!vΠ(D) = (Γ 1 A, B, Δ)G
= min
GEΓ
vG(G) −
(Γ 1 1, Δ)Π = H vΠ(G) − 0
GEΓ
&gt; H vΠ(G) − vΠ(A&amp;B) • H vΠ(D) = (Γ 1 A&amp;B, Δ)Π
GEΓ DEΔ
(Γ 1 1, Δ)G = min vG(G) − 0
GEΓ
&gt; min C I
GEΓ vG(G) − min vG(A&amp;B), min
DEΔ vG(D) = (Γ 1 A&amp;B, Δ)G.
</figure>
<bodyText confidence="0.944289833333333">
For the second statement we can proceed completely analogous.
Based on the game rule for strong conjunction it is possible to use games for proving
equivalences valid for G, Π and L, just as we did for Lukasiewicz logic. The result will be,
however, slightly weaker than before: All we are able to prove using the extended game rules
is that if one proposition evaluates to 1 then the other one does so as we. We will not be able
to prove that the truth value of two propositions actually is the same under all valuations.
</bodyText>
<page confidence="0.986248">
62
</page>
<note confidence="0.7305695">
“If life doesn’t oller a game worth playing, then invent a new one.”
Anthony J. D’Angelo
</note>
<sectionHeader confidence="0.702394" genericHeader="method">
CHAPTER 5
</sectionHeader>
<subsectionHeader confidence="0.756197">
Truth Comparison Games
</subsectionHeader>
<bodyText confidence="0.993887529411765">
In contrast to Lukasiewicz Logic and Product Logic the truth values of formulas in Gödel
Logic only depend on the relative order of the values assigned to its atomic subformulas. I.e.,
only order comparisons, but no arithmetic operations, have to be performed for evaluation
in G.
Because of this property it is possible to define dialogue games for G other than the
extension of Giles’s Game treated in the previous section, which correspond more closely to
the degree based semantics of G. Such a game, called truth comparison game is presented
in [FP03]. In contrast to Giles’s Game, which is primarily an evaluation game, it is not
necessary to assign any truth values to atomic propositions in advance (nor to define an
order on them). Moreover, this game makes it possible to extract counter-models to a
formula from the opponent’s winning strategies as well as to transform winning strategies
for the proponent into proofs.
In the following we will sketch the game rules of that game and describe how winning
strategies either for the proponent or the opponent can be further exploited.
The game is based on stating assertions, which are of the form A &lt; B where A and B are
arbitrary formulas and &lt; is either &lt; or &lt;. Stating ”A &lt; B“ means, intuitively, that the
player believes that the truth value of A is less than the truth value of B (and, of course,
</bodyText>
<page confidence="0.997244">
63
</page>
<sectionHeader confidence="0.606065" genericHeader="method">
5. Truth Comparison Games
</sectionHeader>
<bodyText confidence="0.997839">
A &lt; B for the truth value of A being less than or equal to the one of B).
If we want to state that a formula F is satisfiable, this is formalized as stating that there
exists an interpretation where T &lt; F holds. If we want to state that F is unsatisfiable, this
is formalized as stating that each interpretation F &lt; T holds. The main idea for this game
is now that any logical connective o of G can be characterized via an adequate response by
player O to the other player P’s attack on O’s claim that a statement of the form (A o B) &lt; C
or C &lt; (A o B) holds, where &lt; is either &lt; or &lt; and o is a (binary) connective.
For describing the game we use the following definitions:
</bodyText>
<listItem confidence="0.999590333333333">
• An assertion F &lt; G is called atomic if both F and G are atoms.
• An assertion that is not atomic is called a compound assertion
• Atomic assertions of the form a &lt; a, a &lt; L, T &lt; a or T &lt; L are called elementary
contradictions. These are assertions which are false regardless of the interpretation.
• A set of two assertions of the form {e &lt;1 e, e &lt;2 g}, where e,g and g are atoms and
&lt;1, &lt;2 E {&lt;, &lt;} is called an elementary order claim.
</listItem>
<bodyText confidence="0.9999362">
The game starts with the proponent P’s initial claim that a formula F is valid. In return
the other player, called the opponent O, contradicts P’s by asserting F &lt; T. This can
informally be seen as O believing that there exists an interpretation v such that vG(F) yields
a truth value lesser than 1, in other words, that F is not valid.
From that point on each round of the game consists of two steps:
</bodyText>
<listItem confidence="0.913303333333333">
1. P chooses and attacks either a compound assertion or an elementary order claim from
the set of assertions made by O so far in the game, but that have not yet been attacked
by P.
2. O answers to this attack by adding a set of assertions according to the rules of Table
5.1. Note that, in some cases O can choose between two answers, while in other cases,
there is no such choice for O.
</listItem>
<bodyText confidence="0.999454">
If O asserts an elementary contradiction at any point in the game, the game ends and P
is declared the winner of the game. Such a node containing an elementary contradiction is
called a winning node for P. Otherwise, O wins if there is no further possible attack for P.
Since this game can be seen as a zero-sum game with perfect information, the saddle point
theorem states that there exists a winning strategy for either O or P. [FP03] proves that a
</bodyText>
<page confidence="0.979093">
64
</page>
<figure confidence="0.996316">
5. Truth Comparison Games
P attacks: O asserts as answer:
A ∧ B &lt; C {A &lt; C} or {B &lt; C}
C &lt; A ∧ B {C &lt; A, C &lt; B}
A ∨ B &lt; C {A &lt; C, B &lt; C}
C &lt; A ∨ B {C &lt; A} or {C &lt; B}
A A B &lt; C {B &lt; A, B &lt; C}
C &lt; A A B {C &lt; B} or {A &lt; B, C &lt; T}
A A B &lt; C {T &lt; C} or {B &lt; A, B &lt; C}
C &lt; A A B {A &lt; B} or {C &lt; B}
P attacks: O asserts as answer:
{A &lt; B, B &lt; C} {A &lt; C}
{A &lt; B, B &lt; C} {A &lt; C}
{A &lt; B, B &lt; C} {A &lt; C}
</figure>
<tableCaption confidence="0.6578535">
with &lt; denoting either &lt; or &lt; consistently through each line.
Table 5.1: Game Rules for the Truth Comparison Game
</tableCaption>
<bodyText confidence="0.989493368421053">
formula F is valid exactly P has such a winning strategy for the corresponding game starting
with P claiming F.
Such a strategy can be modeled as a dialogue tree. This is a tree, where each node is
labeled either as an O-node (together with the set of assertions stated by O at that point
in the game) or as a P-node (together with the assertion attacked by P). The root node is
an exception to this scheme: It is labeled as a P-node together with the assertion claimed
by P to be true. On each path from the root to a leaf in this tree, O-nodes and P-nodes
alternate. Since by attacking a compound assertion, only assertions which are less complex
(i.e.: they have fewer connectives than the formula attacked) and since compound assertions
and elementary order claims can be attacked at most once, a dialogue tree is always finite.
Winning strategies for O
A winning strategy for O can be seen as such a dialogue tree where each P-node has exactly
one child, each O-node has a child P-node for each attack which P can issue at that point
in the game (or is a leaf node, if no attack is possible for P) and no leaf node is a winning
node for P.
In [FP03] it is shown, that it is possible to extract counter-models from winning strategies
for O as well as to find winning strategies for O induced by counter-models. In particular, one
can show that the leaf nodes of a winning strategy for O represent a complete specification
of all counter models to the formula at the root node.
</bodyText>
<page confidence="0.987187">
65
</page>
<subsectionHeader confidence="0.334146">
5.1. Extending G by Additional Operators 5. Truth Comparison Games
</subsectionHeader>
<bodyText confidence="0.992987277777778">
Winning strategies for P
Similarly, a winning strategy for P can be seen as such a dialogue tree where each O-node is
either a winning node for P or has exactly one child and each P-node as a child O-note for
each possible answer to P’s attack by O. For example, Figure 5.1 shows a winning strategy
for P for the truth comparison game starting with P claiming (A ∧ B) —&gt; (B ∧ A) to be
valid1. At each P-node (except the root) the side of the assertion which is being attacked is
underlined. Otherwise, an attack would be ambiguous, if both the left and the right hand
side of that assertion consisted of a compound formula2. In the course of this thesis a small
application, tcgame, has been implemented, which computes winning strategies for P (if
there are any) draws a graph showing the strategy. Figure 5.1 has, as an example, been
generated using tcgame. More about tcgame can be found in section 6.4.
It is possible to construct a complete dialogue tree for a game, which is a dialogue tree in
which at every node for each possible move in the game at that point a corresponding child
node exists. It is possible as well to show that such a complete dialogue tree either contains
a winning strategy for O or for P as a subtree sharing the same root node.
Moreover, in [FP03] a calculus based on relational hypersequents is presented, which is
sound and complete for G. The interesting point here is that there exists a one-to-one
correspondence between winning strategies for P and proofs in this calculus.
</bodyText>
<subsectionHeader confidence="0.993593">
5.1 Extending G by Additional Operators
</subsectionHeader>
<bodyText confidence="0.7509365">
We can observe that in G there exists no formula Fa, a E {&lt;, &lt;} with occurrences of proposi-
tional variables A and B such that for all interpretations:
VG(F,) = ⎧ 1 if VG(A) a VG(B)
⎨ 0 otherwise
⎩
holds. This means that we cannot fully express the natural order on truth degrees within G
itself.
In order to make G more powerful, we can define two unary connectives 0 and V which
</bodyText>
<footnote confidence="0.995079">
1In [FP03] such a such a winning strategy is sketched for the formula (A —&gt; B) ∨ (B —&gt; A). Note that the
corresponding illustration actually does not show a winning strategy for P; the second O-node would be
required to have only one child node for that purpose.
2Note that in [FP03] this information is not explicitly included in the label attached to a P-node. In order
to know which side of the assertion has been attacked, one would need to take a look at the next O-node
and find out to which attack the answer fitted.
</footnote>
<page confidence="0.690345">
66
</page>
<figure confidence="0.99544">
5.1. Extending G by Additional Operators 5. Truth Comparison Games
P ((a ∧ b) → (b ∧ a))
O {((a ∧ b) → (b ∧ a)) &lt; T}
P ((a ∧ b) → (b ∧ a)) &lt; T
O {(b ∧ a) &lt; (a ∧ b), (b ∧ a) &lt; T}
P (b ∧ a) &lt; (a ∧ b)
{(b ∧ a) &lt; T, b &lt; (a ∧ b)} O
b &lt; (a ∧ b) P
{(b ∧ a) &lt; T, b &lt; a,
O {(b ∧ a) &lt; T, a &lt; (a ∧ b)}
P a &lt; (a ∧ b)
b &lt; b } O O {(b ∧ a) &lt; T, a &lt; a
, a &lt; b}
</figure>
<figureCaption confidence="0.97249">
Figure 5.1: Winning strategy for P for the game starting with (a ∧ b) → (b ∧ a)
</figureCaption>
<page confidence="0.836559">
67
</page>
<figure confidence="0.9724272">
5.1. Extending G by Additional Operators 5. Truth Comparison Games
accomplish exactly that:
v(4A) = ⎧ 1 if v*(A) = 1 and v(5A) = ⎧ 1 if v*(A) =6 0
⎨ 0 otherwise ⎨ 0 otherwise
⎩ ⎩
</figure>
<bodyText confidence="0.9817225">
(Note that the 5 connective could as well have been defined in G as 5A := ¬¬A, but for
4 this is not possible.)
By adding the 4 connective to G, it is possible to find formulas F&lt; and F &lt; as specified
above: The formula
</bodyText>
<equation confidence="0.984092333333333">
F�&lt; := 4(A → B)
evaluates to 1 if A &lt; B and to 0 otherwise, and the formula
F&lt; := 4((B → A) → B) ∧ ¬(4A)
</equation>
<bodyText confidence="0.993756666666667">
accomplishes the same for &lt;.
The new connective 4 can be characterized using the truth comparison game presented
in this section by adding the following rules in table 5.2 to the game rules. This allows the
proponent to attack assertions involving the 4 connective. (As 5F is equivalent to ¬¬F for
any formula F, this connective can already be characterized by the game without introducing
new rules.)
</bodyText>
<table confidence="0.897193833333333">
P attacks: O asserts as answer:
4A &lt; C {A &lt; &gt;, ⊥ &lt; C}
C &lt; 4A {&gt; &lt; A, C &lt; &gt;}
4A &lt; C {A &lt; &gt;} or {⊥ &lt; C}
C &lt; 4A {&gt; &lt; A} or {C &lt; ⊥}
where &lt; is either &lt; or &lt;.
</table>
<tableCaption confidence="0.901243">
Table 5.2: Game Rules for the Extended Truth Comparison Game
</tableCaption>
<page confidence="0.920346">
68
</page>
<table confidence="0.529406">
“The game is up.”
William Shakespeare, “Cymbeline”
</table>
<sectionHeader confidence="0.519727" genericHeader="method">
CHAPTER 6
</sectionHeader>
<subsectionHeader confidence="0.741519">
Implementation of Giles’s Game
</subsectionHeader>
<bodyText confidence="0.999829222222222">
In the context of this thesis four utilities have been implemented. In the following these
applications as well as their usage are documented.
The first application, Webgame, runs on any web browser capable of executing JavaScript
code. The other three applications are implemented in Haskell, a purely functional program-
ming language1. As a compiler, the Glasgow Haskell Compiler2 is used. For executing, a
standard Unix-like environment is required, however they also work under Microsoft Win-
dows using the Cygwin environment3.
Binaries for Linux and Windows as well as the source code can be downloaded from
http://www.logic.at/people/roschger/thesis.
</bodyText>
<subsectionHeader confidence="0.98294">
6.1 Webgame
</subsectionHeader>
<bodyText confidence="0.979787666666667">
Webgame is a web-based application which allows to play Giles’s Game and its variants
for Product Logic and Gödel Logic. After playing the game the evaluation of the final
game state is simulated. Therefore probability values are assigned to the experiments
</bodyText>
<footnote confidence="0.999973666666667">
1see http://haskell.org
2see http://www.haskell.org/ghc/
3see http://www.cygwin.com/
</footnote>
<page confidence="0.987516">
69
</page>
<subsectionHeader confidence="0.626791">
6.1. Webgame 6. Implementation of Giles’s Game
</subsectionHeader>
<bodyText confidence="0.882339666666667">
corresponding to all atomic propositions. Then arbitrarily many runs of the evaluation
can be performed and the average loss is displayed. Webgame can be played online at
http://www.logic.at/people/roschger/thesis/webgame/.
</bodyText>
<figureCaption confidence="0.764824">
Figure 6.1: Step 1: Choosing the Logic
</figureCaption>
<bodyText confidence="0.999934653846154">
The game is divided into five steps which are explained below. At any point in the game
it is possible to go back to a former step. In some situations it is necessary to cancel the
current game; in this case a warning is issued before stepping back. As an example the
current dialogue has to be abandoned if one wants to change the initial game state or the
logic determining the game rules. On the other hand, when evaluating a final game state
and one wants to change only the probability values assigned to atomic experiments this can
be done without replaying the complete dialogue (although the evaluation of the final game
state so far will be dismissed of course).
The first step of the game consists of choosing one of Lukasiewicz Logic, Product Logic,
or Gödel Logic as seen in Figure 6.1. This choice affects the game rules, the evaluation
scheme and in some cases how connectives are eliminated (see below). Additionally, there is a
checkbox, “Don’t use special characters in formulas”. By checking this, no special characters
will be used when displaying formulas. Instead, formulas will be displayed exactly as they
have been typed by the user. A user will choose this option if his web browser uses a font
which does not support the special characters used for various connectives and symbols.
Figure 6.2 shows a screen shot of Step 2. Here the user can choose the initial game state.
A formula can be added to either my our your initial tenet by typing it into the text field and
choosing either “for me” or “for you”. When typing formulas, the notation to be used for
the connectives as well as for the constants T, L and atomic propositions is displayed below
the input field. If the checkbox in Step 1 was not checked then the symbols for connectives
are instantly replaced by the corresponding symbols according to Table 6.1. Once a formula
has been added to the initial game state, it can be edited and deleted by clicking on it. This
removes the formula from the game state and displays it in the input field.
When the checkbox “eliminate connectives” is checked, all connectives are eliminated as
possible. The truth constant T is replaced by L --&gt; L. For Lukasiewicz Logic only --&gt; and L
will be left (see Definition 3 and Lemma 3). Moreover, max-disjunction A ∨ B is eliminated
</bodyText>
<page confidence="0.936904">
70
</page>
<figure confidence="0.88678">
6.1. Webgame 6. Implementation of Giles’s Game
</figure>
<figureCaption confidence="0.990115">
Figure 6.2: Step 2: Choosing an Initial Game State
</figureCaption>
<bodyText confidence="0.720307789473684">
Input as Displayed as
min conjunction &amp; ∧
strong conjunction &amp;&amp; O
max disjunction  |∨
strong disjunction  ||⊕
implication -&gt; →
negation - ¬
falsum 0 ⊥
verum 1 T
Table 6.1: Notation Used in Webgame
by ((A → B) → B) as shown in Section 2.3.
Next, in Step 3, the user has to give valuations for all atomic propositions (except ⊥ and
T) which occur in the initial game state. These valuations give the success probability of an
experiment associated with the corresponding atomic proposition. These probability values
will be used when simulating the evaluation of an atomic game state in Step 5.
In Step 4 the dialogue game itself is played finally. The tenets of both players are displayed.
Below the available moves for both players are listed (see screen shot 6.4(a)). If the mouse
pointer hovers over a button for doing a move, the corresponding formula is highlighted in
the tenet. If the move involves a min-conjunction or max-disjunction, the chosen formula
</bodyText>
<page confidence="0.973183">
71
</page>
<figure confidence="0.879057">
6.1. Webgame 6. Implementation of Giles’s Game
</figure>
<figureCaption confidence="0.984825">
Figure 6.3: Step 3: Probabilities for Atomic Experiments
</figureCaption>
<bodyText confidence="0.995357111111111">
additionally is underlined.
When Product Logic or Gödel Logic have been selected in Step 1, implications are attacked
as described in Rules 1a and 1b. In this case there are only two possibilities for the following
move: the attacked player has to choose whether to challenge the attack or not. If an attack
is challenged and the flag ➯ is raised, this is indicated by the symbol ➯ on the right side of
the tenet.
Using the “Undo last move” button it is always possible to go back in the game. This
also works multiple times, one can always get back as far as to the initial state. Using the
“Redo move” button the game can replayed after undoing one or more moves.
Eventually, at some point in the game only atomic propositions are left in the players’
tenets. Then the button “Next Step: Evaluation” is activated as screen shot 6.4(b) shows.
Clicking it, we reach Step 5.
In Step 5 the final game state reached in Step 4 is evaluated. For Lukasiewicz Logic the
risk values for both players are calculated and displayed; for Product Logic and Gödel Logic
the expect gain is used instead. Additionally the evaluation using dispersive experiments
can be simulated: for each atomic proposition in the final game the outcome of the associ-
ated experiment is determined using a random number generator. The probability of each
experiment to succeed is equal to the probability value given in Step 3.
Using the buttons at the bottom the evaluation can be repeated several times. My average
gain or loss is displayed; one can see that it approaches the difference of the risk values
(respectively expected gain) calculated for both players. Screen shot 6.5 shows a repeated
evaluation of the final game state.
When repeating the evaluation very often, this can easily slow down the application. The
reason is that, at some point, the table showing the outcomes gets too large. Thus, when
the checkbox “Do not display evaluations” is checked, the outcomes of the experiments are
not displayed in that table. Instead, only my average gain (respectively loss) is calculated
and displayed.
</bodyText>
<page confidence="0.958306">
72
</page>
<figure confidence="0.785599">
6.2. Giles 6. Implementation of Giles’s Game
</figure>
<figureCaption confidence="0.943527">
Figure 6.4: Step 4: Playing the Game
</figureCaption>
<subsectionHeader confidence="0.996568">
6.2 Giles
</subsectionHeader>
<bodyText confidence="0.997609888888889">
giles is a small program implemented in Haskell. Its main purpose is to visualize game
trees of Giles’s Game for Lukasiewicz Logic. The output of the Haskell program is a dot-file
to be further processed by the Graphviz-tools4. These tools help drawing graphs by trying to
layout them as planarly as possible and providing many output formats such as postscript,
png, or svg.
giles is invoked at the command prompt. Provided with a formula A it will generate a
game tree for Giles’s Game starting in the game state [ |A]. The edges of this game tree are
labeled with the corresponding moves.
If there are several compound assertions present in a game state, giles will pick one of
</bodyText>
<footnote confidence="0.998566">
4see http://www.graphviz.org/
</footnote>
<page confidence="0.994054">
73
</page>
<figure confidence="0.998476">
(a) Doing a Move
(b) Reaching a Final Game State
6.2. Giles 6. Implementation of Giles’s Game
</figure>
<figureCaption confidence="0.992987">
Figure 6.5: Step 5: Evaluating the Final Game State
</figureCaption>
<bodyText confidence="0.947850666666667">
Input as
min conjunction /\
strong conjunction &amp;
max disjunction \/
implication -&gt;
falsum 0
</bodyText>
<tableCaption confidence="0.843588">
Table 6.2: Notation Used in Giles
</tableCaption>
<bodyText confidence="0.999630818181818">
these and branch according to the possible successor states. Thus, by taking into account
that the order in which assertions are being attacked does not matter (see Section 3.4), it is
possible to simplify the game tree considerably.
The game tree is then automatically passed to dot, one of the Graphviz-tools. The
resulting postscript file is saved as game.ps.
If invoked without argument, giles prints a usage message explaining the input syntax
and giving some example formulas. Table 6.2 shows the notation for formulas. Note that
there is no explicit symbol for negation; ¬A has to be typed as A -&gt; 0.
Most of the game trees in this thesis have been generated using giles. For example,
Figure 3.6 has been generated by issuing giles &quot;((a -&gt; b) -&gt; b) /\((b -&gt; a) -&gt; a)&quot;
at the command prompt.
</bodyText>
<page confidence="0.958628">
74
</page>
<reference confidence="0.297436">
6.3. Hypseq 6. Implementation of Giles’s Game
</reference>
<subsectionHeader confidence="0.985022">
6.3 Hypseq
</subsectionHeader>
<bodyText confidence="0.999895521739131">
hypseq is small utility which finds and prints derivations of formulas in the hypersequent
calculus rH (see Section 2.6). If invoked with a formula A, hypseq searches for a derivation
with &lt; A as the root hypersequent. hypseq is written in Haskell, its output is LATEX-code
using the bussproofs package5.
For parsing the user input, i.e. the formula to start with, the same Haskell module is used
as for the giles utility above. Therefore, the input syntax is equal to the one described
in Table 6.2. After invoking hypseq the LATEX compiler is executed automatically and the
resulting document is converted to a postscript file. It is saved as proof.ps in the current
directory.
Note that hypseq just provides derivations with atomic hypersequents as axioms. It is
not checked whether these hypersequents are valid as in Definition 7. If there exist multiple
derivations (this occurs when there are multiple rules which can be applied to one relational
hypersequent), internally a complete tree is constructed including all derivations. Before
generating the LATEX output, however, this tree is reduced such that only one derivation
chosen and printed. This final derivation is chosen such that it is the derivation with the
smallest depth, i.e. the shallowest derivation. If there are more than one derivations for
which this applies, one of them is picked.
In Section 2.6 hypersequents are defined as a multiset set of sequents. hypseq instead
treats them as sets of sequents, which means that a sequents can occur at most once in
a hypersequent. This does not change the expressiveness of the calculus, but makes some
proofs more concise.
For example, the derivation tree in Figure 2.4 is generated by hypseq by issuing the
command hypseq &quot;a &amp; (a -&gt; b)&quot; at the command prompt.
</bodyText>
<subsectionHeader confidence="0.95218">
6.4 TCGame
</subsectionHeader>
<bodyText confidence="0.999920166666667">
tcgame was developed for finding and printing winning strategies for the proponent of a
Truth Comparison Game as defined in Chapter 5. Provided with a formula A it searches for
a winning strategy for the proponent of A. The existence of such a strategy can be seen as
a proof of A.
The application is implemented in Haskell, like giles and hypseq. Since in Gödel Logic
min-conjunction and strong conjunction coincide, the latter one can be omitted. Thus the
</bodyText>
<footnote confidence="0.998305">
5see http://www.ctan.org/tex-archive/help/Catalogue/entries/bussproofs.html
</footnote>
<page confidence="0.984884">
75
</page>
<subsectionHeader confidence="0.352978">
6.4. TCGame 6. Implementation of Giles’s Game
</subsectionHeader>
<bodyText confidence="0.996421428571429">
input syntax for formulas is exactly the same as for these two programs with the only
difference that there is no symbol for strong conjunction.
The definition of winning strategies given in Chapter 5 refers to [FP03]. Such a strat-
egy consists of a tree with the starting formula at the root node. It is visualized using
latex and pst-tree, part of the PSTricks package6. The output is saved as a postscript
file tcgame.ps. For example, Figure 5.1 has been generated by issuing the command
tcgame &quot;(a /\b) -&gt; (b /\a)&quot;.
</bodyText>
<footnote confidence="0.998471">
6see http://tug.org/PSTricks/main.cgi/
</footnote>
<page confidence="0.985069">
76
</page>
<sectionHeader confidence="0.521309" genericHeader="method">
Notation used
</sectionHeader>
<bodyText confidence="0.976032111111111">
Atom
The set of all atomic propositions. Atomic propositions are usually denoted using lower
letters, e.g. a, b, c, ....
Prop
The set of all propositions as defined in Definition 3, Prop i) Atom. Compound
propositions are usually denoted using upper letters, e.g. A, B, C, ....
Exper
The set of all yes/no experiments. The experiment associated with the atomic propo-
sition a is denoted as Ea (see Definition 9).
</bodyText>
<equation confidence="0.918534">
fo :
[0, 1]n --&gt; [0, 1]
</equation>
<bodyText confidence="0.625132666666667">
The truth function assigned to the n-ary connective o.
v : Atom --&gt; [0, 1]
The truth value assigned to an atomic proposition.
</bodyText>
<equation confidence="0.829681">
v∗ : Prop --&gt; [0, 1]
</equation>
<bodyText confidence="0.724743">
The truth value assigned to an arbitrary proposition in the fuzzy logic based on the
</bodyText>
<equation confidence="0.8224715">
t-norm *; see Definition 3.
π : Exper --&gt; [0, 1]
</equation>
<bodyText confidence="0.911299">
The subjective probability assigned to an experiment; see definition 13.
</bodyText>
<page confidence="0.969784">
77
</page>
<figure confidence="0.9080337">
6.4. TCGame 6. Implementation of Giles’s Game
[Γ  |Δ]
A game state, where Γ denoting a multiset of formulas asserted by you and Δ denoting
a multiset of formulas asserted by me.
(Γ  |Δ)* for * E { L, G, Π}
My risk value for the game state [Γ  |Δ], i.e. the amount of money I expect to lose
assuming both players acting rationally. See Definition 14.
(A)* for * E { L, G, Π}
The risk value of the game starting in [ |A]. I.e. short for ( |A)*
(Γ  |Δ)* for * E { L, G, Π}
</figure>
<bodyText confidence="0.9315775">
The extension of the evaluation function v* (see Definition 3) to arbitrary game states
as in Definitions 15 and 18.
</bodyText>
<page confidence="0.967323">
78
</page>
<sectionHeader confidence="0.749303" genericHeader="method">
Bibliography
</sectionHeader>
<reference confidence="0.999877631578947">
[Avr91] Arnon Avron. Hypersequents, logical consequence and intermediate logics for
concurrency. Annals of Mathematics and Artificial Intelligence, 4(3):225–248,
1991.
[BF99] Matthias Baaz and Christian G. Fermüller. Analytic calculi for projective logics.
In TABLEAUX ’99: Proceedings of the International Conference on Automated
Reasoning with Analytic Tableaux and Related Methods, pages 36–50, London,
UK, 1999. Springer-Verlag.
[CFM04] Agata Ciabattoni, Christian G. Fermüller, and George Metcalfe. Uniform Rules
and Dialogue Games for fuzzy logics. In Franz Baader and Andrei Voronkov,
editors, LPAR, volume 3452 of Lecture Notes in Computer Science, pages 496–
510. Springer, 2004.
[Dum59] M. Dummett. A propositional calculus with denumerable matrix. J. Symbolic
Logic, 24(2):97–106, 1959.
[EG01] F. Esteva and L. Godo. Monoidal t-norm based logic: towards a logic for left-
continuous t-norms. Fuzzy sets and systems, 124(3):271–288, 2001.
[EGHM03] F. Esteva, L. Godo, P. Häjek, and F. Montagna. Hoops and Fuzzy Logic. Journal
of Logic and Computation, 13(4):532–555, 2003.
[Fer09] Christian G. Fermüller. Revisiting Giles - Connecting Bets, Dialogue Games, and
Fuzzy Logics. In Ondrej Majer, Ahti-Veikko Pietarinen, and Tero Tulenheimo,
</reference>
<page confidence="0.680659">
79
</page>
<reference confidence="0.99627224137931">
Bibliography Bibliography
editors, Games: Unifying Logic, Language, and Philosophy, volume 15 of Logic,
Epistemology and the Unity of Science. Springer, 2009.
[FK06] C.G. Fermuller and R. Kosik. Combining Supervaluation and Degree Based
Reasoning Under Vagueness. Lecture Notes in Computer Science, 4246:212, 2006.
[FP03] Christian G. Fermüller and Norbert Preining. A Dialogue Game for Intuitionistic
Fuzzy Logic Based on Comparisons of Degrees of Truth. In Proceedings of
InTech‘03 (Fourth International Conference on Intelligent Technologies), Chiang
Mai, Thailand, December 2003.
[Gen69] G. Gentzen. Investigations into logical deduction. The Collected Papers of Ger-
hard Gentzen, pages 68–131, 1969.
[Gil74] Robin Giles. A non-classical logic for physics. Studia Logica, 33(4):397–415,
1974.
[Gil82] Robin Giles. Semantics for Fuzzy Reasoning. International Journal of Man-
Machine Studies, 17:401–415, 1982.
[Göd32] K. Gödel. Zum intuitionisticschen Aussagenkalkül. Anzeiger Akademie der Wis-
senschaften Wien, mathematisch-naturwiss. Klasse, 32:65–66, 1932.
[Gog69] J.A. Goguen. The logic of inexact concepts. Synth´ese, 19(3):325–373, 1969.
[Häj02] Petr Häjek. Why fuzzy logic. In Dale Jacquette, editor, A Companion to Philo-
sophical Logic, pages 595–605. Blackwell, Massachusetts, 2002.
[HGE95] Petr Häjek, Lluis Godo, and Francesc Esteva. Fuzzy logic and probability. In
Proceedings of the 11th Annual Conference on Uncertainty in Artificial Intelli-
gence (UAI-95), pages 237–244, San Francisco, CA, 1995. Morgan Kaufmann.
[HGE96] P. Häjek, L. Godo, and F. Esteva. A complete many-valued logic with product-
conjunction. Archive for Mathematical Logic, 35(3):191–208, 1996.
[Hä02] Petr Häjek. Metamathematics of Fuzzy Logic, volume 4 of Trends in Logic.
Springer, 2002.
[KMP00] E.P. Klement, Radko Mesiar, and Endre Pap. Triangular Norms, volume 8 of
Trends in Logic. Springer, 2000.
</reference>
<page confidence="0.570581">
80
</page>
<reference confidence="0.991201368421052">
Bibliography Bibliography
[Lor60] P. Lorenzen. Logik und Agon. In Atti del Congresso Internazionale di Filosofia,
pages 187–194, Firenze, 1960. Sansoni.
[Lor61] P. Lorenzen. Ein dialogisches Konstruktivitätskriterium. In Infinitistic Methods,
pages 193–200, Warszawa, 1961. PWN. Proceed. Symp. Foundations of Math.
[Luk20] J. Lukasiewicz. O logice trojwartosciowej. Ruch Filozoficzny, 5(169-171):32,
1920.
[MOG04] George Metcalfe, Nicola Olivetti, and Dov Gabbay. Analytic Proof Calculi for
Product Logics. Archive for Mathematical Logic, 43(7):859–889, 2004.
[MOG05] George Metcalfe, Nicola Olivetti, and Dov Gabbay. Sequent and hypersequent
calculi for abelian and Lukasiewicz logics. ACM Trans. Comput. Logic, 6(3):578–
613, 2005.
[RJM94] II Robert J. Marks. Fuzzy Logic Technology and Applications I. IEEE Press,
Piscataway, NJ, USA, 1994.
[Sca62] B. Scarpellini. Die Nichtaxiomatisierbarkeit des unendlichwertigen
Prädikatenkalküls von Lukasiewicz. Journal of Symbolic Logic, 27(2):159–
170, 1962.
[Zad96] L.A. Zadeh. The role of fuzzy logic in modeling, identification and control. Fuzzy
Sets, Fuzzy Logic, and Fuzzy Systems: Selected Papers, 1996.
</reference>
<page confidence="0.987">
81
</page>
<table confidence="0.991118">
List of Figures
2.1 Lukasiewicz T-Norm 9
2.2 Gödel T-Norm 11
2.3 Product T-Norm 11
2.4 Sample proof for a&amp;(a --&gt; b) 14
3.1 Game Tree for the Game Starting With (a A b) --&gt; (,b V a) 23
3.2 Game Tree for a&amp;b 33
3.3 Game Tree for aVb 35
3.4 Game Tree for a A b 36
3.5 Game Tree for a&amp;(a --&gt; b) 36
3.6 Game Tree for a V b 37
3.7 Game Tree for ((a --&gt; b) --&gt; b) A ((b --&gt; a) --&gt; a) 42
5.1 Winning strategy for P for the game starting with (a A b) --&gt; (b A a) 67
6.1 Step 1: Choosing the Logic 70
6.2 Step 2: Choosing an Initial Game State 71
6.3 Step 3: Probabilities for Atomic Experiments 72
6.4 Step 4: Playing the Game 73
6.5 Step 5: Evaluating the Final Game State 74
</table>
<page confidence="0.732537">
82
</page>
<table confidence="0.893568333333333">
List of Tables
2.1 T-Norms and Their Residua 8
5.1 Game Rules for the Truth Comparison Game 65
5.2 Game Rules for the Extended Truth Comparison Game 68
6.1 Notation Used in Webgame 71
6.2 Notation Used in Giles 74
</table>
<page confidence="0.991716">
83
</page>
<sectionHeader confidence="0.84054" genericHeader="method">
Index
</sectionHeader>
<reference confidence="0.997997926829268">
analyticity, 14
avowed meaning, 17
Cancellative Hoop Logic, 47
CHL, see Cancellative Hoop Logic
completeness, 13
conditions of admissability, 16
conjunction
min conjunction, 8
strong conjunction, 8
dialogue game rules, 20
dialogue tree, 65
dispersion-free, 17
dispersive, 17
elementary contradiction, 64
elementary order claim, 64
equivalent formulas, 8
equivalent game states, 32
first order Lukasiewicz Logic, 37
flag, 47
frame rules, 20
fuzzy modus ponens, 7
game state, 22
game tree, 23
Giles, Robin, 16
hypersequent system, 12
implication
Gödel, 8
Goguen, 7
Lukasiewicz, 8
Product, 8
interpretation, 8
Intuitionistic Logic, 10
invertible rules, 14
involutive negation, 10
logical identity, 25
Lorenzen, Paul, 18, 20
monoidal t-norm logic, 6
omniscient player, 39
ordinal sum, 6
parametric experiment, 38
principle of limited liability, 19, 20, 61
</reference>
<page confidence="0.806237">
84
</page>
<reference confidence="0.8879708">
Index Index
probability definite, 27
relational hypersequent, 12
relational sequent, 12
residuum, 6
rH, 48
risk value, 27
saddle point theorem, 28, 64
sequent, 12
soundness, 13
subjective probability, 27
subjectively false, 24
subjectively true, 24
t-norm, 5
Gödel, 6
Lukasiewicz, 6
Product, 6
tangible meaning, 17
tenet, 22
truth comparison game, 63
truth functionality, 4
valid formula, 9
valuation, 8
winning condition, 45, 47, 57
zero sum game, 26
</reference>
<page confidence="0.999666">
85
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.000308">
<title confidence="0.823623714285714">Dialogue Games for Fuzzy Logics DIPLOMARBEIT zur Erlangung des akademischen Grades Diplom-Ingenieur im Rahmen des Studiums Computational Intelligence eingereicht von</title>
<author confidence="0.669613">Christoph Roschger</author>
<author confidence="0.669613">Bakk techn</author>
<address confidence="0.592446">Matrikelnummer 0126178</address>
<author confidence="0.777565">an der</author>
<affiliation confidence="0.573675">Fakultät für Informatik der Technischen Universität Wien</affiliation>
<address confidence="0.734213">Betreuer: Ao.Prof.Dipl-Ing.Dr.techn. Christian G. Fermüller Wien, 21.10.2008</address>
<affiliation confidence="0.7001475">(Unterschrift Verfasser) (Unterschrift Betreuer) Technische Universität Wien</affiliation>
<address confidence="0.673443">A-1040 Wien Karlsplatz 13 Tel. +43/(0)1/58801-0 http://www.tuwien.ac.at</address>
<title confidence="0.808597">MASTER THESIS Dialogue Games for Fuzzy Logics</title>
<author confidence="0.294714">Performed at the Department of</author>
<affiliation confidence="0.873847">Computer Languages Vienna University of Technology</affiliation>
<title confidence="0.32195">advised by</title>
<author confidence="0.96992">Christian G Fermüller by Christoph Roschger</author>
<author confidence="0.96992">Bakk techn</author>
<email confidence="0.405843">Erlgasse</email>
<address confidence="0.947328">1120 Wien Vienna, October 2008</address>
<abstract confidence="0.962485142857143">Zusammenfassung Formale Dialogspiele werden schon seit langem dazu verwendet, die Semantik verschiedener Logiken zu charakterisieren. In den 70er Jahren präsentierte Robin Giles seinen Versuch, eine operationale Grundlage für formales Schließen zu definieren, basierend auf atomaren Experimenten, welche Dispersion aufweisen können. Diese Masterarbeit motiviert und beschreibt seinen Ansatz und die Verbindung zu t-Norm-basierten Fuzzy-Logiken. Wir geben eine kurze Einführung in t-Normen und mehrwertige Fuzzy-Logiken, die auf diese Bezug nehmen. Im Speziellen liegt der Schwerpunkt auf drei solchen fundamentalen Fuzzy-Logiken: Lukasiewicz-Logik, Gödel-Logik und Produkt-Logik. Verschiedene Möglichkeiten, die Spielregeln von Giles’ Spiel zu ändern, um dieses adäquat für Gödelund Produkt-Logik zu machen, werden präsentiert und diskutiert. Darüber hinaus beschreiben wir die starke Verbindung zwischen Gewinnstrategien im Spiel und Ableitungen in einem analytischen Kalkül, der auf relationalen Hypersequenten basiert. Eine andere Art von Dialogspielen sind sogenannte “Truth Comparison Games”. Diese sind besonders geeignet für Gödel-Logik, da sie der gradbasierten Semantik der Gödel-Logik mehr entsprechen als Giles’ Spiel. Wir präsentieren das Spiel und diskutieren Gewinnstrategien für beide Spieler, welche als Beweis für die Gültigkeit oder Widerlegbarkeit einer Formel gesehen werden können. Zusätzlich werden mehrere Hilfsprogramme vorgestellt, die im Kontext dieser Masterarbeit entwickelt wurden. Darunter befindet sich auch eine webbasierte Anwendung zur interaktiven Exploration von Giles’ Spiel und dessen Erweiterungen.</abstract>
<email confidence="0.709267">i</email>
<abstract confidence="0.856725166666667">Formal dialogue games are a traditional approach to characterize the semantics of logics. In the 1970s Robin Giles attempted to provide an operational foundation for formal reasoning in physical theories by dialogue games based on atomic experiments that may show dispersion. This thesis motivates, describes and analyzes his approach and the connection to t-norm based fuzzy logics.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>Hypseq 6.</title>
<journal>Implementation of Giles’s Game</journal>
<marker></marker>
<rawString> 6.3. Hypseq 6. Implementation of Giles’s Game</rawString>
</citation>
<citation valid="true">
<authors>
<author>Arnon Avron</author>
</authors>
<title>Hypersequents, logical consequence and intermediate logics for concurrency.</title>
<date>1991</date>
<journal>Annals of Mathematics and Artificial Intelligence,</journal>
<volume>4</volume>
<issue>3</issue>
<contexts>
<context position="25676" citStr="[Avr91]" startWordPosition="4624" endWordPosition="4624">emises and conclusions do not consist of sequents but of finite sets of sequents. There are calculi for many fuzzy logics presented in a framework of hypersequent systems, see, as an example [MOG05], [Avr91], and [MOG04] for hypersequent calculi for L, G, and Π. On the other hand, relational sequents can be seen as a variant of ordinary Gentzen sequents where Gentzen’s sequent arrow h is replaced by othe</context>
</contexts>
<marker>[Avr91]</marker>
<rawString>Arnon Avron. Hypersequents, logical consequence and intermediate logics for concurrency. Annals of Mathematics and Artificial Intelligence, 4(3):225–248, 1991.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Matthias Baaz</author>
<author>Christian G Fermüller</author>
</authors>
<title>Analytic calculi for projective logics.</title>
<date>1999</date>
<booktitle>In TABLEAUX ’99: Proceedings of the International Conference on Automated Reasoning with Analytic Tableaux and Related Methods,</booktitle>
<pages>36--50</pages>
<publisher>Springer-Verlag.</publisher>
<location>London, UK,</location>
<contexts>
<context position="25987" citStr="[BF99]" startWordPosition="4678" endWordPosition="4678">n as a variant of ordinary Gentzen sequents where Gentzen’s sequent arrow h is replaced by other symbols. A relational sequent then may contain one of these symbols instead of the sequent arrow h. In [BF99] such sequents are used in a calculus for G which has, in contrast to the respective hypersequent calculus, invertible rules. In the case of rH, we have two types of sequents where in one Gentzen’s se</context>
</contexts>
<marker>[BF99]</marker>
<rawString>Matthias Baaz and Christian G. Fermüller. Analytic calculi for projective logics. In TABLEAUX ’99: Proceedings of the International Conference on Automated Reasoning with Analytic Tableaux and Related Methods, pages 36–50, London, UK, 1999. Springer-Verlag.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Agata Ciabattoni</author>
<author>Christian G Fermüller</author>
<author>George Metcalfe</author>
</authors>
<title>Uniform Rules and Dialogue Games for fuzzy logics.</title>
<date>2004</date>
<booktitle>of Lecture Notes in Computer Science,</booktitle>
<volume>3452</volume>
<pages>496--510</pages>
<editor>In Franz Baader and Andrei Voronkov, editors, LPAR,</editor>
<publisher>Springer,</publisher>
<contexts>
<context position="24732" citStr="[CFM04]" startWordPosition="4467" endWordPosition="4467">. T-Norm Based Fuzzy Logics 2.6 A Uniform Hypersequent System In this section we present a uniform and analytic proof system for L, G, and Π following A. Ciabattoni, C.G. Fermüller and G. Metcalfe in [CFM04]; we will refer to it as rH. This proof system is based on so-called relational hypersequents or, short, r-hypersequents and features uniform logical rules for L, G, and Π which are invertible. In spi</context>
<context position="28861" citStr="[CFM04]" startWordPosition="5277" endWordPosition="5277">G, or Π then G is derivable in rH from atomic r-hypersequents valid in L, G, or Π respectively. 13 2.6. A Uniform Hypersequent System 2. T-Norm Based Fuzzy Logics For a proof of Theorem 2 we refer to [CFM04]. Note that by Theorem 2 a formula A is valid in L, G, or Π if and only if “&lt; A” is derivable in rH. From Theorem 2 it is easy to prove the following: Theorem 3. The rules of rH are invertible: E.g. i</context>
<context position="30525" citStr="[CFM04]" startWordPosition="5664" endWordPosition="5664">Atomic) a &lt; b 1 a, b &lt; a, b (Atomic) a &lt; b 1 b &lt; a (Atomic) L&lt; b (&amp;, 6, l) (—, &lt;, l) (Atomic) &lt; (—, r) &lt; (a&amp;(a --&gt; b)) --&gt; b a&amp;(a --&gt; b) &lt; b a, a --&gt; b &lt; b Figure 2.4: Sample proof for a&amp;(a --&gt; b) In [CFM04] it is shown that checking an atomic r-hypersequent for validity is polynomial. For Lukasiewicz Logic, for example, this can be done efficiently using linear programming. Checking the validity of an a</context>
<context position="31291" citStr="[CFM04]" startWordPosition="5785" endWordPosition="5785">the definition of these rules, as well as purely syntactic calculi for L,G, and Π together with proofs of soundness and completeness of these calculi (including the calculus defined here) we refer to [CFM04]. If we are only interested in Lukasiewicz Logic we can simplify the rules of rH for decomposing implications without affecting the soundness and the completeness of the calculus. In this case we can </context>
</contexts>
<marker>[CFM04]</marker>
<rawString>Agata Ciabattoni, Christian G. Fermüller, and George Metcalfe. Uniform Rules and Dialogue Games for fuzzy logics. In Franz Baader and Andrei Voronkov, editors, LPAR, volume 3452 of Lecture Notes in Computer Science, pages 496– 510. Springer, 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Dummett</author>
</authors>
<title>A propositional calculus with denumerable matrix.</title>
<date>1959</date>
<journal>J. Symbolic Logic,</journal>
<volume>24</volume>
<issue>2</issue>
<contexts>
<context position="22806" citStr="[Dum59]" startWordPosition="4072" endWordPosition="4072">he same truth value is assigned to both formulas A and A&amp;A. Moreover, the connectives A and &amp; coincide. Kurt Gödel defined a family of finite-valued logics in [Göd32]. G was introduced 1959 by Dummet [Dum59] as the infinite-valued version of these logics. Note that G does not enjoy double negation. Instead, it is easy to see that vG(,A) = ⎧ 1 if vG(A) = 0 ⎨ 0 otherwise ⎩ As for Lukasiewicz Logic, there e</context>
</contexts>
<marker>[Dum59]</marker>
<rawString>M. Dummett. A propositional calculus with denumerable matrix. J. Symbolic Logic, 24(2):97–106, 1959.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Esteva</author>
<author>L Godo</author>
</authors>
<title>Monoidal t-norm based logic: towards a logic for leftcontinuous t-norms. Fuzzy sets and systems,</title>
<date>2001</date>
<volume>124</volume>
<issue>3</issue>
<contexts>
<context position="16568" citStr="[EG01]" startWordPosition="2771" endWordPosition="2771">ct, * does not even have to be continuous. The condition already holds for all leftcontinuous t-norms. The logic based on all left-continuous t-norms is called monoidal t-norm logic or short MTL (see [EG01]). 2Instead of e.g. =&gt;* L we will just write =&gt; L. 6 2.2. T-Norms 2. T-Norm Based Fuzzy Logics There are several reasons suggesting to use the residuum as the truth function for implication: • The res</context>
</contexts>
<marker>[EG01]</marker>
<rawString>F. Esteva and L. Godo. Monoidal t-norm based logic: towards a logic for leftcontinuous t-norms. Fuzzy sets and systems, 124(3):271–288, 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>F Esteva</author>
<author>L Godo</author>
<author>P Häjek</author>
<author>F Montagna</author>
</authors>
<title>Hoops and Fuzzy Logic.</title>
<date>2003</date>
<journal>Journal of Logic and Computation,</journal>
<volume>13</volume>
<issue>4</issue>
<contexts>
<context position="92113" citStr="[EGHM03]" startWordPosition="17240" endWordPosition="17240">we exclude the symbol 1 from our language and evaluate formulas using joint bets, but over the left-open interval (0, 1] instead of [0, 1], we arrive at a logic known as Cancellative Hoop Logic(CHL), [EGHM03]. Note that eliminating 0 and, thus, 1 significantly reduces the expressiveness of the language since negation is defined in terms of 1. There are several ways for introducing new rules in order to ma</context>
</contexts>
<marker>[EGHM03]</marker>
<rawString>F. Esteva, L. Godo, P. Häjek, and F. Montagna. Hoops and Fuzzy Logic. Journal of Logic and Computation, 13(4):532–555, 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christian G Fermüller</author>
</authors>
<title>Revisiting Giles - Connecting Bets, Dialogue Games, and Fuzzy Logics.</title>
<date>2009</date>
<booktitle>In Ondrej Majer, Ahti-Veikko Pietarinen, and Tero Tulenheimo, Bibliography Bibliography editors, Games: Unifying Logic, Language, and Philosophy, volume 15 of Logic, Epistemology and the Unity of Science.</booktitle>
<publisher>Springer,</publisher>
<contexts>
<context position="92402" citStr="[Fer09]" startWordPosition="17291" endWordPosition="17291"> the language since negation is defined in terms of 1. There are several ways for introducing new rules in order to make the game adequate for Π and G. We will first concentrate on the rules given in [Fer09], but we will also describe alternative formulations. In order to remedy the situation, the approach presented in [Fer09] is to introduce an additional flag ➯. The flag ➯ being raised announces that I</context>
<context position="97545" citStr="[Fer09]" startWordPosition="18322" endWordPosition="18322">o formalize strategies for both players of the game and then formally prove the equivalence between these strategies and the according rules of the hypersequent calculus rH defined in section 2.6. In [Fer09], for example, the rules 1a and 1b are derived from the corresponding rules of the hypersequent calculus rH. Here we will go another way: We will directly prove that the game based on the new rules ch</context>
</contexts>
<marker>[Fer09]</marker>
<rawString>Christian G. Fermüller. Revisiting Giles - Connecting Bets, Dialogue Games, and Fuzzy Logics. In Ondrej Majer, Ahti-Veikko Pietarinen, and Tero Tulenheimo, Bibliography Bibliography editors, Games: Unifying Logic, Language, and Philosophy, volume 15 of Logic, Epistemology and the Unity of Science. Springer, 2009.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C G Fermuller</author>
<author>R Kosik</author>
</authors>
<title>Combining Supervaluation and Degree Based Reasoning Under Vagueness.</title>
<date>2006</date>
<journal>Lecture Notes in Computer Science,</journal>
<volume>4246</volume>
<contexts>
<context position="21287" citStr="[FK06]" startWordPosition="3755" endWordPosition="3755">duum of the Lukasiewicz TNorm Figure 2.1: Lukasiewicz T-Norm Theorem 1. Lukasiewicz Logic L is the only logic based on a continuous t-norm where ⇒* is continuous. For a proof of Theorem 1 we refer to [FK06]. Another property of L is that all connectives are definable by the implication → and the constant ⊥. Since the connectives V, A, and , are derived from →, &amp; and ⊥ in Definition 3, the only relevant </context>
</contexts>
<marker>[FK06]</marker>
<rawString>C.G. Fermuller and R. Kosik. Combining Supervaluation and Degree Based Reasoning Under Vagueness. Lecture Notes in Computer Science, 4246:212, 2006.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Christian G Fermüller</author>
<author>Norbert Preining</author>
</authors>
<title>A Dialogue Game for Intuitionistic Fuzzy Logic Based on Comparisons of Degrees of Truth.</title>
<date>2003</date>
<booktitle>In Proceedings of InTech‘03 (Fourth International Conference on Intelligent Technologies),</booktitle>
<location>Chiang Mai, Thailand,</location>
<contexts>
<context position="120709" citStr="[FP03]" startWordPosition="23444" endWordPosition="23444">G other than the extension of Giles’s Game treated in the previous section, which correspond more closely to the degree based semantics of G. Such a game, called truth comparison game is presented in [FP03]. In contrast to Giles’s Game, which is primarily an evaluation game, it is not necessary to assign any truth values to atomic propositions in advance (nor to define an order on them). Moreover, this </context>
<context position="123885" citStr="[FP03]" startWordPosition="24061" endWordPosition="24061">e is no further possible attack for P. Since this game can be seen as a zero-sum game with perfect information, the saddle point theorem states that there exists a winning strategy for either O or P. [FP03] proves that a 64 5. Truth Comparison Games P attacks: O asserts as answer: A ∧ B &lt; C {A &lt; C} or {B &lt; C} C &lt; A ∧ B {C &lt; A, C &lt; B} A ∨ B &lt; C {A &lt; C, B &lt; C} C &lt; A ∨ B {C &lt; A} or {C &lt; B} A A B &lt; C {B &lt; A</context>
<context position="125564" citStr="[FP03]" startWordPosition="24445" endWordPosition="24445"> one child, each O-node has a child P-node for each attack which P can issue at that point in the game (or is a leaf node, if no attack is possible for P) and no leaf node is a winning node for P. In [FP03] it is shown, that it is possible to extract counter-models from winning strategies for O as well as to find winning strategies for O induced by counter-models. In particular, one can show that the le</context>
<context position="127241" citStr="[FP03]" startWordPosition="24750" endWordPosition="24750">responding child node exists. It is possible as well to show that such a complete dialogue tree either contains a winning strategy for O or for P as a subtree sharing the same root node. Moreover, in [FP03] a calculus based on relational hypersequents is presented, which is sound and complete for G. The interesting point here is that there exists a one-to-one correspondence between winning strategies fo</context>
<context position="127904" citStr="[FP03]" startWordPosition="24869" endWordPosition="24869"> otherwise ⎩ holds. This means that we cannot fully express the natural order on truth degrees within G itself. In order to make G more powerful, we can define two unary connectives 0 and V which 1In [FP03] such a such a winning strategy is sketched for the formula (A —&gt; B) ∨ (B —&gt; A). Note that the corresponding illustration actually does not show a winning strategy for P; the second O-node would be re</context>
</contexts>
<marker>[FP03]</marker>
<rawString>Christian G. Fermüller and Norbert Preining. A Dialogue Game for Intuitionistic Fuzzy Logic Based on Comparisons of Degrees of Truth. In Proceedings of InTech‘03 (Fourth International Conference on Intelligent Technologies), Chiang Mai, Thailand, December 2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gentzen</author>
</authors>
<title>Investigations into logical deduction. The Collected Papers of Gerhard Gentzen,</title>
<date>1969</date>
<pages>68--131</pages>
<marker>[Gen69]</marker>
<rawString>G. Gentzen. Investigations into logical deduction. The Collected Papers of Gerhard Gentzen, pages 68–131, 1969.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robin Giles</author>
</authors>
<title>A non-classical logic for physics.</title>
<date>1974</date>
<journal>Studia Logica,</journal>
<volume>33</volume>
<issue>4</issue>
<contexts>
<context position="31939" citStr="[Gil74]" startWordPosition="5921" endWordPosition="5921">f the Philadelphia Phillies CHAPTER 3 Giles’s Game This chapter describes a way of modeling the semantics of fuzzy logics using dialogue games combined with bets, proposed by Robin Giles in the 1970s [Gil74]. We motivate this approach, present the game itself, and show the correspondence between the game and Lukasiewicz Logic. 3.1 Motivation Robin Giles, a physicist and philosopher of science, presented </context>
<context position="37180" citStr="[Gil74]" startWordPosition="6795" endWordPosition="6795">dvantages of using dialogue games to analyze fuzzy logics. The central point here is the fact the logic presented by Giles using dialogue games and bets coincides with Lukasiewicz logic (as proved in [Gil74]). Using dialogue games it is possible to define Lukasiewicz Logic not by a “volatile” axiomatic system but by a dialogue game with commonly avowed rules which seem “reasonable”. Another reason is to </context>
<context position="42865" citStr="[Gil74]" startWordPosition="7734" endWordPosition="7734">sition if attacked by the opponent and ultimately an obligation to pay some money according to the betting scheme being presented in the next section. The following game rules are taken directly from [Gil74]. Note that their formulation is rather informal. One has to keep in mind that each move consists of an attack and an answer to this attack, regardless of the context in the current game. Also note th</context>
</contexts>
<marker>[Gil74]</marker>
<rawString>Robin Giles. A non-classical logic for physics. Studia Logica, 33(4):397–415, 1974.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robin Giles</author>
</authors>
<title>Semantics for Fuzzy Reasoning.</title>
<date>1982</date>
<journal>International Journal of ManMachine Studies,</journal>
<volume>17</volume>
<contexts>
<context position="37701" citStr="[Gil82]" startWordPosition="6875" endWordPosition="6875">conjunction and min-conjunction when used in a dialogue in “real life”?) Although Giles himself originally motivated his dialogue games by physical theories as shown here, in later publications (e.g. [Gil82]), he explicitly speaks of a logic to define grades of membership of fuzzy sets. Note that there is a difference between vague propositions used in fuzzy logics and dispersive physical experiments use</context>
<context position="46093" citStr="[Gil82]" startWordPosition="8317" endWordPosition="8317">serting a conjunction obliges one to assert both conjuncts. However, this requires to allow for admitting falsity in order to maintain the principle of limited liability. Giles motivated this rule in [Gil82] from another perspective. An example dialogue As an example let me assert the proposition (a ∧ b) → (¬b ∨ a) and let you be the opponent playing against me. The multiset of assertions made by a playe</context>
</contexts>
<marker>[Gil82]</marker>
<rawString>Robin Giles. Semantics for Fuzzy Reasoning. International Journal of ManMachine Studies, 17:401–415, 1982.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Gödel</author>
</authors>
<title>Zum intuitionisticschen Aussagenkalkül. Anzeiger Akademie der Wissenschaften</title>
<date>1932</date>
<location>Wien, mathematisch-naturwiss. Klasse, 32:65–66,</location>
<contexts>
<context position="22765" citStr="[Göd32]" startWordPosition="4065" endWordPosition="4065">on the t-norm x *G y = min(x, y). Thus, the same truth value is assigned to both formulas A and A&amp;A. Moreover, the connectives A and &amp; coincide. Kurt Gödel defined a family of finite-valued logics in [Göd32]. G was introduced 1959 by Dummet [Dum59] as the infinite-valued version of these logics. Note that G does not enjoy double negation. Instead, it is easy to see that vG(,A) = ⎧ 1 if vG(A) = 0 ⎨ 0 othe</context>
</contexts>
<marker>[Göd32]</marker>
<rawString>K. Gödel. Zum intuitionisticschen Aussagenkalkül. Anzeiger Akademie der Wissenschaften Wien, mathematisch-naturwiss. Klasse, 32:65–66, 1932.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J A Goguen</author>
</authors>
<title>The logic of inexact concepts.</title>
<date>1969</date>
<journal>Synth´ese,</journal>
<volume>19</volume>
<issue>3</issue>
<contexts>
<context position="23961" citStr="[Gog69]" startWordPosition="4303" endWordPosition="4303"> Logic Π is based on the product t-norm x *Π y = x y. It was introduced in 1996 [HGE96]. The residuum, x =&gt;Π y = 1 for x &lt; y and x =&gt;Π y = y/x otherwise, however was already defined by Goguen in 1969 [Gog69]. The truth function for negation is exactly the same one as for Gödel Logic. x*y , 0.8 0.6 0.4 0.2 0.4 x 0.6 0.8 , 0.8 0.6 y 00 0.2 0.4 0.2 , 0 0.2 0.4 x =&gt;* y 1 0.8 0.6 0.4 0.2 x 0.6 0.8 1 0.8 0.6 y</context>
</contexts>
<marker>[Gog69]</marker>
<rawString>J.A. Goguen. The logic of inexact concepts. Synth´ese, 19(3):325–373, 1969.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Petr Häjek</author>
</authors>
<title>Why fuzzy logic.</title>
<date>2002</date>
<booktitle>A Companion to Philosophical Logic,</booktitle>
<pages>595--605</pages>
<editor>In Dale Jacquette, editor,</editor>
<publisher>Blackwell,</publisher>
<location>Massachusetts,</location>
<contexts>
<context position="9906" citStr="[Häj02]" startWordPosition="1503" endWordPosition="1503"> Choices Fuzzy logics are commonly understood as many valued logics that allow to model reasoning in presence of different degrees of truth. In order to achieve this, we follow Petr Häjek ([Hä02] and [Häj02]) in making the following fundamental “design choices”: 1. The real unit interval [0, 1] is taken as our set of truth values, 0 meaning absolute falsity, 1 standing for absolute truth. The truth value</context>
</contexts>
<marker>[Häj02]</marker>
<rawString>Petr Häjek. Why fuzzy logic. In Dale Jacquette, editor, A Companion to Philosophical Logic, pages 595–605. Blackwell, Massachusetts, 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Petr Häjek</author>
</authors>
<title>Lluis Godo, and Francesc Esteva. Fuzzy logic and probability.</title>
<date>1995</date>
<booktitle>In Proceedings of the 11th Annual Conference on Uncertainty in Artificial Intelligence (UAI-95),</booktitle>
<pages>237--244</pages>
<publisher>Morgan Kaufmann.</publisher>
<location>San Francisco, CA,</location>
<contexts>
<context position="11481" citStr="[HGE95]" startWordPosition="1776" endWordPosition="1776">of the form “A or B” as the probability P(A or B) can be calculated as P(A or B) = P(A)+P(B)−P(A and B). Nevertheless, there are approaches to probabilistic reasoning in a logical framework; see e.g. [HGE95]. 3. When choosing truth functions for connectives each fuzzy logic shall be a generalization of classical logic. So, for the truth values 0 and 1 the truth functions must behave classically. For exam</context>
<context position="22436" citStr="[HGE95]" startWordPosition="4000" endWordPosition="4000">((B --&gt; A) --&gt; A) A formula A is derivable from this four axioms by modus ponens if and only if |= L A holds, i.e. if and only if vL(A) = 1 for all valuations v for L. A proof of this is presented in [HGE95]. Note that negation is involutive in L, i.e. , =6 A - A holds for all formulas A. 2.4 Gödel Logic Gödel Logic G is based on the t-norm x *G y = min(x, y). Thus, the same truth value is assigned to bo</context>
</contexts>
<marker>[HGE95]</marker>
<rawString>Petr Häjek, Lluis Godo, and Francesc Esteva. Fuzzy logic and probability. In Proceedings of the 11th Annual Conference on Uncertainty in Artificial Intelligence (UAI-95), pages 237–244, San Francisco, CA, 1995. Morgan Kaufmann.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Häjek</author>
<author>L Godo</author>
<author>F Esteva</author>
</authors>
<title>A complete many-valued logic with productconjunction.</title>
<date>1996</date>
<journal>Archive for Mathematical Logic,</journal>
<volume>35</volume>
<issue>3</issue>
<contexts>
<context position="23841" citStr="[HGE96]" startWordPosition="4276" endWordPosition="4276"> 0.8 00 0.2 0.4 0.4 0.6 0.8 0.6 y x 0.2 1 0 x =&gt;* y 1 0.8 0.6 0.4 0.2 Figure 2.2: Gödel T-Norm 2.5 Product Logic Product Logic Π is based on the product t-norm x *Π y = x y. It was introduced in 1996 [HGE96]. The residuum, x =&gt;Π y = 1 for x &lt; y and x =&gt;Π y = y/x otherwise, however was already defined by Goguen in 1969 [Gog69]. The truth function for negation is exactly the same one as for Gödel Logic. x*</context>
</contexts>
<marker>[HGE96]</marker>
<rawString>P. Häjek, L. Godo, and F. Esteva. A complete many-valued logic with productconjunction. Archive for Mathematical Logic, 35(3):191–208, 1996.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Petr Häjek</author>
</authors>
<title>Metamathematics of Fuzzy Logic,</title>
<date>2002</date>
<booktitle>of Trends in Logic.</booktitle>
<volume>4</volume>
<publisher>Springer,</publisher>
<contexts>
<context position="9894" citStr="[Hä02]" startWordPosition="1501" endWordPosition="1501"> 2.1 Design Choices Fuzzy logics are commonly understood as many valued logics that allow to model reasoning in presence of different degrees of truth. In order to achieve this, we follow Petr Häjek ([Hä02] and [Häj02]) in making the following fundamental “design choices”: 1. The real unit interval [0, 1] is taken as our set of truth values, 0 meaning absolute falsity, 1 standing for absolute truth. The</context>
<context position="15466" citStr="[Hä02]" startWordPosition="2518" endWordPosition="2518">x, y), 3. Product t-norm *Π: x *Π y = x • y These are considered to be the most important ones. All other continuous t-norms can be obtained from them using a so-called ordinal sum construction. (See [Hä02] for a precise description and proof.) For defining a truth function for implication for a given t-norm, we will make use of the residuum of a given t-norm: Definition 2. Let * be a continuous t-norm.</context>
<context position="23303" citStr="[Hä02]" startWordPosition="4164" endWordPosition="4164">ng an axiomatization of Intuitionistic Logic and adding the following axiom: ((A --&gt; B) --&gt; C) --&gt; (((B --&gt; A) --&gt; C) --&gt; C) (For a proof that this axiomatization is indeed adequate for G we refer to [Hä02].) Therefore, G is often called an intermediary logic between Intuitionistic Logic and Classical Logic or, sometimes as well, “Intuitionistic Fuzzy Logic”. 10 2.5. Product Logic 2. T-Norm Based Fuzzy </context>
<context position="24470" citStr="[Hä02]" startWordPosition="4422" endWordPosition="4422">te that the �Π is not continuous at the point x = 0, y = 0: There the residuum 0 �Π 0 is 1, but the limit limt→0(t �Π 0) is 0. As well as for L and G it is possible to give axiomatizations for Π, see [Hä02] as an example. 11 2.6. A Uniform Hypersequent System 2. T-Norm Based Fuzzy Logics 2.6 A Uniform Hypersequent System In this section we present a uniform and analytic proof system for L, G, and Π foll</context>
</contexts>
<marker>[Hä02]</marker>
<rawString>Petr Häjek. Metamathematics of Fuzzy Logic, volume 4 of Trends in Logic. Springer, 2002.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E P Klement</author>
</authors>
<title>Radko Mesiar, and Endre Pap. Triangular Norms,</title>
<date>2000</date>
<journal>Bibliography Bibliography</journal>
<booktitle>of Trends in Logic.</booktitle>
<volume>8</volume>
<publisher>Springer,</publisher>
<contexts>
<context position="14860" citStr="[KMP00]" startWordPosition="2391" endWordPosition="2391">, which is in general weaker than calling for continuity of the function itself. However, it can be proved that because of the non-decreasingness of t-norms, these two properties are equivalent. (See [KMP00], Chapter 1, Proposition 1.19 ) 5 2.2. T-Norms 2. T-Norm Based Fuzzy Logics A t-norm is continuous if the functions *x(y) : [0, 1] --&gt; [0, 1], *x (y) := x * y and *y(x) : [0, 1] --&gt; [0, 1], *y (x) := </context>
</contexts>
<marker>[KMP00]</marker>
<rawString>E.P. Klement, Radko Mesiar, and Endre Pap. Triangular Norms, volume 8 of Trends in Logic. Springer, 2000. Bibliography Bibliography</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Lorenzen</author>
</authors>
<title>Logik und Agon.</title>
<date>1960</date>
<booktitle>In Atti del Congresso Internazionale di Filosofia,</booktitle>
<pages>187--194</pages>
<publisher>Sansoni.</publisher>
<location>Firenze,</location>
<contexts>
<context position="36728" citStr="[Lor60]" startWordPosition="6723" endWordPosition="6723">lting dialogue and the betting on the assertions together constitute the tangible meaning of the initial assertion. The game rules for decomposing compound propositions are taken from Paul Lorenzen’s [Lor60] who used these rules to define dialogue games for intuitionistic logic. This fact emphasizes a clear separation between the treatment of compound propositions and the evaluation of atomic ones. From </context>
<context position="40814" citStr="[Lor60]" startWordPosition="7395" endWordPosition="7395">luated by conducting trials as detailed in the previous section. The idea to use a dialogue game as well as the rules themselves refer to Paul Lorenzen’s characterization of intuitionistic logic (see [Lor60]). These rules are intended to specify the meaning of the connectives independently of the underlying evaluation scheme for atomic propositions. Lorenzen’s game uses so-called frame rules to determine</context>
</contexts>
<marker>[Lor60]</marker>
<rawString>P. Lorenzen. Logik und Agon. In Atti del Congresso Internazionale di Filosofia, pages 187–194, Firenze, 1960. Sansoni.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P Lorenzen</author>
</authors>
<title>Ein dialogisches Konstruktivitätskriterium. In Infinitistic Methods,</title>
<date>1961</date>
<booktitle>PWN. Proceed. Symp. Foundations of Math.</booktitle>
<pages>193--200</pages>
<location>Warszawa,</location>
<contexts>
<context position="76624" citStr="[Lor61]" startWordPosition="14334" endWordPosition="14334"> by his opponent. Rule 9. He who asserts 3xP(x) undertakes to assert P(d) for some constant chosen by himself. These rules, as the other game rules as well, have already been suggested by Lorenzen in [Lor61]. Here is also the reason why we have to require a constant symbol for each possible value a variable can assume: if for a certain value there existed no constant symbol, no player could choose this v</context>
</contexts>
<marker>[Lor61]</marker>
<rawString>P. Lorenzen. Ein dialogisches Konstruktivitätskriterium. In Infinitistic Methods, pages 193–200, Warszawa, 1961. PWN. Proceed. Symp. Foundations of Math.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lukasiewicz</author>
</authors>
<title>O logice trojwartosciowej.</title>
<date>1920</date>
<journal>Ruch Filozoficzny,</journal>
<pages>5--169</pages>
<contexts>
<context position="20858" citStr="[Luk20]" startWordPosition="3662" endWordPosition="3662">or L*. 2.3 Lukasiewicz Logic Lukasiewicz Logic L is the fuzzy logic based on the Lukasiewicz t-norm x ∗ L y = max(0, x + y − 1). In the 1920s Jan Lukasiewicz introduced a family of many-valued logics [Luk20]. L is the infinite-valued member of this family. 1 0.8 00 0.2 0.6 0.4 0.4 0.6 0.8 y x 0.2 0 1 x*y 1 0.8 0.6 0.4 0.2 1 0.8 00 0.2 0.4 0.4 0.6 0.8 0.6 y x 0.2 1 0 x =&gt;* y 1 0.8 0.6 0.4 0.2 (a) The Luka</context>
</contexts>
<marker>[Luk20]</marker>
<rawString>J. Lukasiewicz. O logice trojwartosciowej. Ruch Filozoficzny, 5(169-171):32, 1920.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George Metcalfe</author>
<author>Nicola Olivetti</author>
<author>Dov Gabbay</author>
</authors>
<title>Analytic Proof Calculi for Product Logics. Archive for Mathematical Logic,</title>
<date>2004</date>
<volume>43</volume>
<issue>7</issue>
<contexts>
<context position="25689" citStr="[MOG04]" startWordPosition="4626" endWordPosition="4626">nclusions do not consist of sequents but of finite sets of sequents. There are calculi for many fuzzy logics presented in a framework of hypersequent systems, see, as an example [MOG05], [Avr91], and [MOG04] for hypersequent calculi for L, G, and Π. On the other hand, relational sequents can be seen as a variant of ordinary Gentzen sequents where Gentzen’s sequent arrow h is replaced by other symbols. A </context>
</contexts>
<marker>[MOG04]</marker>
<rawString>George Metcalfe, Nicola Olivetti, and Dov Gabbay. Analytic Proof Calculi for Product Logics. Archive for Mathematical Logic, 43(7):859–889, 2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>George Metcalfe</author>
<author>Nicola Olivetti</author>
<author>Dov Gabbay</author>
</authors>
<title>Sequent and hypersequent calculi for abelian and Lukasiewicz logics.</title>
<date>2005</date>
<journal>ACM Trans. Comput. Logic,</journal>
<volume>6</volume>
<issue>3</issue>
<pages>613</pages>
<contexts>
<context position="25667" citStr="[MOG05]" startWordPosition="4623" endWordPosition="4623">re the premises and conclusions do not consist of sequents but of finite sets of sequents. There are calculi for many fuzzy logics presented in a framework of hypersequent systems, see, as an example [MOG05], [Avr91], and [MOG04] for hypersequent calculi for L, G, and Π. On the other hand, relational sequents can be seen as a variant of ordinary Gentzen sequents where Gentzen’s sequent arrow h is replace</context>
</contexts>
<marker>[MOG05]</marker>
<rawString>George Metcalfe, Nicola Olivetti, and Dov Gabbay. Sequent and hypersequent calculi for abelian and Lukasiewicz logics. ACM Trans. Comput. Logic, 6(3):578– 613, 2005.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Robert J Marks</author>
</authors>
<title>Fuzzy Logic Technology and Applications I.</title>
<date>1994</date>
<publisher>IEEE Press,</publisher>
<location>Piscataway, NJ, USA,</location>
<contexts>
<context position="12969" citStr="[RJM94]" startWordPosition="2033" endWordPosition="2033">n absolutely false statement from this proposition. This view of fuzzy logics also corresponds to what Lotfi A. Zadeh, the inventor of fuzzy sets, describes as fuzzy logics in a narrow sense, [Zad96],[RJM94]. Moreover, we will restrict ourselves to propositional fuzzy logics; a short treatment of predicate fuzzy logics and their relation to dialogue games will be in Section 3.7. 4 2.2. T-Norms 2. T-Norm </context>
</contexts>
<marker>[RJM94]</marker>
<rawString>II Robert J. Marks. Fuzzy Logic Technology and Applications I. IEEE Press, Piscataway, NJ, USA, 1994.</rawString>
</citation>
<citation valid="true">
<authors>
<author>B Scarpellini</author>
</authors>
<title>Die Nichtaxiomatisierbarkeit des unendlichwertigen Prädikatenkalküls von Lukasiewicz.</title>
<date>1962</date>
<journal>Journal of Symbolic Logic,</journal>
<volume>27</volume>
<issue>2</issue>
<pages>170</pages>
<contexts>
<context position="79865" citStr="[Sca62]" startWordPosition="14899" endWordPosition="14899">tice such a strategy cannot implemented. According to the second problem, theorem 4 no longer holds when incorporating quantifiers. This does not come completely unexpected: Scarpellini has proved in [Sca62] that first order Lukasiewicz Logic is not axiomatizable. If we could extend Giles’s game by “simple” rules to propositions containing quantifiers, we would be able to define corresponding rules for t</context>
</contexts>
<marker>[Sca62]</marker>
<rawString>B. Scarpellini. Die Nichtaxiomatisierbarkeit des unendlichwertigen Prädikatenkalküls von Lukasiewicz. Journal of Symbolic Logic, 27(2):159– 170, 1962.</rawString>
</citation>
<citation valid="false">
<authors>
<author>L A Zadeh</author>
</authors>
<title>The role of fuzzy logic in modeling, identification and control. Fuzzy Sets, Fuzzy Logic, and Fuzzy Systems: Selected Papers,</title>
<date>1996</date>
<journal>Intuitionistic Logic,</journal>
<volume>8</volume>
<pages>26</pages>
<note>monoidal t-norm logic, 6 omniscient player, 39 ordinal sum, 6 parametric experiment, 38 principle of limited liability, 19, 20, 61 Index Index probability definite, 27 relational hypersequent, 12 relational sequent, 12 residuum, 6 rH, 48 risk value, 27 saddle point theorem, 28, 64 sequent, 12 soundness, 13 subjective probability, 27 subjectively false, 24 subjectively true,</note>
<contexts>
<context position="5339" citStr="[Zad96]" startWordPosition="767" endWordPosition="767">quitous and pervasive phenomenon in information processing. Modelling vagueness is often accomplished by assigning degrees of truth to propositions. Fuzzy logics, taken here in Zadeh’s “narrow sense” [Zad96], are based on the extension of the two classical truth values by infinitely many intermediary degrees of truth. Degrees of truth should strictly be distinguished from degrees of belief, and therefore</context>
<context position="12961" citStr="[Zad96]" startWordPosition="2033" endWordPosition="2033">nclude an absolutely false statement from this proposition. This view of fuzzy logics also corresponds to what Lotfi A. Zadeh, the inventor of fuzzy sets, describes as fuzzy logics in a narrow sense, [Zad96],[RJM94]. Moreover, we will restrict ourselves to propositional fuzzy logics; a short treatment of predicate fuzzy logics and their relation to dialogue games will be in Section 3.7. 4 2.2. T-Norms 2.</context>
</contexts>
<marker>[Zad96]</marker>
<rawString>L.A. Zadeh. The role of fuzzy logic in modeling, identification and control. Fuzzy Sets, Fuzzy Logic, and Fuzzy Systems: Selected Papers, 1996. analyticity, 14 avowed meaning, 17 Cancellative Hoop Logic, 47 CHL, see Cancellative Hoop Logic completeness, 13 conditions of admissability, 16 conjunction min conjunction, 8 strong conjunction, 8 dialogue game rules, 20 dialogue tree, 65 dispersion-free, 17 dispersive, 17 elementary contradiction, 64 elementary order claim, 64 equivalent formulas, 8 equivalent game states, 32 first order Lukasiewicz Logic, 37 flag, 47 frame rules, 20 fuzzy modus ponens, 7 game state, 22 game tree, 23 Giles, Robin, 16 hypersequent system, 12 implication Gödel, 8 Goguen, 7 Lukasiewicz, 8 Product, 8 interpretation, 8 Intuitionistic Logic, 10 invertible rules, 14 involutive negation, 10 logical identity, 25 Lorenzen, Paul, 18, 20 monoidal t-norm logic, 6 omniscient player, 39 ordinal sum, 6 parametric experiment, 38 principle of limited liability, 19, 20, 61 Index Index probability definite, 27 relational hypersequent, 12 relational sequent, 12 residuum, 6 rH, 48 risk value, 27 saddle point theorem, 28, 64 sequent, 12 soundness, 13 subjective probability, 27 subjectively false, 24 subjectively true, 24 t-norm, 5 Gödel, 6 Lukasiewicz, 6 Product, 6 tangible meaning, 17 tenet, 22 truth comparison game, 63 truth functionality, 4 valid formula, 9 valuation, 8 winning condition, 45, 47, 57 zero sum game, 26</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>