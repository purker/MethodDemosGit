<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.071543">
<title confidence="0.9993295">
Polynomial Combined Rewritings for Linear Existential
Rules and DL-Lite with n-ary Relations
</title>
<author confidence="0.999843">
Georg Gottlob1, Marco Manna2, and Andreas Pieris3
</author>
<affiliation confidence="0.795368">
1 Department of Computer Science, University of Oxford, UK
georg.gottlob@cs.ox.ac.uk
2 Department of Mathematics and Computer Science, University of Calabria, Italy
manna@mat.unical.it
3 Institute of Information Systems, Vienna University of Technology, Austria
</affiliation>
<email confidence="0.978298">
pieris@dbai.tuwien.ac.at
</email>
<sectionHeader confidence="0.999606" genericHeader="abstract">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999942379310345">
This paper considers the setting of ontology-based query answering (OBQA). In this
setting, Description Logics (DLs) and existential rules (a.k.a. tuple-generating depen-
dencies or Datalog� rules) are popular ontology languages, while conjunctive queries
(CQs) is the main querying tool. Among KR researchers there is a clear consensus that
the required level of scalability in OBQA can only be achieved via query rewriting,
which attempts to reduce OBQA into the problem of evaluating a query over a rela-
tional database. Two query languages are usually considered: first-order queries (FO)
and non-recursive Datalog queries (NDL).
An interesting approach to query rewriting is the polynomial combined approach [7],
which can be described as follows: an ontology X can be incorporated together with a
CQ q into a database query qz in polynomial time, and also with a database D into
a database DE in polynomial time, such that qE over DE yields the same result as q
evaluated over the knowledge base consisting of D and Z. The polynomial combined
approach has been applied to £G7ld„ [7], an extension of the well-known DL £G, to
DL-LiteNho„, [5, 6], one of the most expressive logics of the DL-Lite family, and only
recently to the main guarded- and sticky-based classes of existential rules [3].
Research Challenges. The problem of applying the polynomial combined approach
to existing DLs and classes of existential rules is relatively understood. Nevertheless,
there are still basic open questions that deserve our attention. Regarding DLs, little is
known about formalisms with n-ary relations such as DLR-Lite7,, that is, the exten-
sion of DL-Lite7, with n-ary roles. Regarding existential rules, it is open whether the
polynomial combined approach can be applied to the class of linear existential rules (or
simply linear rules), that is, assertions of the form VXVY(s(X, Y) --&gt; 3Z p(X, Z)),
where s(X, Y) and p(X, Z) are atomic formulas [1].
It is not difficult to show that, if linear rules are polynomially combined rewritable,
then also DLR-Lite7, is polynomially combined rewritable — this follows from the
fact that query answering under DLR-Lite7, can be easily reduced to query answering
under linear rules [1]. Thus, the key question that we need to answer, which has been
explicitly stated as an open problem in [3], is the following:
</bodyText>
<figureCaption confidence="0.992269">
Fig. 1. Illustration of a proof generator.
</figureCaption>
<construct confidence="0.99264725">
Given a (Boolean) CQ q, a database D, and a set Z of linear rules, can we rewrite
in polynomial time: (i) q and Z, independently of D, into a Q-query qz, where
Q e fFO, NDL}, and (ii) D and Z, independently of q, into a database DE, such
that (D U Z) j= q iff DE j= qz?
</construct>
<bodyText confidence="0.9998508">
The answer to the above question is affirmative under the assumption that the arity
of the underlying schema is bounded; implicit in [2]. However, little is known for arbi-
trary linear rules, without any assumption on the underlying schema. We give a positive
answer even for linear rules that use predicates of unbounded arity. For more details,
we refer the reader to [4].
</bodyText>
<sectionHeader confidence="0.796113" genericHeader="method">
2 Proof Generator
</sectionHeader>
<bodyText confidence="0.999001818181818">
We assume the reader is familiar with the chase procedure. Recall that the chase for
a database D and a set Z of rules, denoted chase(D, Z), is a universal model of D
and Z, and thus (D U Z) j= q iff chase(D, Z) j= q, for each CQ q. The instance
chase(D, Z) can be naturally seen as a directed labeled graph, called chase graph,
denoted CG (D, Z). It is also easy to verify that for linear rules, CG (D, Z) is a directed
forest; for details on the chase, see, e.g., [1]. Our main technical tool is called proof
generator, and it formalizes the intuitive idea that (Boolean) CQ answering under linear
rules can be realized as a reachability problem on the chase graph. Let us illustrate the
key ideas underlying the proof generator via a simple example.
Example 1. Let D = fp(a, b, c), p(b, c, d)}, and let Z be the set of linear rules (for
brevity, the universal quantifiers are omitted):
</bodyText>
<equation confidence="0.921992">
p(X, Y, Z) 3W p(X, W, Y ) p(X, Y, Z) 3W p(Z, W, Y )
p(X, Y, Z) 3W p(Y, X, W) p(X, Y, Z) p(Y, Z, X).
</equation>
<bodyText confidence="0.7662885">
Given the BCQ q = 3A3B3C3D (p(A, a, B) n p(C, B, b) n p(D, c, b)), as shown in
Figure 1(a), there exists a homomorphism h (dashed arrows in the figure) that maps q to
an initial segment of the chase graph of D and Z, and thus (DUZ) j= q. It is interesting
to observe that the nulls occurring in h(q), i.e., z1, z3, z4 and z5, form a rooted forest
</bodyText>
<figure confidence="0.994969933333333">
p(a ,b,c )
p(a ,z1,b )
p(z1,a,z2)
p(b,z4,z1)
p(z4,z1,b)
p(z5,c,b )
p(z1,z3,a)
p(z3,a,z1)
3A3B3C3D (p (A,a,B) n p(C,B,b) n p(D,c,b))
(a)
p(b ,c,d )
p(b ,z5,c )
z1 z5
z3 z4
(b)
</figure>
<bodyText confidence="0.999742235294118">
F, depicted in Figure 1(b), with the following properties; for brevity, let v(z) be the
atom in CG(D, Z) where the null z is invented (see shaded atoms in Figure 1(a) for
v(z1), v(z3), v(z4) and v(z5)): (i) for every root node z, v(z) is reachable from D; (ii)
for every edge (z, w), v(w) is reachable from v(z); and (iii) for every atom a E h(q),
there exists a unique path 7r in F that contains all the nulls in a, and, assuming that
the leaf node of 7r is z, a is reachable from v(z). Indeed, it is easy to verify that v(z1)
and v(z5) are reachable from D, v(z3) and v(z4) are reachable from v(z1), and finally,
h(p(A, a, B)) = p(z3, a, z1) is reachable from v(z3), h(p(C, B, b)) = p(z4, z1, b) is
reachable from v(z4), and h(p(D, c, b)) = p(z5, c, b) is reachable from v(z5).
Roughly speaking, the triple consisting of: (1) the homomorphism h, that maps q to
the chase; (2) the function v, that gives the atoms in the chase where the nulls occurring
in h(q) were invented; and (3) the forest F, that encodes how the nulls of h(q) depend
on each other, as well as the order of their generation, is what we call a proof generator
for q w.r.t. D and Z. The existence of such a triple, allows us to generate the part of
the chase due to which the query is entailed, i.e., the proof of the query (hence the
name “proof generator”). Therefore, for query answering purposes under linear rules,
we simply need to check if such a proof generator exists.
</bodyText>
<construct confidence="0.593884">
Lemma 1. (D U Z) |= q iff there exists a proof generator for q w.r.t. D and Z.
</construct>
<sectionHeader confidence="0.97329" genericHeader="method">
3 The Combined Rewriting
</sectionHeader>
<bodyText confidence="0.999808">
We give a positive answer to our research question regarding linear rules and the poly-
nomial combined approach. More precisely, we show that:
</bodyText>
<construct confidence="0.8140425">
Theorem 1. The class of linear rules is polynomially combined Q-rewritable, where
Q E fFO, NDL}.
</construct>
<bodyText confidence="0.990904083333334">
To establish the above theorem, we heavily rely on the notion of the proof generator.
Fix a (Boolean) CQ q, a database D, and a set X of linear rules. By Lemma 1, it
suffices to construct in polynomial time a query qz E Q (independently of D), and
a database Dz (independently of q), such that Dz |= qz iff a proof generator for q
w.r.t. D and X exists. Roughly, the query qz guesses a triple (h, v, F) (as described in
Example 1), and then verifies that the guessed triple is a proof generator for q w.r.t. D
and Z. The interesting part of qz is the component that applies the crucial reachability
checks required by the definition of the proof generator. Although the path among two
atoms in the chase graph may be of exponential size, its existence can be checked via
Q-queries of polynomial size. An immediate consequence of Theorem 1 is that:
Corollary 1. The description logic DLR-LiteR is polynomially combined Q-rewritable,
where Q E fFO, NDL}.
The results of this work are, for the moment, of theoretical nature and we do not
claim that they will directly lead to better practical algorithms. We believe that a smart
implementation of the proposed techniques can lead to more efficient rewriting proce-
dures; this will be the subject of future research. We are also planning to optimize the
proposed rewriting algorithm, with the aim of constructing queries of optimal size.
Acknowledgements. G. Gottlob was supported by the EPSRC Programme Grant
EP/M025268/ “VADA: Value Added Data Systems – Principles and Architecture”. M.
Manna was supported by the MIUR project “SI-LAB BA2KNOW – Business Anali-
tycs to Know”, and by Regione Calabria, programme POR Calabria FESR 2007-2013,
projects “ITravel PLUS” and “KnowRex: Un sistema per il riconoscimento e l’estrazione
di conoscenza”. A. Pieris was supported by the Austrian Science Fund (FWF): P25207-
N23 and Y698.
</bodyText>
<sectionHeader confidence="0.999181" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999723928571428">
1. Cal`ı, A., Gottlob, G., Lukasiewicz, T.: A general Datalog-based framework for tractable query
answering over ontologies. J. Web Sem. 14, 57–83 (2012)
2. Gottlob, G., Kikot, S., Kontchakov, R., Podolskii, V.V., Schwentick, T., Zakharyaschev, M.:
The price of query rewriting in ontology-based data access. Artif. Intell. 213, 42–59 (2014)
3. Gottlob, G., Manna, M., Pieris, A.: Polynomial combined rewritings for existential rules. In:
KR (2014)
4. Gottlob, G., Manna, M., Pieris, A.: Polynomial rewritings for linear existential rules. In: IJCAI
(2015)
5. Kontchakov, R., Lutz, C., Toman, D., Wolter, F., Zakharyaschev, M.: The combined approach
to query answering in DL-Lite. In: KR (2010)
6. Kontchakov, R., Lutz, C., Toman, D., Wolter, F., Zakharyaschev, M.: The combined approach
to ontology-based data access. In: IJCAI. pp. 2656–2661 (2011)
7. Lutz, C., Toman, D., Wolter, F.: Conjunctive query answering in the description logic EL
using a relational database system. In: IJCAI. pp. 2070–2075 (2009)
</reference>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant no="0" confidence="0.457006">
<title confidence="0.9997165">Polynomial Combined Rewritings for Linear Existential Rules and DL-Lite with n-ary Relations</title>
<author confidence="0.997131">Marco</author>
<author confidence="0.997131">Andreas</author>
<affiliation confidence="0.994991333333333">of Computer Science, University of Oxford, of Mathematics and Computer Science, University of Calabria, of Information Systems, Vienna University of Technology,</affiliation>
<email confidence="0.467165">pieris@dbai.tuwien.ac.at</email>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>A Cal`ı</author>
<author>G Gottlob</author>
<author>Lukasiewicz</author>
</authors>
<title>T.: A general Datalog-based framework for tractable query answering over ontologies.</title>
<date>2012</date>
<journal>J. Web Sem.</journal>
<volume>14</volume>
<pages>57--83</pages>
<contexts>
<context position="2391" citStr="[1]" startWordPosition="364" endWordPosition="364"> approach can be applied to the class of linear existential rules (or simply linear rules), that is, assertions of the form VXVY(s(X, Y) --&gt; 3Z p(X, Z)), where s(X, Y) and p(X, Z) are atomic formulas [1]. It is not difficult to show that, if linear rules are polynomially combined rewritable, then also DLR-Lite7, is polynomially combined rewritable — this follows from the fact that query answering und</context>
<context position="3969" citStr="[1]" startWordPosition="659" endWordPosition="659">aturally seen as a directed labeled graph, called chase graph, denoted CG (D, Z). It is also easy to verify that for linear rules, CG (D, Z) is a directed forest; for details on the chase, see, e.g., [1]. Our main technical tool is called proof generator, and it formalizes the intuitive idea that (Boolean) CQ answering under linear rules can be realized as a reachability problem on the chase graph. L</context>
</contexts>
<marker>1.</marker>
<rawString>Cal`ı, A., Gottlob, G., Lukasiewicz, T.: A general Datalog-based framework for tractable query answering over ontologies. J. Web Sem. 14, 57–83 (2012)</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gottlob</author>
<author>S Kikot</author>
<author>R Kontchakov</author>
<author>V V Podolskii</author>
<author>T Schwentick</author>
<author>M Zakharyaschev</author>
</authors>
<title>The price of query rewriting in ontology-based data access.</title>
<date>2014</date>
<journal>Artif. Intell.</journal>
<volume>213</volume>
<contexts>
<context position="3244" citStr="[2]" startWordPosition="520" endWordPosition="520">tly of q, into a database DE, such that (D U Z) j= q iff DE j= qz? The answer to the above question is affirmative under the assumption that the arity of the underlying schema is bounded; implicit in [2]. However, little is known for arbitrary linear rules, without any assumption on the underlying schema. We give a positive answer even for linear rules that use predicates of unbounded arity. For more</context>
</contexts>
<marker>2.</marker>
<rawString>Gottlob, G., Kikot, S., Kontchakov, R., Podolskii, V.V., Schwentick, T., Zakharyaschev, M.: The price of query rewriting in ontology-based data access. Artif. Intell. 213, 42–59 (2014)</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gottlob</author>
<author>M Manna</author>
<author>A Pieris</author>
</authors>
<title>Polynomial combined rewritings for existential rules. In: KR</title>
<date>2014</date>
<contexts>
<context position="1740" citStr="[3]" startWordPosition="262" endWordPosition="262">xtension of the well-known DL £G, to DL-LiteNho„, [5, 6], one of the most expressive logics of the DL-Lite family, and only recently to the main guarded- and sticky-based classes of existential rules [3]. Research Challenges. The problem of applying the polynomial combined approach to existing DLs and classes of existential rules is relatively understood. Nevertheless, there are still basic open ques</context>
<context position="2775" citStr="[3]" startWordPosition="427" endWordPosition="427">query answering under DLR-Lite7, can be easily reduced to query answering under linear rules [1]. Thus, the key question that we need to answer, which has been explicitly stated as an open problem in [3], is the following: Fig. 1. Illustration of a proof generator. Given a (Boolean) CQ q, a database D, and a set Z of linear rules, can we rewrite in polynomial time: (i) q and Z, independently of D, in</context>
</contexts>
<marker>3.</marker>
<rawString>Gottlob, G., Manna, M., Pieris, A.: Polynomial combined rewritings for existential rules. In: KR (2014)</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Gottlob</author>
<author>M Manna</author>
<author>A Pieris</author>
</authors>
<title>Polynomial rewritings for linear existential rules. In: IJCAI</title>
<date>2015</date>
<contexts>
<context position="3480" citStr="[4]" startWordPosition="560" endWordPosition="560">bitrary linear rules, without any assumption on the underlying schema. We give a positive answer even for linear rules that use predicates of unbounded arity. For more details, we refer the reader to [4]. 2 Proof Generator We assume the reader is familiar with the chase procedure. Recall that the chase for a database D and a set Z of rules, denoted chase(D, Z), is a universal model of D and Z, and th</context>
</contexts>
<marker>4.</marker>
<rawString>Gottlob, G., Manna, M., Pieris, A.: Polynomial rewritings for linear existential rules. In: IJCAI (2015)</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Kontchakov</author>
<author>C Lutz</author>
<author>D Toman</author>
<author>F Wolter</author>
<author>M Zakharyaschev</author>
</authors>
<title>The combined approach to query answering in DL-Lite. In:</title>
<date>2010</date>
<publisher>KR</publisher>
<contexts>
<context position="1593" citStr="[5, 6]" startWordPosition="237" endWordPosition="238">s the same result as q evaluated over the knowledge base consisting of D and Z. The polynomial combined approach has been applied to £G7ld„ [7], an extension of the well-known DL £G, to DL-LiteNho„, [5, 6], one of the most expressive logics of the DL-Lite family, and only recently to the main guarded- and sticky-based classes of existential rules [3]. Research Challenges. The problem of applying the po</context>
</contexts>
<marker>5.</marker>
<rawString>Kontchakov, R., Lutz, C., Toman, D., Wolter, F., Zakharyaschev, M.: The combined approach to query answering in DL-Lite. In: KR (2010)</rawString>
</citation>
<citation valid="true">
<authors>
<author>R Kontchakov</author>
<author>C Lutz</author>
<author>D Toman</author>
<author>F Wolter</author>
<author>M Zakharyaschev</author>
</authors>
<title>The combined approach to ontology-based data access. In:</title>
<date>2011</date>
<booktitle>IJCAI.</booktitle>
<pages>2656--2661</pages>
<contexts>
<context position="1593" citStr="[5, 6]" startWordPosition="237" endWordPosition="238">s the same result as q evaluated over the knowledge base consisting of D and Z. The polynomial combined approach has been applied to £G7ld„ [7], an extension of the well-known DL £G, to DL-LiteNho„, [5, 6], one of the most expressive logics of the DL-Lite family, and only recently to the main guarded- and sticky-based classes of existential rules [3]. Research Challenges. The problem of applying the po</context>
</contexts>
<marker>6.</marker>
<rawString>Kontchakov, R., Lutz, C., Toman, D., Wolter, F., Zakharyaschev, M.: The combined approach to ontology-based data access. In: IJCAI. pp. 2656–2661 (2011)</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Lutz</author>
<author>D Toman</author>
<author>F Wolter</author>
</authors>
<title>Conjunctive query answering in the description logic EL using a relational database system. In:</title>
<date>2009</date>
<booktitle>IJCAI.</booktitle>
<pages>2070--2075</pages>
<contexts>
<context position="1158" citStr="[7]" startWordPosition="158" endWordPosition="158"> database. Two query languages are usually considered: first-order queries (FO) and non-recursive Datalog queries (NDL). An interesting approach to query rewriting is the polynomial combined approach [7], which can be described as follows: an ontology X can be incorporated together with a CQ q into a database query qz in polynomial time, and also with a database D into a database DE in polynomial tim</context>
</contexts>
<marker>7.</marker>
<rawString>Lutz, C., Toman, D., Wolter, F.: Conjunctive query answering in the description logic EL using a relational database system. In: IJCAI. pp. 2070–2075 (2009)</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>