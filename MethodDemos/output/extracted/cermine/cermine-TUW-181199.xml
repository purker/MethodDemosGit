<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta />
    <article-meta>
      <title-group>
        <article-title>spock: A Debugging Support Tool for Logic Programs ⋆ under the Answer-Set Semantics</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author">
          <string-name>Martin Gebser</string-name>
          <email>gebser@cs.uni-potsdam.de</email>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Jo¨ rg Pu¨ hrer</string-name>
          <email>puehrer@kr.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff1">1</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Torsten Schaub</string-name>
          <email>torsten@cs.uni-potsdam.de</email>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Hans Tompits</string-name>
          <email>tompits@kr.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff1">1</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Stefan Woltran</string-name>
          <email>woltran@dbai.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff1">1</xref>
        </contrib>
        <aff id="aff0">
          <label>0</label>
          <institution>Institut fu ̈r Informatik, Universita ̈t Potsdam</institution>
          ,
          <addr-line>August-Bebel-Straße 89, D-14482 Potsdam</addr-line>
          ,
          <country country="DE">Germany</country>
        </aff>
        <aff id="aff1">
          <label>1</label>
          <institution>Institut fu ̈r Informationssysteme, Technische Universita ̈t Wien</institution>
          ,
          <addr-line>Favoritenstraße 9-11, A-1040 Vienna</addr-line>
          ,
          <country country="AT">Austria</country>
        </aff>
      </contrib-group>
      <abstract>
        <p>Answer-set programming (ASP) is an emerging logic-programming paradigm that strictly separates the description of a problem from its solving methods. Despite its semantic elegance, ASP suffers from a lack of support for program developers. In particular, tools are needed that help engineers in detecting erroneous parts of their programs. Unlike in other areas of logic programming, applying tracing techniques for debugging logic programs under the answer-set semantics seems rather unnatural, since employing imperative solving algorithms would undermine the declarative flavour of ASP. In this paper, we present the system spock, a debugging support tool for answer-set programs making use of ASP itself. The implemented techniques maintain the declarative nature of ASP within the debugging process and are independent of the actual computation of answer sets.</p>
      </abstract>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>-</title>
      <p>
        Answer-set programming (ASP) [
        <xref ref-type="bibr" rid="ref1">1</xref>
        ] has become an important logic-programming
paradigm for declarative problem solving, incorporating fundamental concepts of
nonmonotonic reasoning. A major reason why ASP has not yet found a more widespread
popularity as a problem-solving technique, however, is its lack of suitable engineering
tools for developing programs. In particular, realising tools for debugging answer-set
programs is a clearly recognised issue in the ASP community, and several approaches
in this direction have been proposed in recent years [
        <xref ref-type="bibr" rid="ref2 ref3 ref4 ref5">2–5</xref>
        ].
      </p>
      <p>From a theoretical point of view, the nonmonotonicity of answer-set programs is
an aggravating factor for detecting sources of errors, since every rule of a program
might significantly influence the resulting answer sets. On the other hand, applying
tracing techniques for debugging logic programs under the answer-set semantics seems
rather unnatural, since employing imperative solving algorithms would undermine the
declarative flavour of ASP.
⋆ This work was partially supported by the Austrian Science Fund (FWF) under project P18019.</p>
      <p>
        In this paper, we discuss the main features of the system spock [
        <xref ref-type="bibr" rid="ref6">6</xref>
        ], which supports
developers of answer-set programs in locating errors in their programs by exploiting
the declarative nature of ASP itself, but being independent of specific ASP solvers. The
name “spock” makes reference to the fact that detecting errors is done by means of
logic, just like the popular Vulcan of Star Trek fame.
      </p>
      <p>
        The theoretical background of the implemented methods was introduced in
previous work [
        <xref ref-type="bibr" rid="ref5">5</xref>
        ], exploiting and extending a tagging technique as used by Delgrande et
al. [
        <xref ref-type="bibr" rid="ref7">7</xref>
        ] for compiling ordered logic programs into standard ones. In our approach, a
program to debug, Π, is augmented with dedicated meta-atoms, called tags, serving two
purposes: Firstly, they allow for controlling and manipulating the applicability of rules,
and secondly, tags occurring in the answer sets of the extended program reflect various
properties of Π. Our tool implements the tagging process and further related
translations for a program Π to debug, allowing for an extrapolation of non-existing answer
sets in combination with explanations why an interpretation is not an answer set of Π.
      </p>
      <p>For illustration of the debugging questions addressed, consider the problem of
inviting guests to a party when it is known that some of them would appear only if certain
others do or do not attend the festivity. An instance of such a setting is encoded in
program Πinv , where each atom represents the appearing of a potential party visitor:
= jim ← uhura,
= jim ← not chekov ,
= uhura ← chekov , not scotty,</p>
      <p>This program has two answer sets, viz., {chekov , scotty} and {bones, jim, scotty}.
Assume that Sulu, the programmer, is quite perplexed by this result, wondering why
there is a scenario where only Chekov and Scotty, who merely have a neutral relation to
each other rather than a friendship, attend. On the other hand, he is astonished as there
is no possibility such that Uhura and Jim can jointly be invited. With the help of the tool
spock, reasons for such mismatches between the expected and the actual semantics of
a program can be found.
2
2.1</p>
    </sec>
    <sec id="sec-2">
      <title>Background</title>
      <p>Answer-Set Programs
A (normal) logic program (over an alphabet A) is a finite set of rules of the form
a ← b1, . . . , bm, not c1, . . . , not cn,
(1)
where a and bi, cj ∈ A are atoms, for 0 ≤ i ≤ m, 0 ≤ j ≤ n. A literal is an atom a or
its negation not a. For a rule r as in (1), let head (r) = a be the head of r and body (r) =
{b1, . . . , bm, not c1, . . . , not cn} the body of r. Furthermore, we define body +(r) =
{b1, . . . , bm} and body −(r) = {c1, . . . , cn}. For a logic program Π, a set X of atoms
is an answer set of Π iff X is a minimal model of {head (r) ← body +(r) | r ∈ Π,
body −(r)∩X = ∅}. For uniformity, we assume that any integrity constraint ← body (r)
is expressed as a rule w ← body (r), not w, where w is a globally new atom. Moreover,
we allow nested expressions of form not not a, where a is some atom, in the body of
rules. Such rules are identified with normal rules in which not not a is replaced by
not a⋆, where a⋆ is a globally new atom, together with an additional rule a⋆ ← not a.
2.2</p>
      <p>
        Tagging-Based Debugging
In what follows, we sketch the theoretical principles underlying our system spock. For
a more detailed discussion, we refer to Brain et al. [
        <xref ref-type="bibr" rid="ref5">5</xref>
        ]. The main idea of tagging is to
split the head from the body, for each rule in a program, and thereby to intervene into
the applicability of rules. After this division, tags are installed for triggering rules. This
way, the formation of answer sets can be controlled, and tags in the answer sets of the
transformed (or tagged) program reflect inherent properties of the original program.
      </p>
      <p>Technically, a program Π (over alphabet A) to debug is rewritten into a program
TK[Π] over an extended alphabet A+. Let Π be a logic program over A and consider a
bijection n, assigning to each rule r over A a unique name nr. Then, the program TK[Π]
over A+ consists of the following rules, for r ∈ Π, b ∈ body +(r), and c ∈ body −(r):
head (r) ← ap(nr), not ko(nr),
ap(nr) ← ok(nr), body (r),
bl(nr) ← ok(nr), not b,
bl(nr) ← ok(nr), not not c,
ok(nr) ← not ok(nr).
(2)
(3)
(4)
(5)
(6)
The tags ap(nr) and bl(nr) express whether a rule r is applicable or blocked,
respectively, while the control tags ko(nr), ok(nr), and ok(nr) are used for manipulating the
application of r. Intuitively, the rules of Π are split into rules of forms (2) and (3),
separating the applicability of a rule from the actual occurrence of the respective rule
head in an interpretation. Analogously, rules of forms (4) and (5) elicit which rules are
blocked. Tags stating whether rule r is applicable or blocked are only derived if ok(nr)
holds, which is by default the case, as expressed by rules of form (6).</p>
      <p>
        We call TK[Π] the kernel tagging of Π, since it serves as a basic submodule for more
enhanced programs facilitating certain debugging requests. One such extension scenario
is the extrapolation of non-existing answer sets of a program Π over A. Using further
translations, TP, TC, and TL [
        <xref ref-type="bibr" rid="ref5">5</xref>
        ], the occurrence of abnormality tags, abp(nr), abc(a),
and abl(a), respectively, in an answer set X + of the transformed program provides
information why an interpretation X = X + ∩ A is not an answer set of Π. Here, we
make use of the Lin-Zhao theorem [
        <xref ref-type="bibr" rid="ref8">8</xref>
        ], which qualifies answer sets as models of the
completion [
        <xref ref-type="bibr" rid="ref9">9</xref>
        ] and the loop formulas of a program. In particular, the program-oriented
abnormality tag abp(nr) indicates that rule r is applicable but not satisfied with respect
to an interpretation. The completion-oriented abnormality tag abc(a) signals that a is
in the considered interpretation but all rules having a as head are blocked. Finally,
the presence of a loop-oriented abnormality tag abl(a) indicates that the derivation
of atom a might recursively depend on a itself and, therefore, violate the minimality
criterion for answer sets. Note that all transformations used are polynomial in the size
of the input program and can be constructed for all programs under consideration, even
for programs without answer sets.
      </p>
      <p>Input Program
&lt;file_1&gt;
&lt;file_2&gt;</p>
      <p>...</p>
      <p>&lt;file_n&gt;
Standard Input</p>
      <p>Command-Line</p>
      <p>Arguments
spock
Parser</p>
      <p>Internal
Program
Representation</p>
      <p>Program</p>
      <p>
        Translation
spock is a command-line oriented tool, written in Java 5.0 and published under the
GNU general public license [
        <xref ref-type="bibr" rid="ref10">10</xref>
        ]. It is publicly available at
      </p>
      <p>http://www.kr.tuwien.ac.at/research/debug
as a jar-package including binaries and sources.</p>
      <p>The data flow for all transformations is depicted by Fig. 1. First, the input program
is parsed and represented in an internal data structure. Then, the actual program
transformation is performed, as specified by command-line arguments.</p>
      <p>
        The tagging technique uses labels to refer to individual rules. Therefore, we
allow the programmer to add labels to the rules of the program to debug. As this
requires an extension of the program syntax, spock offers an interface to dlv [
        <xref ref-type="bibr" rid="ref11">11</xref>
        ] and
lparse/smodels [
        <xref ref-type="bibr" rid="ref12">12</xref>
        ] for computing answer sets of labelled programs.
      </p>
      <p>For illustration of the debugging process, reconsider program Πinv , having the
answer sets X1 = {chekov , scotty} and X2 = {bones , jim, scotty}, and assume that it
is stored in file FILE. The kernel tagging TK[Πinv ] is then obtained by the call
java -jar spock.jar -k FILE .</p>
      <p>By piping the result of the command to an answer-set solver, we obtain the answer sets
X1+ = X1 ∪ {ap(nr4 ), ap(nr6 ), bl(nr1 ), bl(nr2 ), bl(nr3 ), bl(nr5 )} ∪ OK and
X2+ = X2 ∪ {ap(nr2 ), ap(nr5 ), ap(nr6 ), bl(nr1 ), bl(nr3 ), bl(nr4 )} ∪ OK,
where OK = {ok(nr1 ), ok(nr2 ), ok(nr3 ), ok(nr4 ), ok(nr5 ), ok(nr6 )}, extending X1
and X2 by information about the applicability of rules. E.g., the presence of ap(nr4 )
in X1+ indicates that rule r4 is applicable with respect to X1, and hence chekov ∈ X1
but bones ∈/ X1, while bl(nr3 ) ∈ X1+ indicates that r3 is blocked with respect to X1.
This is because scotty ∈ X1.</p>
      <p>The flags ‘-expo’, ‘-exco’, and ‘-exlo’ activate the extrapolation translations
TP, TC, and TL, respectively. Instead of using all three flags simultaneously, setting
‘-ex’ produces the union of the resulting programs. Furthermore, in order to restrict
the scope of transformation TP to a subprogram Π′ (respectively, translations TC, TL
to sets AC, AL of atoms), the names of the considered rules (respectively, atoms)
can be explicitly stated in a comma-separated list following the ‘-exrules=’ (resp.,
‘-exatomsC=’ and ‘-exatomsL=’) flag. Finally, spock allows for computing only
abnormality-minimum answer sets by means of dlv-specific weak constraints. The
flags ‘-minab’, ‘-minabp’, ‘-minabc’, or ‘-minabl’ make spock output weak
constraints for minimising all abnormality tags, program-oriented abnormality tags,
completion-oriented abnormality tags, or loop-oriented abnormality tags, respectively.</p>
      <p>As for our example, recall that Sulu wanted to know why there is no chance for
Uhura and Jim to attend the same party. Therefore, we add the constraints ← not uhura
and ← not jim to Πinv . Let file FILE2 contain the overall program, which does not
have answer sets. The (optimal) answer sets of the tagged program obtained by the call
java -jar spock.jar -k -ex -exrules=r1,r2,r3,r4,r5,r6
-minab FILE2 ,
projected to the atoms occurring in Πinv and the abnormality tags, are given by
{abc(chekov ), bones, chekov , jim, uhura}, {abc(uhura), bones, jim, uhura}, and
{abp(nr5 ), chekov , jim, uhura}, indicating that {bones, chekov , jim, uhura} is not an
answer set of Πinv because atom chekov is not supported. Likewise, uhura is not
supported with respect to {bones, jim, uhura}. Finally, {chekov , jim, uhura} is not an
answer set as it does not satisfy rule r5.
4</p>
    </sec>
    <sec id="sec-3">
      <title>Discussion and Related Work</title>
      <p>
        In this paper, we presented spock, a prototype implementation of a debugging
support tool for answer-set programs. The implemented methodology relies on theoretical
results of previous work [
        <xref ref-type="bibr" rid="ref5">5</xref>
        ] and is based on the idea that programs to be debugged
are translated into other programs having answer sets that offer debugging-relevant
information about the original programs. After an initial kernel transformation, we get
insight into the applicability of rules with respect to individual answer sets. In a further
step, the system allows for identifying causes why interpretations are not answer sets.
Here, spock distinguishes between abnormalities due to missing or spare atoms, or
atoms whose presence in an interpretation is self-caused. In order to restrict the amount
of information returned to the programmer, standard ASP optimisation techniques can
be used to focus on interpretations with a minimal number of abnormalities. In addition
to the tagging technique described here, spock also supports another approach towards
debugging answer-set programs based on meta-programming [
        <xref ref-type="bibr" rid="ref13 ref14">13, 14</xref>
        ]. Future work
includes the integration of further aspects of the translation approach and the design of a
graphical user interface to ease the use of the features spock provides.
      </p>
      <p>
        Implementations of related techniques include smdebug [
        <xref ref-type="bibr" rid="ref3">3</xref>
        ], a prototype debugger
focusing on odd-cycle-free inconsistent programs. The system is designed to find
minimal sets of constraints, restoring consistency when removed from a program. Brain and
De Vos [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ] present the system IDEAS, implementing two query algorithms addressing
the questions why a set of literals is true with respect to some or false with respect to
all answer sets of a program. Both algorithms are procedural and similar to the ones
used in ASP solvers, suggesting that an approach using program-level transformations
would be more practical. Pontelli and Son [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ] developed a preliminary
implementation for their adoption of so-called justifications [
        <xref ref-type="bibr" rid="ref15 ref16">15, 16</xref>
        ] to the problem of debugging
answer-set programs. Their system returns visual output in form of graphs explaining
why atoms are (not) present in an answer set.
      </p>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          1.
          <string-name>
            <surname>Baral</surname>
            ,
            <given-names>C.</given-names>
          </string-name>
          :
          <article-title>Knowledge Representation, Reasoning and Declarative Problem Solving</article-title>
          . Cambridge University Press (
          <year>2003</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref2">
        <mixed-citation>
          2.
          <string-name>
            <surname>Brain</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>De Vos</surname>
            ,
            <given-names>M.:</given-names>
          </string-name>
          <article-title>Debugging Logic Programs under the Answer Set Semantics</article-title>
          .
          <source>In: Proc. ASP'05. Volume 142, CEUR Workshop Proceedings (CEUR-WS.org)</source>
          (
          <year>2005</year>
          )
          <fpage>141</fpage>
          -
          <lpage>152</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref3">
        <mixed-citation>
          3. Syrja¨nen, T.:
          <article-title>Debugging Inconsistent Answer Set Programs</article-title>
          .
          <source>In: Proc. NMR'06</source>
          . (
          <year>2006</year>
          )
          <fpage>77</fpage>
          -
          <lpage>83</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref4">
        <mixed-citation>
          4.
          <string-name>
            <surname>Pontelli</surname>
            ,
            <given-names>E.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Son</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          :
          <article-title>Justifications for Logic Programs under Answer Set Semantics</article-title>
          .
          <source>In: Proc. ICLP'06</source>
          . Springer (
          <year>2006</year>
          )
          <fpage>196</fpage>
          -
          <lpage>210</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref5">
        <mixed-citation>
          5.
          <string-name>
            <surname>Brain</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Gebser</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          , P u¨hrer, J.,
          <string-name>
            <surname>Schaub</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Tompits</surname>
            ,
            <given-names>H.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Woltran</surname>
            ,
            <given-names>S.</given-names>
          </string-name>
          :
          <article-title>Debugging ASP Programs by means of ASP</article-title>
          .
          <source>In: Proc. LPNMR'07</source>
          . Springer (
          <year>2007</year>
          )
          <fpage>31</fpage>
          -
          <lpage>43</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref6">
        <mixed-citation>
          6.
          <string-name>
            <surname>Brain</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Gebser</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          , P u¨hrer, J.,
          <string-name>
            <surname>Schaub</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Tompits</surname>
            ,
            <given-names>H.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Woltran</surname>
          </string-name>
          , S.: “That is Illogical Captain!”
          <article-title>- The Debugging Support Tool spock for Answer-Set Programs: System Description</article-title>
          .
          <source>In: Proc. SEA'07</source>
          . (
          <year>2007</year>
          )
          <fpage>71</fpage>
          -
          <lpage>85</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref7">
        <mixed-citation>
          7.
          <string-name>
            <surname>Delgrande</surname>
            ,
            <given-names>J.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Schaub</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Tompits</surname>
          </string-name>
          , H.:
          <article-title>A Framework for Compiling Preferences in Logic Programs</article-title>
          .
          <source>Theory and Practice of Logic Programming</source>
          <volume>3</volume>
          (
          <year>2003</year>
          )
          <fpage>129</fpage>
          -
          <lpage>187</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref8">
        <mixed-citation>
          8.
          <string-name>
            <surname>Lin</surname>
            ,
            <given-names>F.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Zhao</surname>
            ,
            <given-names>Y.</given-names>
          </string-name>
          :
          <article-title>ASSAT: Computing Answer Sets of a Logic Program by SAT Solvers</article-title>
          .
          <source>Artificial Intelligence</source>
          <volume>157</volume>
          (
          <year>2004</year>
          )
          <fpage>115</fpage>
          -
          <lpage>137</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref9">
        <mixed-citation>
          9.
          <string-name>
            <surname>Clark</surname>
            ,
            <given-names>K.</given-names>
          </string-name>
          :
          <article-title>Negation as Failure</article-title>
          . In: Logic and
          <string-name>
            <given-names>Data</given-names>
            <surname>Bases</surname>
          </string-name>
          . Plenum Press (
          <year>1978</year>
          )
          <fpage>293</fpage>
          -
          <lpage>322</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref10">
        <mixed-citation>
          10. GNU General Public License - Version 2, June 1991.
          <article-title>Free Software Foundation Inc</article-title>
          . (
          <year>1991</year>
          ) http://www.gnu.org/copyleft/gpl.html
        </mixed-citation>
      </ref>
      <ref id="ref11">
        <mixed-citation>
          11.
          <string-name>
            <surname>Leone</surname>
            ,
            <given-names>N.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Pfeifer</surname>
            ,
            <given-names>G.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Faber</surname>
            ,
            <given-names>W.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Eiter</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Gottlob</surname>
            ,
            <given-names>G.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Perri</surname>
            ,
            <given-names>S.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Scarcello</surname>
            ,
            <given-names>F.</given-names>
          </string-name>
          :
          <article-title>The DLV System for Knowledge Representation and Reasoning</article-title>
          .
          <source>ACM Transactions on Computational Logic</source>
          <volume>7</volume>
          (
          <year>2006</year>
          )
          <fpage>499</fpage>
          -
          <lpage>562</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref12">
        <mixed-citation>
          12.
          <string-name>
            <surname>Simons</surname>
            ,
            <given-names>P.</given-names>
          </string-name>
          , Niemela¨,
          <string-name>
            <given-names>I.</given-names>
            ,
            <surname>Soininen</surname>
          </string-name>
          ,
          <string-name>
            <surname>T.</surname>
          </string-name>
          :
          <article-title>Extending and Implementing the Stable Model Semantics</article-title>
          .
          <source>Artificial Intelligence</source>
          <volume>138</volume>
          (
          <year>2002</year>
          )
          <fpage>181</fpage>
          -
          <lpage>234</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref13">
        <mixed-citation>
          13. P u¨hrer, J.:
          <article-title>On Debugging of Propositional Answer-Set Programs</article-title>
          .
          <source>Master's thesis</source>
          , Vienna University of Technology, Austria (
          <year>2007</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref14">
        <mixed-citation>
          14.
          <string-name>
            <surname>Gebser</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          , P u¨hrer, J.,
          <string-name>
            <surname>Schaub</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Tompits</surname>
          </string-name>
          , H.:
          <article-title>A Meta-Programming Technique for Debugging Answer-Set Programs</article-title>
          .
          <source>In: Proc. AAAI</source>
          '
          <fpage>08</fpage>
          . (
          <year>2008</year>
          ) To appear
        </mixed-citation>
      </ref>
      <ref id="ref15">
        <mixed-citation>
          15.
          <string-name>
            <surname>Roychoudhury</surname>
            ,
            <given-names>A.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Ramakrishnan</surname>
            ,
            <given-names>C.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Ramakrishnan</surname>
            ,
            <given-names>I.</given-names>
          </string-name>
          :
          <article-title>Justifying Proofs using Memo Tables</article-title>
          .
          <source>In: Proc. PPDP'00</source>
          . (
          <year>2000</year>
          )
          <fpage>178</fpage>
          -
          <lpage>189</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref16">
        <mixed-citation>
          16.
          <string-name>
            <surname>Specht</surname>
          </string-name>
          , G.:
          <article-title>Generating Explanation Trees even for Negations in Deductive Database Systems</article-title>
          .
          <source>In: Proc. LPE'93</source>
          . (
          <year>1993</year>
          )
          <fpage>8</fpage>
          -
          <lpage>13</lpage>
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>