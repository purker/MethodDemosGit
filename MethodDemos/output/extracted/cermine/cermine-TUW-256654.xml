<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta />
    <article-meta>
      <contrib-group>
        <contrib contrib-type="author">
          <string-name>M. Anton Ertl</string-name>
        </contrib>
        <contrib contrib-type="author">
          <string-name>TU Wien</string-name>
        </contrib>
      </contrib-group>
      <pub-date>
        <year>2000</year>
      </pub-date>
      <abstract>
        <p>A section is a contiguous region of memory, to which data or code can be appended (like the Forth dictionary). Assembly languages and linkers have supported multiple sections for a long time. This paper A particular instance of this problem is when A describes the benefits of supporting multiple sec- is a colon definition under construction, and B is tions in Forth, interfaces and implementation tech- the data for a string or floating-point literal. Forth niques. compilers traditionally work around this by not requiring contiguity. A typical solution is to call a word such as (s") 1 Introduction or flit, and follow that with the inline data. These words get the return address from the return stack, A section is a contiguous memory area, to which use that to push the relevant data on the data/FP new data can be appended at the end; the Forth stack, then increment the return address to skip dictionary is a section. Assemblers and linkers over the data, and then either return to the changed have supported multiple sections or segments for return address or jump to it. Both ways are very exmany decades [Lev00]. In contrast, Forth tradition- pensive on modern CPUs, because they cause misally has had only one section; some systems have predictions from the hardware return stack1: If the had separated headers (another section), and cross- changed address is returned from, the return incurs compilers have uninitialized memory for buffer:, a branch misprediction (about 20 cycles on a modbut by and large, Forth systems have made do ern Intel or AMD CPU); if the changed address is with just one section: the dictionary. With mul- jumped to, the jump has a chance to predict cortiple sections, each section has it's own start, dic- rectly, but all outer returns will mispredict once (at tionary pointer (what here reads), and end (used about 20 cycles per misprediction). in unused, but otherwise not used much). A faster approach is to jump across the data, and This paper presents various uses of sections and then let some code push the data on the data/FP why they are better than the current workarounds stack. This does not cause significant mispredic(Section 2), presents a programming interface (Sec- tions, but the code is bigger (jump plus inlined littion 3), and discusses various implementation ap- eral code). proaches (Section 4). Finally, if you put the data elsewhere (i.e., a different section), you get fewer mispredictions, and you save the space for the jump around the data. 2 Uses As an example of the benefit of putting the data out-of-line, consider the following micro2.1 Nested structures benchmark: You often build one structure A in memory, and in \ inline variant the middle of that, have to build some out-of-line : foo1 123e f+ ; part B, and afterwards continue building A. If you have two sections, that is easy: you put A in one \ out-of-line simulation section, and B in the other section. In Forth, you 123e fconstant x traditionally use one of the workarounds: : foo2 x f+ ; • You select a representation for A that does not defer foo require contiguity. : bench 0e 100000000 0 do foo loop f. cr ;</p>
      </abstract>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>-</title>
      <p>• You put B in allocated memory.
Unfortunately, that usually means that B does not
survive a savesystem, and it’s also cumbersome
if B is a growable structure.
∗Correspondence Address: Institut fu¨r Computer- 1The hardware return stack is not the Forth return stack;
sprachen, Technische Universit¨at Wien, Argentinierstraße 8, it is a hardware branch predictor that predicts that returns
A-1040 Wien, Austria; anton@mips.complang.tuwien.ac.at will return right behind the corresponding calls).</p>
      <p>With VFX2 4.71 on a Core i3-3227U (Ivy Bridge), : foo 10000000 0 do 1 x +! loop ;
the foo1 version takes 48 cycles, 11 instructions here to x 0 ,
and 1 branch misprediction per iteration, while the foo
foo2 version takes 6.5 cycles, 7 instructions, and 0
branch mispredictions per iteration. If VFX would With sections, the data can just stay in the
orput the floating-point number in foo1 in a separate dinary dictionary section, and the code can have a
section instead of inline, it could achieve the same separate section (or a stack of them, for quotations),
performance as foo2. thus separating code and data for good. Moreover,</p>
      <p>Quotations are another case of having to build systems can get rid of all the padding they insert at
something else in the middle of a colon definition; the moment to work around this problem.
in this case the “something else” is a colon
definition itself. Again, the usual implementation is to 2.3 Further uses
jump around it (used in, e.g., Gforth), and putting
the quotation in a separate section can save that The uses above are not an exhaustive list. When I
overhead. In this case, however, two sections are presented sections to other Gforth developers, they
not sufficient, as quotations can be nested arbitrar- came up with uses I had not thought of during
deily deeply, so you need a whole stack of sections. velopment (e.g., simplifying the locals
implementa</p>
      <p>Locals are another case where you have to build tion).
some additional stuff (in this case, headers) in the
middle of a colon definition; the headers are no 3 Progamming interface
longer needed at the end of the colon definition and
their space can be reclaimed, so the usual inline- In the following, “switching a section” means that
and-skip approach is particularly inefficient here. the dictionary pointer (what here reports, and
Locals in Gforth were developed before sections, where allot allocates) is now the dictionary pointer
and the code for dealing with that problem is com- of the switched-to section.
plicated; we foresee it becoming much simpler once The words for working with sections are:
we take advantage of sections, but we have not made
these changes yet. .sections ( -- )</p>
      <p>One way of implementing recognizers is to create display all sections
a temporary word for each recognized string, then next-section ( -- )
treat the temporary word like an ordinary word switch the current section to the next section
(i.e., execute or compile, it), and finally, delete in the stack, creating it if necessary
the temporary if no longer needed [Ert16]. With
sections, this is relatively straightforward to imple- previous-section ( -- )
ment (especially the case when you cannot delete switch the current section to previous section
the “temporary” and have to make it permanent). (the next section still exists afterwards).
2.2</p>
      <p>Separate code and data
Most Forth systems still put code and data in the
dictionary in an interleaved way. Since the
Pentium (1993) and its separate instruction and data
caches, this interleaving has been a performance
problem on Intel and AMD CPUs (e.g., ). Forth
systems have tried to mitigate this problem by at
least not putting code and data in the same cache
line (by inserting appropriate padding); e.g., VFX
aligns data to 32-byte boundaries, but apparently
64-byte alignment is necessary on recent Intel CPUs
to achieve the desired effect. And in some cases an
important padding is missing, resulting in 350–500
cycles per iteration in VFX and SwiftForth:
0 value x</p>
      <p>2I use VFX for the performance results in this paper,
because it is a high-performance system, where one would
expect good performance also for the micro-benchmarks I
present.
extra-section ( size "name" -- )
create a named section stack name.
name execution: ( xt -- )
switch the current section to the first section of
name if there is no outer call to name, or the
next section if there is; execute xt, and switch
the current section back on leaving name.</p>
    </sec>
    <sec id="sec-2">
      <title>For multi-tasking, the dictionary and the named</title>
      <p>section stacks should have per-task instances that
are instantiated on-demand.</p>
      <p>Currently the section implementation in Gforth
only supports the dictionary as a section stack,
named sections without stack, and no proper
handling of per-task section stacks, yet.
4</p>
      <sec id="sec-2-1">
        <title>Implementation</title>
      </sec>
    </sec>
    <sec id="sec-3">
      <title>The implementation of sections for use within a session is pretty straightforward: Just a data structure with start, end, and section-dp per section, Ertl</title>
      <p>and ways to manage named sections and a stack
of sections.</p>
      <p>Things get more interesting when it comes to
implementing savesystem. There are two basic
options:</p>
    </sec>
    <sec id="sec-4">
      <title>The interface for working with sections is simple,</title>
      <p>consisting of just a few words.</p>
      <p>The implementation is not that complex, either.
Dealing with sections across savesystem does take
some additional effort, however.
• Keep all the sections, and preserve them into
the next session.</p>
    </sec>
    <sec id="sec-5">
      <title>The current implementation in Gforth takes the collapsing approach. One advantage is that the loader (which does not know about sections) does not need to be changed.</title>
      <p>Traditionally, Gforth creates a relocatable image
by running Gforth twice and doing the same things,
and finally saving one non-relocatable image per
run; the non-relocatable images are for different
addresses, and by comparing them, we can tell if a
cell is an address (then they differ by the difference
in image start addresses), or something else (then
they do not differ); if they differ, but by a different
amount (e.g., because the cell contains the address
of an allocated piece of memory), the process
outputs a warning.</p>
      <p>With sections, this process had to be enhanced
as follows: When saving an image, first the
dictionary is written, then the other sections, and
sections meta-data last. The sections meta-data
contains the length and the original start address of
each section, and also allows us to determine where
in the non-relocatable image the sections are. If two
cells differ, the comparison program looks for each
image, whether the value of the cell, interpreted as
address points into one of the sections, and
computes the offset into the collapsed image from that;
if, for both images, this gives the same offset o, then
the cell is a relocatable address, with value
imagestart +o, and that’s what the comparator stores in
the relocatable image. I.e., in the relocatable image,
the original section structure is no longer present.</p>
      <p>Of course, that is not the only option. E.g., a
system without relocatable images could just save
each section as ELF or COFF section with a fixed
virtual start address. The OS loader would then
load all the sections where they belong (untested).
5</p>
      <sec id="sec-5-1">
        <title>Conclusion</title>
        <p>Supporting multiple sections in a Forth system
provides a number of benefits. Forth systems have used
workarounds to deal with the absence of sections,
but these workarounds have a cost both in
complexity and sometimes also in performance that can be
eliminated by adding sections.</p>
      </sec>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          <article-title>• Collapse all the sections into one (the dictio-</article-title>
          [Ert16]
          <string-name>
            <given-names>M. Anton</given-names>
            <surname>Ertl</surname>
          </string-name>
          . Recognizers:
          <article-title>Arguments nary), and start the next session with just the and design decisions. In 32nd EuroForth dictionary, and with empty named sections</article-title>
          .
          <source>Conference</source>
          ,
          <year>2016</year>
          .
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>