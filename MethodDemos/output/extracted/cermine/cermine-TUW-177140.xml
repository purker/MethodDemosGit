<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta />
    <article-meta>
      <title-group>
        <article-title>Testing Relativised Uniform Equivalence under Answer-Set Projection in the System cc⊤⋆</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author">
          <string-name>Johannes Oetsch</string-name>
          <email>oetsch@kr.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Martina Seidl</string-name>
          <email>seidl@big.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff1">1</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Hans Tompits</string-name>
          <email>tompits@kr.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Stefan Woltran</string-name>
          <email>woltran@dbai.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <aff id="aff0">
          <label>0</label>
          <institution>Institut fu ̈r Informationssysteme, Technische Universita ̈t Wien</institution>
          ,
          <addr-line>Favoritenstraße 9-11, A-1040 Vienna</addr-line>
          ,
          <country country="AT">Austria</country>
        </aff>
        <aff id="aff1">
          <label>1</label>
          <institution>Institut fu ̈r Softwaretechnik, Technische Universita ̈t Wien</institution>
          ,
          <addr-line>Favoritenstraße 9-11, A-1040 Vienna</addr-line>
          ,
          <country country="AT">Austria</country>
        </aff>
      </contrib-group>
      <abstract>
        <p>The system cc⊤ is a tool for testing correspondence between propositional logic programs under the answer-set semantics with respect to different refined notions of program correspondence. The underlying methodology of cc⊤ is to reduce a given correspondence problem to the satisfiability problem of quantified propositional logic and to employ extant solvers for the latter language as back-end inference engines. In a previous version of cc⊤, the system was designed to test correspondence between programs based on relativised strong equivalence under answer-set projection. Such a setting generalises the standard notion of strong equivalence by taking the alphabet of the context programs as well as the projection of the compared answer sets to a set of designated output atoms into account. This paper outlines a newly added component of cc⊤ for testing similarly parameterised correspondence problems based on uniform equivalence.</p>
      </abstract>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>-</title>
      <p>
        An important issue in software development is to determine whether two encodings of a
given problem are equivalent, i.e., whether they yield the same result on a given problem
instance. Depending on the context of problem representations, different definitions of
“equivalence” are useful and desirable. The system cc⊤ [
        <xref ref-type="bibr" rid="ref1">1</xref>
        ] (short for
“correspondencechecking tool”) is devised as a checker for a broad range of different such comparison
relations defined between disjunctive logic programs (DLPs) under the answer-set
semantics [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ]. In a previous version of cc⊤, the system was designed to test
correspondence between logic programs based on relativised strong equivalence under
answerset projection. Such a setting generalises the standard notion of strong equivalence [
        <xref ref-type="bibr" rid="ref3">3</xref>
        ]
by taking the alphabet of the context programs as well as the projection of the
compared answer sets to a set of designated output atoms into account [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ]. The latter feature
reflects the common use of local (hidden) variables which may be used in submodules
but which are ignored in the final computation.
      </p>
      <p>
        In this paper, we outline a newly added component of cc⊤ for testing similarly
parameterised correspondence problems but generalising uniform equivalence [
        <xref ref-type="bibr" rid="ref5">5</xref>
        ]—that
is, we deal with a component of cc⊤ for testing relativised uniform equivalence under
answer-set projection. This notion, recently introduced in previous work [
        <xref ref-type="bibr" rid="ref6">6</xref>
        ], is less
restrained, along with a slightly lower complexity than its strong counterpart (provided
that the polynomial hierarchy does not collapse). However, in general, it is still outside
a feasible means to be computed by propositional answer-set solvers (again under the
proviso that the polynomial hierarchy does not collapse). Yet, like relativised strong
equivalence with projection, it can be efficiently reduced to the satisfiability problem
of quantified propositional logic, an extension of classical propositional logic
characterised by the condition that its sentences, generally referred to as quantified Boolean
formulas (QBFs), are permitted to contain quantifications over atomic formulas. The
architecture of cc⊤ takes advantage of this and uses extant solvers for quantified
propositional logic as back-end reasoning engines.
2
      </p>
    </sec>
    <sec id="sec-2">
      <title>Background</title>
      <p>Propositional disjunctive logic programs (DLPs) are finite sets of rules of the form
a1 ∨ · · · ∨ al ← al+1, . . . , am, not am+1, . . . , not an,
(1)
n ≥ m ≥ l ≥ 0, where all ai are propositional atoms from some fixed universe U and
not denotes default negation. An interpretation I is a model of a program P ,
denoted by I |= P , iff for every rule from P (as defined above), it holds that, whenever
{al+1, . . . , am} ⊆ I and {am+1, . . . , an} ∩ I = ∅, then {a1, . . . , al} ∩ I 6= ∅.</p>
      <p>
        Following Gelfond and Lifschitz [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ], an interpretation I is an answer set of a
program P iff it is a minimal model of the reduct P I , resulting from P by (i) deleting all
rules containing default negated atoms not a such that a ∈ I, and (ii) deleting all default
negated atoms in the remaining rules. The collection of all answer sets of a program P
is denoted by AS(P ).
      </p>
      <p>
        In order to semantically compare programs, different notions of equivalence have
been introduced in the context of the answer-set semantics. Two programs, P and Q,
are strongly equivalent iff, for any program R, AS (P ∪ R) = AS (Q ∪ R); they are
uniformly equivalent iff, for any set F of facts, AS (P ∪ F ) = AS (Q ∪ F ). While strong
equivalence is relevant for program optimisation and modular programming in
general [
        <xref ref-type="bibr" rid="ref7 ref8 ref9">7–9</xref>
        ], uniform equivalence is useful in the context of hierarchically structured
program components, where lower-layered components provide input for higher-layered
ones. In abstracting from strong and uniform equivalence, Eiter et al. [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ] introduced the
notion of a correspondence problem which allows to specify (i) a context, i.e., a class of
programs used to be added to the programs under consideration, and (ii) the comparison
relation that has to hold between the answer sets of the extended programs. Following
Eiter et al. [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ], we focus here on correspondence problems where the comparison
relation is a projection (to a given set of atoms) of the standard subset or set-equality
relation. The context, on the other hand, contains all programs which are sets of facts
over some set A of atoms, identified with the power set 2A over A.
      </p>
      <p>
        Thus, the concrete formal realisation of relativised uniform equivalence with
projection is as follows [
        <xref ref-type="bibr" rid="ref6">6</xref>
        ]: Consider a quadruple Π = (P, Q, 2A, ⊙B), where P, Q are
programs, A, B are sets of atoms, ⊙ ∈ {⊆, =}, and S ⊙B S′ stands for {I ∩ B | I ∈
S} ⊙ {J ∩ B | J ∈ S′}. Π is called a propositional query equivalence problem (PQEP)
if ⊙B is given by =B, and a propositional query inclusion problem (PQIP) if ⊙B is
given by ⊆B. We say that Π holds iff, for each F ∈ 2A, AS (P ∪ F ) ⊙B AS (Q ∪ F ).
Note that (P, Q, 2A, =B) holds iff (P, Q, 2A, ⊆B) and (Q, P, 2A, ⊆B) jointly hold. We
also refer to A as the context set and to B as the projection set.
      </p>
      <p>For illustration, consider the programs</p>
      <p>P = {sad ∨ happy ←; sappy ← sad , happy ; confused ← sappy } and
Q = {sad ← not happy ; happy ← not sad ; confused ← sad , happy },
which express some knowledge about the “moods” of a person, where P uses an
auxiliary atom sappy . The programs can be seen as queries over a propositional database
which consists of facts from, e.g., {happy , sad }. For the output, it would be natural
to consider the common intensional atom confused . We thus consider Π = (P, Q,
2A, =B) as a suitable PQEP, specifying A = {happy , sad } and B = {confused }. It is
a straightforward matter to check that Π, defined in this way, holds.
3</p>
    </sec>
    <sec id="sec-3">
      <title>System Specifics</title>
      <p>
        As pointed out in Section 1, the overall approach of cc⊤ is to reduce PQEPs and
PQIPs to the satisfiability problem of quantified propositional logic and to use extant
solvers [
        <xref ref-type="bibr" rid="ref10">10</xref>
        ] for the latter language as back-end inference engines for evaluating the
resulting formulas. The reductions required for this approach are described by Oetsch
et al. [
        <xref ref-type="bibr" rid="ref6">6</xref>
        ] but cc⊤ employs additional optimisations [
        <xref ref-type="bibr" rid="ref11">11</xref>
        ]. The overall architecture of
cc⊤ is depicted in Fig. 1. The system takes as input two programs, P and Q, and two
sets of atoms, A and B. Command-line options select between two kinds of reductions,
a direct one or an optimised one, and whether the programs are compared as a PQIP or
a PQEP. Detailed invocation syntax can be requested with option -h.
      </p>
      <p>Next, let us turn our attention to the concrete usage of cc⊤. The syntax of the
programs is the basic DLV syntax.3 In this syntax, the two programs P and Q from the
above example look as follows:</p>
      <p> sad v happy.</p>
      <p>P =  sappy :- sad, happy.</p>
      <p> confused :- sappy.</p>
      <p> sad :- not happy.</p>
      <p>Q =  happy :- not sad.</p>
      <p> confused :- sad, happy.</p>
      <p>Let us assume that the two programs are stored in the files P.dl and Q.dl. The two
sets A and B from the example are written as comma separated lists within brackets:
3 See http://www.dlvsystem.com/ for details about DLV.</p>
      <p>program P</p>
      <p>context set A
program Q</p>
      <p>projection set B
input files
ccT
non-normal form
QBF
qst nQoBrFmal form
normal form</p>
      <p>QBF-solver
non-normal form</p>
      <p>QBF-solver
context set A: (happy, sad),
projection set B: (confused).</p>
      <p>We assume them to be stored in files A and B. The concrete invocation syntax for
translating the problem Π = (P, Q, 2A, =B ) into a corresponding QBF is</p>
      <p>ccT -u -e P.dl Q.dl A B
where the command-line options ‘-u’ and ‘-e’ evince that we want to check for a
notion of uniform equivalence. To check for uniform inclusion, replace ‘-e’ by ‘-i’ or
omit the parameter.</p>
      <p>
        The output will be written directly to the standard-output device from where it can
serve as input for QBF-solvers. Since cc⊤ does not output QBFs in a specific
normal form, for using solvers requiring normal-form QBFs, the additional normaliser
qst [
        <xref ref-type="bibr" rid="ref12">12</xref>
        ] is employed. Finally, cc⊤ is developed entirely in ANSI C; hence, it is highly
portable. The parser for the input data was written using LEX and YACC. Further
information about cc⊤ is available at
      </p>
      <p>http://www.kr.tuwien.ac.at/research/ccT/.</p>
      <p>
        Experimental evaluations using different QBF-solvers are reported in a companion
paper [
        <xref ref-type="bibr" rid="ref11">11</xref>
        ].
4 cc⊤ on Stage
In this section, we give a brief and, for space reasons, rather informal discussion on
an application of cc⊤ for verification and debugging needs in the context of a logic
programming course at our university. This is not only to make the concept of
correspondence checking within a refined framework more tangible but also to show a
concrete application field. As a subtask in this course, the students have to model an
air-conditioning system consisting of components for cooling and heating, as well as a
valve and a switch element. More specifically, they are given a detailed description of
the desired input/output behaviour of the components and the system as a whole, and
they have to develop logic programs that comply with that specification. Without
going into the details, such a specification could demand that the input of, e.g., a heating
component consists of an airstream which can be 0 (air does not float) or 1 (air floats)
and has an associated temperature (an integer from a certain range) as well as a
control parameter (also an integer) to control the heating power. Analogously to the input
airstream, a heater has an output airstream. Now, the specification determines the
behaviour of the component with respect to the output airstream conditioned by the input
airstream and the control parameter.
      </p>
      <p>A straightforward strategy to verify the student’s solution is the following: (i) write
a sample solution that correctly implements the specification, (ii) define test cases, i.e.,
sets of facts representing the input for a component, and (iii) compare the output of our
sample solution against the output of the student’s component. This method, used in
previous years and implemented by a more or less simple script, is obviously sound but
not complete with respect to detecting potential flaws. Here comes cc⊤ into the play:
this verification problem can be stated as a PQEP4, where the context set consist of the
atoms that constitute the input and the projection set contains the atoms that represent
the output of a component (thus allowing the students an unrestricted use of additional
atoms in their programs). Hence, we have a sound and complete method for verification
at hand. We employed this approach last winter semester for evaluating the submitted
exercises and it compared favourably to the old method.</p>
      <p>
        Two things were necessary to obtain reasonable run-times for evaluating the QBFs,
however: First, we had to restrict the context class, and second, we added additional
constraints to the programs to impose some restrictions on the input of the components, like
specifying not more than one input value for an airstream temperature. The later point
is also to make the test more fair. Albeit we loose completeness in the sense from above
this way, we are able to verify thousands of test cases implicitly with the cc⊤-approach
compared to only 10 to 20 test cases with the old script. Also, a direct comparison of the
results between the two test approaches is very encouraging: all errors detected by the
script were also detected by the cc⊤-approach, while 26 (out of 200) components were
classified as correct by the script but as non-equivalent to our sample solution by cc⊤.
It is worth mentioning that on these problem instances the solver qpro [
        <xref ref-type="bibr" rid="ref13">13</xref>
        ] showed,
with a median run-time of 2.54 seconds, excellent performance.
5
      </p>
    </sec>
    <sec id="sec-4">
      <title>Conclusion</title>
      <p>
        In this paper, we presented the architecture and system specifics of a new
component of the tool cc⊤ for testing parameterised correspondence problems based on
uniform equivalence for disjunctive logic programs under the answer-set semantics. The
correspondence problems are efficiently compiled to quantified Boolean formulas for
which many solvers have been implemented. As related work, we mention the system
DLPEQ [
        <xref ref-type="bibr" rid="ref14">14</xref>
        ] for deciding ordinary equivalence, which is based on a reduction to logic
programs, and the system SELP [
        <xref ref-type="bibr" rid="ref15">15</xref>
        ] for checking strong equivalence, which is based
4 The programs under consideration are not propositional, i.e., they contain variables.
Nevertheless, the domain, i.e., the set of constants that can occur in the programs is finite and such
programs can always be treated as a shorthand for the respective propositional programs.
on a reduction to classical logic quite in the spirit of our implementation approach.
We successfully applied cc⊤ for the verification of students’ programs obtained from
a laboratory course about logic programming at our university. Future work includes
extending our methods to non-ground answer set programs, which are important in
practical applications.
      </p>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          1.
          <string-name>
            <surname>Oetsch</surname>
            ,
            <given-names>J.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Seidl</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Tompits</surname>
            ,
            <given-names>H.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Woltran</surname>
            ,
            <given-names>S.:</given-names>
          </string-name>
          <article-title>ccT: A Tool for Checking Advanced Correspondence Problems in Answer-Set Programming</article-title>
          .
          <source>In Proceedings of the 15th International Conference on Computing (CIC</source>
          <year>2006</year>
          ), IEEE Computer Society Press (
          <year>2006</year>
          )
          <fpage>3</fpage>
          -
          <lpage>10</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref2">
        <mixed-citation>
          2.
          <string-name>
            <surname>Gelfond</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Lifschitz</surname>
            ,
            <given-names>V.</given-names>
          </string-name>
          :
          <article-title>Classical Negation in Logic Programs</article-title>
          and
          <string-name>
            <given-names>Disjunctive</given-names>
            <surname>Databases</surname>
          </string-name>
          .
          <source>New Generation Computing</source>
          <volume>9</volume>
          (
          <year>1991</year>
          )
          <fpage>365</fpage>
          -
          <lpage>385</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref3">
        <mixed-citation>
          3.
          <string-name>
            <surname>Lifschitz</surname>
            ,
            <given-names>V.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Pearce</surname>
            ,
            <given-names>D.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Valverde</surname>
            ,
            <given-names>A.</given-names>
          </string-name>
          :
          <article-title>Strongly Equivalent Logic Programs</article-title>
          .
          <source>ACM TOCL 2</source>
          (
          <issue>4</issue>
          ) (
          <year>2001</year>
          )
          <fpage>526</fpage>
          -
          <lpage>541</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref4">
        <mixed-citation>
          4.
          <string-name>
            <surname>Eiter</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Tompits</surname>
            ,
            <given-names>H.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Woltran</surname>
            ,
            <given-names>S.</given-names>
          </string-name>
          :
          <article-title>On Solution Correspondences in Answer Set Programming</article-title>
          .
          <source>In Proceedings of the 19th International Joint Conference on Artificial Intelligence (IJCAI</source>
          <year>2005</year>
          ).
          <article-title>(</article-title>
          <year>2005</year>
          )
          <fpage>97</fpage>
          -
          <lpage>102</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref5">
        <mixed-citation>
          5.
          <string-name>
            <surname>Eiter</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Fink</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          :
          <article-title>Uniform Equivalence of Logic Programs under the Stable Model Semantics</article-title>
          .
          <source>In Proceedings of the 19th International Conference on Logic Programming (ICLP 2003). Volume 2916 of LNCS</source>
          , Springer (
          <year>2003</year>
          )
          <fpage>224</fpage>
          -
          <lpage>238</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref6">
        <mixed-citation>
          6.
          <string-name>
            <surname>Oetsch</surname>
            ,
            <given-names>J.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Tompits</surname>
            ,
            <given-names>H.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Woltran</surname>
            ,
            <given-names>S.</given-names>
          </string-name>
          :
          <article-title>Facts do not Cease to Exist Because They are Ignored: Relativised Uniform Equivalence with Answer-Set Projection</article-title>
          .
          <source>In Proceedings of the 22nd National Conference on Artificial Intelligence (AAAI</source>
          <year>2007</year>
          ), AAAI Press (
          <year>2007</year>
          )
          <fpage>458</fpage>
          -
          <lpage>464</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref7">
        <mixed-citation>
          7.
          <string-name>
            <surname>Eiter</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Fink</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Tompits</surname>
            ,
            <given-names>H.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Woltran</surname>
            ,
            <given-names>S.:</given-names>
          </string-name>
          <article-title>Simplifying Logic Programs Under Uniform and Strong Equivalence</article-title>
          .
          <source>In Proceedings of the 7th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR-7)</source>
          . Volume 2923 of LNCS, Springer (
          <year>2004</year>
          )
          <fpage>87</fpage>
          -
          <lpage>99</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref8">
        <mixed-citation>
          8.
          <string-name>
            <surname>Pearce</surname>
            ,
            <given-names>D.</given-names>
          </string-name>
          :
          <article-title>Simplifying Logic Programs under Answer Set Semantics</article-title>
          .
          <source>In Proceedings of the 20th International Conference on Logic Programming (ICLP 2004). Volume 3132 of LNCS</source>
          , Springer (
          <year>2004</year>
          )
          <fpage>210</fpage>
          -
          <lpage>224</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref9">
        <mixed-citation>
          9.
          <string-name>
            <surname>Lin</surname>
            ,
            <given-names>F.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Chen</surname>
            ,
            <given-names>Y.</given-names>
          </string-name>
          :
          <article-title>Discovering Classes of Strongly Equivalent Logic Programs</article-title>
          .
          <source>In Proceedings of the 19th International Joint Conference on Artificial Intelligence (IJCAI</source>
          <year>2005</year>
          ).
          <article-title>(</article-title>
          <year>2005</year>
          )
          <fpage>516</fpage>
          -
          <lpage>521</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref10">
        <mixed-citation>
          10.
          <string-name>
            <surname>Le Berre</surname>
            ,
            <given-names>D.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Narizzano</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Simon</surname>
            ,
            <given-names>L.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Tacchella</surname>
            ,
            <given-names>L.A.</given-names>
          </string-name>
          :
          <article-title>The Second QBF Solvers Comparative Evaluation</article-title>
          .
          <source>In Proceedings of the 7th International Conference on Theory and Applications of Satisfiability Testing (SAT</source>
          <year>2004</year>
          ). Volume 3542 of LNCS, Springer (
          <year>2005</year>
          )
          <fpage>376</fpage>
          -
          <lpage>392</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref11">
        <mixed-citation>
          11.
          <string-name>
            <surname>Oetsch</surname>
            ,
            <given-names>J.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Seidl</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Tompits</surname>
            ,
            <given-names>H.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Woltran</surname>
            ,
            <given-names>S.:</given-names>
          </string-name>
          <article-title>An Extension of the System cc⊤ for Testing Relativised Uniform Equivalence under Answer-Set Projection (</article-title>
          <year>2007</year>
          )
          <article-title>Submitted draft</article-title>
          .
        </mixed-citation>
      </ref>
      <ref id="ref12">
        <mixed-citation>
          12.
          <string-name>
            <surname>Zolda</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          :
          <article-title>Comparing Different Prenexing Strategies for Quantified Boolean Formulas (</article-title>
          <year>2004</year>
          )
          <string-name>
            <surname>Master's Thesis</surname>
          </string-name>
          , Vienna University of Technology.
        </mixed-citation>
      </ref>
      <ref id="ref13">
        <mixed-citation>
          13.
          <string-name>
            <surname>Egly</surname>
            ,
            <given-names>U.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Seidl</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Woltran</surname>
            ,
            <given-names>S.:</given-names>
          </string-name>
          <article-title>A Solver for QBFs in Nonprenex Form</article-title>
          .
          <source>In Proceedings of the 17th European Conference on Artificial Intelligence (ECAI</source>
          <year>2006</year>
          ).
          <article-title>(</article-title>
          <year>2006</year>
          )
          <fpage>477</fpage>
          -
          <lpage>481</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref14">
        <mixed-citation>
          14.
          <string-name>
            <surname>Oikarinen</surname>
            ,
            <given-names>E.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Janhunen</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          :
          <article-title>Verifying the Equivalence of Logic Programs in the Disjunctive Case</article-title>
          .
          <source>In Proceedings of the 7th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR-7)</source>
          . Volume 2923 of LNCS, Springer (
          <year>2004</year>
          )
          <fpage>180</fpage>
          -
          <lpage>193</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref15">
        <mixed-citation>
          15.
          <string-name>
            <surname>Chen</surname>
            ,
            <given-names>Y.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Lin</surname>
            ,
            <given-names>F.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Li</surname>
            ,
            <given-names>L.</given-names>
          </string-name>
          :
          <article-title>SELP - A System for Studying Strong Equivalence Between Logic Programs</article-title>
          .
          <source>In Proceedings of the 8th International Conference on Logic Programming and Non Monotonic Reasoning (LPNMR</source>
          <year>2005</year>
          ). Volume 3552 of LNCS, Springer (
          <year>2005</year>
          )
          <fpage>442</fpage>
          -
          <lpage>446</lpage>
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>