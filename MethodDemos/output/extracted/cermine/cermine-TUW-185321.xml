<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta />
    <article-meta>
      <title-group>
        <article-title>Bridging Semantic Heterogeneities in Open Source Software Development Projects with Semantic Web Technologies</article-title>
      </title-group>
      <contrib-group>
        <aff id="aff0">
          <label>0</label>
          <institution>Wikan Danar Sunindyo and Stefan Biffl (Faculty Mentor) Institute of Software Technology and Interactive Systems Vienna University of Technology Vienna</institution>
          ,
          <country country="AT">Austria</country>
        </aff>
      </contrib-group>
      <abstract>
        <p>- The semantic heterogeneity of Open Source Software (OSS) development projects comes from the using of different tools and models by the various stakeholders. These differences make the process of integration become difficult, since the project managers should recognize the different structure of the tools and models for analyzing the state of the projects. This manual analysis is costly and error prone. In this work we propose a semantic web technology approach to bridge these semantic heterogeneities, by using engineering knowledge base (EKB). The EKB enables mapping between local and domain ontology layers to allow querying the local tool knowledge using the domain-level knowledge and syntax. We empirically evaluate the feasibility of an EKB-based project monitoring system based on real-world data.</p>
      </abstract>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>I. INTRODUCTION</title>
      <p>Stakeholders in open source software (OSS)
usually come from heterogeneous backgrounds and use a
range of tools and models for developing and
managing their common software. For example, the
developers may use SVN for managing source code
versions and mailing lists for communication between
developers that become the use case for this paper.</p>
      <p>In the OSS development projects, the stakeholders
often work globally distributed and in different time
zones. Therefore, the project managers need to be
able to manage and monitor the status of the project
and how the people work, e.g., by monitoring the
level of communication between the stakeholders. To
address this goal, project managers often use a
quantitative measurement approach for managing and
monitoring the status of the projects, i.e., finding
related issues in SVN and mailing list for a certain
projects. Further analysis to identify related
information across data sources gets conducted manually,
which is costly, error-prone, and often takes too
much time for the analysis results to be useful for
decision making.</p>
      <p>In this paper we propose the use of a semantic web
technology approach called engineering knowledge
base (EKB). The principle of EKB is using ontology
to model the project/domain knowledge that are used
and understood by all stakeholders and tools.
Concepts in this model are then mapped to local tool data
models, which model common domain concepts in
different ways. Based on this mapping queries to the
domain knowledge can be resolved via the mappings
by local tool data queries.</p>
      <p>We will check the feasibility of querying the
ontologies in EKB written in SPARQL1 format with the
case from an open source project. The major result is
the easier definition of queries on project data
originating from heterogeneous background.</p>
    </sec>
    <sec id="sec-2">
      <title>II. RESEARCH ISSUES</title>
      <p>
        The core challenge for OSS development project
managers is to get stable domain concepts but
varying encoding of a concept in local tools. The current
approach is by working on variety of local tool data
model. The domain model stays “virtual”, i.e., is not
explicitly modeled. Our approach is by explicitly
model the domain data model and map to tool
models (similar to Global-as-View) by using EKB [
        <xref ref-type="bibr" rid="ref1">1</xref>
        ].
EKB is a repository that holds all knowledge on
project data models and user information that is
relevant for OSS development. EKB consists of two
ontology layers. The first layer contains the common
domain knowledge, while the second layer describes
the local tool knowledge. Mappings between local
and domain ontologies allow querying the local
knowledge by using the domain ontology syntax.
      </p>
      <p>The research issue is how to evaluate the
feasibility of using EKB for bridging semantic
heterogeneities comparing to the traditional database approach.
We will use Apache Tomcat2 project as a test bed.</p>
    </sec>
    <sec id="sec-3">
      <title>III. EVALUATION</title>
      <p>To give better understanding on the approach
proposed, we will illustrate a project manager use case
to analyze relationships across heterogeneous data
1 http://www.w3.org/TR/rdf-sparql-query/
2 http://tomcat.apache.org/
sources, for example between mailing list and SVN.
The domain concept concepts consist of all concepts
used in OSS development projects, the local tool
concepts consist of the concepts used in mailing list
and SVN tools. The mappings are done between
interrelated local tool concepts and domain concepts,
to integrate the different concepts across the
tools/models. The queries from the project managers
will be done to the domain concepts, which will be
continue by resolution with the local tool concepts, in
SVN and mailing lists ontologies.</p>
      <p>Database approach. The using of database
approach demands the use of a common homogeneous
database. Hence there should be some efforts done to
change the different models and formats of data from
heterogeneous sources and stored in homogeneous
database. Then the project manager can use the
database and query the repository. There are several
weaknesses with this approach: (a) the different
structures from heterogeneous data sources need to
be reconciled for using the common repository; (b)
updates and synchronization between the data
sources and the common repository have to be
repeated each time new data entries update the local
data source; and (c) reconfiguration of the data
sources, e.g., adding new data sources to the
monitoring system, breaks the automation of this approach.</p>
      <p>EKB approach. The EKB approach demands the
local tool concepts stored in the separate ontologies
from the domain concepts ontology. The mapping of
related concepts is done from the local tool ontology
to the domain concept ontology, makes the
translation between different local ontology possible. This
approach is more suitable than the implicit
transformation with the previous approach, because the
project managers don’t have to transform each different
concept into homogeneous model and they only have
to deal with the domain concept ontology to know
further about the local tools ontology.</p>
      <p>The example of query given by the project
managers to find the relationships between mailing list and
SVN ontologies can be seen in listing 1 that uses a
simplified OWL3 syntax. The data from different
stakeholders are stored the SVN and mailing list
ontologies, which are mapped to the domain concept
ontology. The project managers make query to the
domain concept ontology which then continues to the
local ontologies. The result from the local ontologies
is returned to the project manager via domain
concept ontology.</p>
      <p>From this evaluation, we can learn that EKB
approach benefits on flexible and efficient model for
transformation of data between tools. The limitations
are the cost to design the EKB and performance of
ontology technology which is depend on the size of
the ontology.</p>
      <p>SELECT (?a) WHERE {domain:build.xml
domain:relatedWith ?a}
mailinglist:build.xml owl:equalTo
domain:build.xml
SELECT (?b) WHERE
{mailinglist:build.xml
mailinglist:hasAffectedArtifact ?b}
Result: b =
mailinglist:build.xml_890256
SELECT (?c) WHERE
{?c SVN:hasAffectedArtifact
SVN:build.xml_890256}
Result: c = SVN:SVN_890256_build.xml
Result: a = domain:SVN_890256.xml
Listing 1. EKB query example to find a related SVN
entry from the mailing list issue.</p>
    </sec>
    <sec id="sec-4">
      <title>IV. CONCLUSION AND FUTURE WORK</title>
      <p>In this paper, we have explained the EKB approach
as a semantic web technology approach to address
important aspects of the semantic heterogeneity
challenge in the OSS development projects domain. By
separating the level of ontologies in EKB, the
complexity of querying can be reduced, while still makes
the approach feasible to be done.</p>
      <p>Future work includes make empirical
measurement on the efforts needed, especially for adding new
data sources to the project monitoring system. This
could be useful for better decision making support on
the status of the project, since a wider range of
development knowledge sources in the project can be
included for analysis.</p>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          [1]
          <string-name>
            <given-names>T.</given-names>
            <surname>Moser</surname>
          </string-name>
          ,
          <string-name>
            <given-names>S.</given-names>
            <surname>Biffl</surname>
          </string-name>
          ,
          <string-name>
            <given-names>W. D.</given-names>
            <surname>Sunindyo</surname>
          </string-name>
          , and
          <string-name>
            <given-names>D.</given-names>
            <surname>Winkler</surname>
          </string-name>
          .
          <article-title>Integrating Production Automation Expert Knowledge Across Engineering Stakeholder Domains</article-title>
          .
          <source>In Proceedings of the 2010 International Conference on Complex, Intelligent and Software Intensive Systems (to be published)</source>
          , pages
          <fpage>8</fpage>
          , Krakow, Poland,
          <year>2010</year>
          .
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>