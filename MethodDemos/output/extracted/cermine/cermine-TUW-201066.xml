<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta />
    <article-meta>
      <title-group>
        <article-title>A Multilevel Heuristic for the Rooted Delay-Constrained Minimum Spanning Tree Problem</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author">
          <string-name>Martin Berlakovich</string-name>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Mario Ruthmair</string-name>
          <email>ruthmair@ads.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Gu¨nther R. Raidl</string-name>
          <email>raidl@ads.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <aff id="aff0">
          <label>0</label>
          <institution>Institute of Computer Graphics and Algorithms Vienna University of Technology</institution>
          ,
          <addr-line>Vienna</addr-line>
          ,
          <country country="AT">Austria</country>
        </aff>
      </contrib-group>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>Introduction</title>
      <p>
        The rooted delay-constrained minimum spanning tree (RDCMST) problem is
an NP-hard [
        <xref ref-type="bibr" rid="ref3">3</xref>
        ] combinatorial optimization problem. The objective is to find a
minimum cost spanning tree in a given graph with cost and delay values assigned
to each edge. Additionally, a delay-bound is given limiting the maximum delay
allowed for each path between a specified root vertex and any other vertex
in the graph. This problem appears in practice for example when designing
a distribution network with a guarantee of timely delivery. Another example
would be a centralized broadcasting network where the delay-bound represents
a quality of service constraint.
      </p>
      <p>More formally, we are given a graph G = (V, E) with a set V of vertices, a
set E of edges, a source vertex s ∈ V and a delay-bound B &gt; 0. Additionally a
cost function c : E → R+ as well as a delay function d : E → R+ assign cost and
delay values to the edges. In an optimal spanning tree T = (V, E′ ), E′ ⊆ E, the
costs c(T ) = Pe∈E′ c(e) are minimal and the delay constraints Pe∈P (s,v) d(e) ≤
B, ∀v ∈ V , are satisfied; P (s, v) denotes the unique path between the source s
and vertex v.</p>
      <p>
        Gouveia et al. [
        <xref ref-type="bibr" rid="ref1">1</xref>
        ] present approaches based on mixed integer programming
and constrained shortest paths to derive strong lower bounds and to solve the
problem to proven optimality. However, these methods can only be applied to
graphs with significantly less than 100 nodes to obtain optimal solutions within
a reasonable amount of time in case of complete graphs.
      </p>
      <p>
        Two construction heuristics for the RDCMST problem have been presented.
In [
        <xref ref-type="bibr" rid="ref3">3</xref>
        ] a heuristic based on Prim’s algorithm to find a minimum spanning tree is
described. A more recent approach is the Kruskal-based heuristic introduced in
[
        <xref ref-type="bibr" rid="ref2">2</xref>
        ], which uses a merge process similar to Kruskal’s minimum spanning tree
algorithm while considering the delay-constraints. In addition constructed solutions
are improved by variable neighborhood descent.
      </p>
      <p>
        Both heuristics are based on adding edges to the tree trying to minimize
the costs in each step. However, the delay is ignored as long as no constraint
violation occurs. This can sometimes lead to relatively poor solutions with a
rather low potential for further improvement by local search methods. Therefore
we introduce here a heuristic that uses a new measurement for the suitability
of edges. This heuristic is based on the multilevel paradigm [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ] firstly creating
a hierarchy of approximations of the original problem by recursive coarsening.
After an initial solution has been found on the coarsest level it is iteratively
refined in each level obtaining a feasible solution for the original problem in the
end. This multilevel-based construction heuristic does not primarily attempt to
create a low cost solution by itself but a promising starting solution for further
improvement by local search.
2
      </p>
    </sec>
    <sec id="sec-2">
      <title>Ranking Score</title>
      <p>In the above construction heuristics, the inclusion of an edge with low costs is
not necessarily cheap regarding the overall solution. If an edge with low costs but
high delay is used it can affect the further construction of the solution negatively.
The high delay can force a heuristic to use very expensive edges with low delay
in order to not violate the delay constraint. Such decisions sometimes create
weak solutions corresponding to poor local optima which even good improvement
procedures are not able to overcome.</p>
      <p>In an attempt to judge how promising an edge is, the ranking score is
introduced. It is more likely that an edge with comparatively low costs and low delay
is part of an optimal solution than an edge with very low costs but high delay.
The ranking score score(e) describes the relative cost in relation to the delay of
an edge e ∈ E in comparison to other edges:
score(e) =
1 −
rec − 1
|E|
· 1 −
red − 1
|E|
(1)</p>
      <p>Here, rec ∈ {1, . . . , |E|} and red ∈ {1, . . . , |E|} represent the cost and delay
ranks of edge e, which are obtained by sorting the edges according to costs and
delays, respectively. The ranking score of a vertex v ∈ V is the sum of the scores
of all incident edges.
3</p>
    </sec>
    <sec id="sec-3">
      <title>Ranking-Based Multilevel Heuristic</title>
      <p>The ranking-based multilevel heuristic (RBMH) follows a multilevel strategy.
In each level a number of vertices, including the source vertex, is selected as
so-called supervertices. The remaining vertices are connected directly to these
supervertices creating multiple subtrees in each level.</p>
      <p>The RBMH uses the ranking scores to determine which vertices and edges are
used. Vertices with high ranking scores are supposed to have many or at least
high quality incident edges. This makes them more promising to be the root
of a subtree in an optimal solution. After choosing a set of these supervertices
all remaining vertices are connected to them using the edges with the highest
ranking scores satisfying the delay-constraints. The subtrees with supervertices
as their roots represent the vertices in the next level. This process is continued
until only one supervertex, the source vertex, remains corresponding to a feasible
solution for the original problem. The RBMH runs in O(|E| log |E| + |V |2) time.
4</p>
    </sec>
    <sec id="sec-4">
      <title>Preliminary Results</title>
      <p>
        The RBMH has been tested on large random instances from [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ] with complete
graphs of 500 and 1000 vertices and the results are compared to those of the
Kruskal-based heuristic. In all cases the variable neighborhood descent (VND)
of [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ] is applied to improve constructed solutions.
      </p>
      <p>The exemplary results listed in Table 1 document that the RBMH combined
with VND produces on average better results than the Kruskal-based
heuristic using the same improvement with the exception of tight delay-bounds. The
RBMH solution usually has higher costs as corresponding solutions of previous
construction heuristics but at the same time offers higher potential for later
improvement phases. Concerning the runtime the RBMH tests are slower since
more time is spent in the improvement phase.</p>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          1.
          <string-name>
            <surname>Gouveia</surname>
            ,
            <given-names>L.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Paias</surname>
            ,
            <given-names>A.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Sharma</surname>
            ,
            <given-names>D.</given-names>
          </string-name>
          :
          <article-title>Modeling and solving the rooted distanceconstrained minimum spanning tree problem</article-title>
          .
          <source>Computers and Operations Research</source>
          <volume>35</volume>
          (
          <issue>2</issue>
          ),
          <fpage>600</fpage>
          -
          <lpage>613</lpage>
          (
          <year>2008</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref2">
        <mixed-citation>
          2.
          <string-name>
            <surname>Ruthmair</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Raidl</surname>
            ,
            <given-names>G.R.:</given-names>
          </string-name>
          <article-title>A Kruskal-Based Heuristic for the Rooted DelayConstrained Minimum Spanning Tree Problem</article-title>
          . In:
          <string-name>
            <surname>Moreno-D´</surname>
          </string-name>
          ıaz, R.,
          <string-name>
            <surname>Pichler</surname>
            ,
            <given-names>F.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Quesada-Arencibia</surname>
            ,
            <given-names>A</given-names>
          </string-name>
          . (eds.)
          <article-title>EUROCAST 2009</article-title>
          .
          <article-title>LNCS</article-title>
          , vol.
          <volume>5717</volume>
          , pp.
          <fpage>713</fpage>
          -
          <lpage>720</lpage>
          . Springer (
          <year>2009</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref3">
        <mixed-citation>
          3.
          <string-name>
            <surname>Salama</surname>
            ,
            <given-names>H.F.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Reeves</surname>
            ,
            <given-names>D.S.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Viniotis</surname>
            ,
            <given-names>Y.</given-names>
          </string-name>
          :
          <article-title>The delay-constrained minimum spanning tree problem</article-title>
          . In: Blum,
          <string-name>
            <given-names>C.</given-names>
            ,
            <surname>Roli</surname>
          </string-name>
          ,
          <string-name>
            <given-names>A.</given-names>
            ,
            <surname>Sampels</surname>
          </string-name>
          , M. (eds.)
          <source>Proceedings of the 2nd IEEE Symposium on Computers and Communications - ISCC '97</source>
          . pp.
          <fpage>699</fpage>
          -
          <lpage>703</lpage>
          (
          <year>1997</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref4">
        <mixed-citation>
          4.
          <string-name>
            <surname>Walshaw</surname>
            ,
            <given-names>C.</given-names>
          </string-name>
          :
          <article-title>Multilevel refinement for combinatorial optimisation problems</article-title>
          .
          <source>Annals of Operations Research</source>
          <volume>131</volume>
          (
          <issue>1</issue>
          ),
          <fpage>325</fpage>
          -
          <lpage>372</lpage>
          (
          <year>2004</year>
          )
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>