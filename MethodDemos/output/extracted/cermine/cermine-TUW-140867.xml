<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta />
    <article-meta>
      <title-group>
        <article-title>Automated Tools for Teaching Formal Software Verification</article-title>
      </title-group>
      <contrib-group>
        <aff id="aff0">
          <label>0</label>
          <institution>Technische Universit a ̈t Wien Karlsplatz 13 A-1040 Vienna</institution>
          ,
          <country country="AT">Austria</country>
        </aff>
      </contrib-group>
      <pub-date>
        <year>2006</year>
      </pub-date>
      <abstract>
        <p>We present the status of formal methods at our university, and describe our course on formal software verification in more detail. We report our experiences in using Perfect Developer for the course assignments. Computer Science @ TU Wien The computer science department at Technische Universita¨ t Wien (TUW, Vienna University of Technology) is by far the biggest in Austria. About 120 full, associate, and assistant professors (5 % of TUW's teaching personnel) teach approximately 6000 students (30 % of TUW's students). Until 2001, there were only two monolithic studies: Informatik (informatics) taking 5 years and Wirtschaftsinformatik (business informatics) taking 4.5 years. In 2001, triggered by the Bologna declaration of the European Union, the two studies were replaced by 6 bachelor1 and 9 master2 degrees taking three and two years, respectively. 1Business Informatics, Computer Engineering, Data Engineering &amp; Statistics, Media Informatics, Medical Informatics, Software &amp; Information Engineering 2Business Engineering and Informatics (Wirtschaftsingenieurwesen Informatik), Business Informatics, Computer Engineering, Computer Graphics &amp; Digital Image Processing, Computational Intelligence, Information &amp; Knowledge Management, Media Informatics, Medical Informatics, Software Engineering &amp; Internet Computing 3Ects = ECTS credit, where ECTS means European Credit Transfer System; 1 year corresponds to 60 Ects, 1 Ects equals 25 working hours.</p>
      </abstract>
      <kwd-group>
        <kwd>formal verification of software</kwd>
        <kwd>Perfect Developer</kwd>
      </kwd-group>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>1. INTRODUCTION</title>
      <p>As the automation of formal methods makes progress, they become more and more relevant
for industry. Unfortunately, other areas are growing faster and are more popular with students,
university teachers, and professionals – at least in Austria.</p>
      <sec id="sec-1-1">
        <title>Duration</title>
        <p>5 yrs/324 Ects3
3+2 yrs/300 Ects</p>
      </sec>
      <sec id="sec-1-2">
        <title>Math &amp; Statistics 34.5 Ects (10.6%) 21.0 Ects (7.0%)</title>
      </sec>
      <sec id="sec-1-3">
        <title>Theory &amp; Logic 19.5 Ects (6.0%) 12.0 Ects (4.0%)</title>
        <p>
          Formal Methods @ TU Wien The change of the curricula had a significant impact on the kind
and amount of formal methods taught. First, specialisation and diversification now start as early
as the second year; the required room was partially gained by reducing mathematics, theory
and logic by one third (Table 1). Second, traditional theory and logic was compressed into a
single course; a second course is now focussed on applied logics along the lines of the book
Logic in Computer Science by Huth and Ryan [
          <xref ref-type="bibr" rid="ref7">7</xref>
          ] (augmented by recent topics like description
logics and the semantic web). Apart from these compulsory courses there are only a few elective
ones dealing with formal methods, most notably Computer Aided Verification focusing on model
checking [
          <xref ref-type="bibr" rid="ref2">2</xref>
          ], and Formal Verification of Software concentrating on Hoare calculus and dynamic
logic; each has 6.0 Ects and consists of a lecture and a lab. In summary, the change led to
a modernisation concerning theory and logic, but at the same time reduced mathematics to a
minimum, leaving hardly any room to train the ability to understand and construct rigorous proofs.
        </p>
      </sec>
    </sec>
    <sec id="sec-2">
      <title>2. FORMAL VERIFICATION OF SOFTWARE</title>
      <p>
        The course Formal Verification of Software has been taught for two decades, but until recently
only theoretically in the style of Dijkstra [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ] and Gries [
        <xref ref-type="bibr" rid="ref6">6</xref>
        ]. The slow but steady progress in the
automation of program verification led us in 2003 to evaluate several tools in order to select one
for use in the course. [
        <xref ref-type="bibr" rid="ref5">5</xref>
        ] All of them can be used free of charge for academic and teaching
purposes.
      </p>
      <p>
        Frege Program Prover (FPP) [
        <xref ref-type="bibr" rid="ref9">9</xref>
        ] FPP supports a small subset of Ada consisting of typical
imperative program structures like loop-, case- and if-statements. The only data types available
are integer and boolean. The language for specifying pre- and post-conditions is rather restricted.
E.g., function definitions, recursive specifications and structured data types like arrays are not
supported. FPP is able to verify simple programs and to compute their weakest pre-conditions.
The prover, Analytica, acts as a black box signalling either the validity of a formula or returning
unprovable sub-formulas; formal proofs are not supplied.
      </p>
      <p>
        Due to its simplicity and its web interface, FPP is easy to learn and use. It seems to be a valuable
tool for illustrating the ideas of formal program verification in basic courses. It is not suitable,
however, for advanced courses on the subject or for real world applications. Neither is it able to
deal with standard examples from Dijkstra and Gries involving arrays, nor does it support
objectoriented features. Moreover, the terse output in pure ASCII makes it difficult to trace errors.
The KeY system [
        <xref ref-type="bibr" rid="ref1">1</xref>
        ] The KeY system supports a subset of Java known as JavaCard, which
is increasingly used for mobile and embedded devices. Verification is based on dynamic logic,
a generalization of the Hoare calculus. The system cooperates with CASE tools like Together
Control Center, Solo or Architect. Objects and constraints can be specified using UML and OCL.
Java, UML, OCL, and CASE tools are familiar to software engineers and students alike, which helps
in getting started. Nevertheless, KeY cannot be recommended for such target groups at present:
the interactive prover and its interaction with the user are in their infancy and are inadequate
for serious use. Moreover, OCL is not expressive enough to specify complex program behaviour.
Considering that KeY is still in alpha stage, it seems to be worthwhile to reevaluate the system in
a few years in order to see whether it lives up to expectations.
      </p>
      <p>
        Perfect Developer (PD) [
        <xref ref-type="bibr" rid="ref3">3</xref>
        ] PD consists of a full-fledged object-oriented programming language
called Perfect, of a powerful automated theorem prover, and of a code generator translating
programs from Perfect to Java, Ada, and C++. A rich collection of built-in data types, classes,
functions and theories allows the user to write concise specifications on a fairly abstract level.
UML class diagrams can be imported to generate the skeleton of classes automatically.
PD is a technically mature product that is ready for use in a regular development process.
However, software engineers will need some time to become sufficiently aquainted with the many
features of Perfect. Moreover, at least a basic knowledge of formal logic is required to be able to
interpret the prover output and to use it for detecting errors in the specification or in the program.
Perfect Developer is also well suited for teaching advanced courses on formal program verification.
Usually there will not be enough time to cover all features of Perfect. Therefore a tutorial is required
that concentrates on just those elements of the language that are necessary to implement and
verify instructive examples like those in [
        <xref ref-type="bibr" rid="ref6">6</xref>
        ].
      </p>
      <p>PD is that tool of the four that comes closest to the ideal of automated program verification. But
there are still some shortcomings. One is that the prover currently does not support induction.
Consequently certain recursive functions and loops cannot be verified by the system. E.g., if one
specifies multiplication recursively by iterating over the first argument but decides to implement
it as a loop over the second argument, the loop invariant cannot be proved automatically since
the proof involves induction; in such a case the user has to provide a lemma whose correctness
Industrial applications 6</p>
      <p>PD</p>
      <p>PVS</p>
      <p>KeY</p>
      <sec id="sec-2-1">
        <title>Toy/Academic system FPP</title>
      </sec>
      <sec id="sec-2-2">
        <title>Little formal training</title>
        <p>Strong background in logic required
has to be verified outside the system. In practice this limitation is not as severe as it seems: The
principle of proof-by-contract generates dozens of proof obligations even for toy programs, most of
which are rather trivial and therefore are verified by PD’s prover automatically; the user can focus
his attention on a few unproven assertions resulting from the core algorithms. Another weakness,
at least from an academic point of view, is the lack of information concerning the internals of the
prover. Ideally the logical rules used in correctness proofs should be open for inspection such
that independent proof checkers can establish additional trust in the system. Finally, the prover
does not support all specification methods equally well: It may happen that a natural and obvious
specification of an algorithm leads to unprovable assertions, whereas a less obvious one using
different builtins succeeds. Ideally, the user should be able to formalise the informal specification
of a problem as directly as possible without paying attention to the prover.</p>
        <p>
          Prototype Verification System (PVS) [
          <xref ref-type="bibr" rid="ref8">8</xref>
          ] PVS is a powerful interactive theorem prover, which
has been used for various real world applications. In contrast to the other systems it does not
generate verified program code, but it proves properties of algorithms. The prover is versatile and
offers many possibilities. It is automatic to a certain degree, but usually requires frequent user
interactions.
        </p>
        <p>Due to its many basic inference rules and tactics it takes a long learning phase to become familiar
with the system. Morover, users of PVS need a firm background in mathematics and formal logic
to guide the prover. In our opinion typical software engineers and average students of computer
science will have a hard time using PVS. Graduate or Ph.D. students might have a chance,
provided they are given enough time. For courses with just a few hours per week in the lab PVS
seems to be too complex.</p>
      </sec>
    </sec>
    <sec id="sec-3">
      <title>3. OBSERVATIONS</title>
      <p>The first assignment in the lab on formal program verification was to install Perfect Developer
under Windows or Linux, and to get aquainted with the system by working through the online
tutorial offered on the web site of Escher Technologies, the company behind PD. As a check we
asked the students to write a report listing the errors in the tutorial; there are a few, which can be
easily corrected provided the assignment is taken seriously. This assignment posed no difficulties
for the students; the errors found varied between zero and several dozens.</p>
      <p>The second, third and fourth assignment consisted of selecting two problems from a list of six easy
and one problem from a list of four harder problems (see the appendix for a short description of
the problems). The students had to write a formal specification in Perfect, refine it to an executable
function and verify the correctness. The algorithms were required to run in time O(n) or O(n log n),
respectively. The students had to write a report including their errors, solutions, and the time they
had spent on the problem. In case they were not able to get PD to verify their solution completely</p>
      <sec id="sec-3-1">
        <title>Informatics: 0–15 15–30</title>
      </sec>
      <sec id="sec-3-2">
        <title>Business Informatics: 15–30 45–60 30–45</title>
        <p>60–75
they had to provide formal arguments explaining why their specification and implementation was
correct nevertheless.</p>
        <p>Not quite surprisingly, the gathered data indicate that students with a knowledge of mathematics
and some experience in software engineering performed significantly better than students with
less background in these areas. This observation is confirmed statistically by separating the
students into two groups: those doing a bachelor or master program in informatics, and those
doing a bachelor or master in business informatics. In the curriculum valid until 2006, the latter
had a few hours less on math, algorithmics and programming than their colleagues in one of the
studies in informatics. Table 3 and Table 4 show that on average students in informatics needed
less time and got better grades than their colleagues in business informatics.</p>
      </sec>
    </sec>
    <sec id="sec-4">
      <title>4. CONCLUSION</title>
      <p>Using automated tools for teaching formal methods helps to convince students that formal
methods work. Nevertheless, formal methods still require the ability to think in an abstract
and declarative manner and to analyse formal proofs. According to our experience a thorough
education in mathematics and logic as well as a training in different programming paradigms
forms a sound basis.</p>
    </sec>
    <sec id="sec-5">
      <title>APPENDIX: PROBLEMS TO BE VERIFIED WITH PERFECT DEVELOPER</title>
    </sec>
    <sec id="sec-6">
      <title>Easy Problems</title>
      <p>Cardinality of intersection: Given two sorted lists of integers, compute the cardinality of their
intersection in linear time.</p>
      <p>Merging of lists: Given two sorted lists of integers, compute a sorted list containing the elements
of the original lists in linear time.</p>
      <p>Minimal distance: Given two sorted lists of integers, A and B, compute the minimum of
abs(A[i], B[i]) for all i, j in linear time.</p>
      <p>Longest plateau: Given a sorted list of integers, determine the length of the longest sublist of
identical elements in linear time.</p>
      <p>Index of maximum: Given a list of integers, determine the index of a maximal element in linear
time.</p>
      <sec id="sec-6-1">
        <title>Sortedness: Check in linear time whether a list of integers is sorted.</title>
      </sec>
    </sec>
    <sec id="sec-7">
      <title>Slightly harder problems</title>
      <p>Count inversions: Given a list, A, of n integers, count the pairs (i, j) of indices satisfying i &lt; j
and A[i] &gt; A[j] in time O(n log n).</p>
      <p>Count Boolean inversions: Given a list, A, of Booleans, count the pairs (i, j) of indices satisfying
i &lt; j, A[i] and ¬A[j], in linear time.</p>
      <p>Length of longest monotone sublist: Given a list of integers, compute the length of the longest
non-increasing or non-decreasing sublist in linear time.</p>
      <p>Length of longest left-minimal sublist: Given a list of integers, compute in linear time the length of
the longest sublist, where the first element of the sublist is minimal among the elements of
the sublist.</p>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          [1]
          <string-name>
            <given-names>Wolfgang</given-names>
            <surname>Ahrendt</surname>
          </string-name>
          , Thomas Baar, Bernhard Beckert, Richard Bubel, Martin Giese, Reiner Ha¨ hnle, Wolfram Menzel, Wojciech Mostowski, Andreas Roth,
          <string-name>
            <surname>Steffen Schlager</surname>
          </string-name>
          , and
          <string-name>
            <surname>Peter H. Schmitt</surname>
          </string-name>
          .
          <article-title>The KeY tool</article-title>
          .
          <source>Software and System Modeling</source>
          ,
          <volume>4</volume>
          (
          <issue>1</issue>
          ):
          <fpage>32</fpage>
          -
          <lpage>54</lpage>
          ,
          <year>2005</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref2">
        <mixed-citation>
          [2]
          <string-name>
            <surname>Edmund</surname>
            <given-names>M.</given-names>
          </string-name>
          <string-name>
            <surname>Clarke</surname>
          </string-name>
          , Orna Grumberg, and
          <string-name>
            <surname>Doron</surname>
            <given-names>A.</given-names>
          </string-name>
          <string-name>
            <surname>Peled</surname>
          </string-name>
          . Model Checking. MIT Press,
          <year>2000</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref3">
        <mixed-citation>
          [3]
          <string-name>
            <given-names>David</given-names>
            <surname>Crocker</surname>
          </string-name>
          .
          <article-title>Perfect Developer: A tool for Object-Oriented Formal Specification and Refinement</article-title>
          .
          <source>Tools Exhibition Notes at Formal Methods Europe</source>
          ,
          <year>2003</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref4">
        <mixed-citation>
          [4]
          <string-name>
            <given-names>Edsger</given-names>
            <surname>Dijkstra</surname>
          </string-name>
          .
          <article-title>A Discipline of Programming</article-title>
          .
          <source>Prentice Hall</source>
          ,
          <year>1976</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref5">
        <mixed-citation>
          [5]
          <string-name>
            <given-names>Ingo</given-names>
            <surname>Feinerer</surname>
          </string-name>
          .
          <article-title>Formal program verification: A comparison of selected tools and their theoretical foundations</article-title>
          .
          <source>Master's thesis</source>
          ,
          <source>Technische Universit a¨t Wien</source>
          , Vienna, Austria,
          <year>January 2005</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref6">
        <mixed-citation>
          [6]
          <string-name>
            <given-names>David</given-names>
            <surname>Gries</surname>
          </string-name>
          .
          <source>The Science of Programming</source>
          . Springer,
          <year>1987</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref7">
        <mixed-citation>
          [7]
          <string-name>
            <surname>Michael</surname>
            <given-names>R.A.</given-names>
          </string-name>
          <string-name>
            <surname>Huth</surname>
            and
            <given-names>Mark D.</given-names>
          </string-name>
          <string-name>
            <surname>Ryan</surname>
          </string-name>
          . Logic in Computer Science - modelling
          <source>and reasoning about systems</source>
          . Cambridge University Press,
          <year>2003</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref8">
        <mixed-citation>
          [8]
          <string-name>
            <given-names>Sam</given-names>
            <surname>Owre</surname>
          </string-name>
          , John Rushby, and
          <string-name>
            <given-names>Natarajan</given-names>
            <surname>Shankar</surname>
          </string-name>
          .
          <article-title>PVS: A prototype verification system</article-title>
          .
          <source>In Deepak Kapur, editor, 11th International Conference on Automated Deduction (CADE)</source>
          ,
          <source>volume 607 of Lecture Notes in Artificial Intelligence</source>
          , pages
          <fpage>748</fpage>
          -
          <lpage>752</lpage>
          , Saratoga,
          <string-name>
            <surname>NY</surname>
          </string-name>
          ,
          <year>June 1992</year>
          . Springer-Verlag.
        </mixed-citation>
      </ref>
      <ref id="ref9">
        <mixed-citation>
          [9] Ju¨ rgen Winkler.
          <source>The Frege Program Prover</source>
          .
          <volume>42</volume>
          . Internationales Wissenschaftliches Kolloquium, Technische Universita¨
          <source>t Ilmenau</source>
          , pages
          <fpage>116</fpage>
          -
          <lpage>121</lpage>
          ,
          <year>1997</year>
          .
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>