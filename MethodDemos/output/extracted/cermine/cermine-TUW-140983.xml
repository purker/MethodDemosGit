<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta />
    <article-meta>
      <title-group>
        <article-title>Add-A-Tag: Learning Adaptive User Profiles from Bookmark Collections</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author">
          <string-name>Steve Cayzer</string-name>
          <xref ref-type="aff" rid="aff0">0</xref>
          <xref ref-type="aff" rid="aff1">1</xref>
          <xref ref-type="aff" rid="aff2">2</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>steve.cayzer@hp.com</string-name>
          <xref ref-type="aff" rid="aff0">0</xref>
          <xref ref-type="aff" rid="aff2">2</xref>
        </contrib>
        <aff id="aff0">
          <label>0</label>
          <institution>Elke Michlmayr</institution>
        </aff>
        <aff id="aff1">
          <label>1</label>
          <institution>HP Labs</institution>
          ,
          <addr-line>Filton Road, Stoke Gifford, Bristol BS34 8QZ</addr-line>
          ,
          <country country="UK">United Kingdom</country>
        </aff>
        <aff id="aff2">
          <label>2</label>
          <institution>Paul Shabajee</institution>
        </aff>
      </contrib-group>
      <pub-date>
        <year>2007</year>
      </pub-date>
      <abstract>
        <p>In this paper we construct adaptive user profiles from tagging data. We present and evaluate an algorithm for creating such profiles, characterizing its behavior through statistical analysis. tagging user profiles adaptivity</p>
      </abstract>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>1. Introduction</title>
      <p>
        Collaborative tagging systems, also called folksonomies or
social bookmarking services, allow their users to manage
bookmarks online and to annotate them with free-text keywords
(tags) for improving re-discovery of information. The most
well-known service, del.icio.us [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ], was started in 2003 and
many other services have followed since. Since many users
of a folksonomy stick with the same bookmark collection for
years, these data contain very fine-grained information about
a user’s changing interests over time.
      </p>
      <p>This paper describes how to utilize data from a social
bookmarking service to create user profiles that can in turn be
used for Information Filtering (IF). Unlike many other profile
learning mechanisms, which usually rely on relevance
feedback from the user, our method does not require any
additional user input. Moreover, since tagging data is time-based,
it allows us to create user profiles that dynamically adapt
to drifts in users’ interests. The profile should represent the
most important parts of a users’ behavior (that is, some
compression, clustering or summarization needs to be performed).
Both persistent long-term interests and transient short-term
interests should co-exist in the profile.</p>
    </sec>
    <sec id="sec-2">
      <title>2. The Add-A-Tag algorithm</title>
      <p>We focus not only on which tags have been used, but rather
on which tags have been used in combination. This can be
achieved by relying on the co-occurrence technique. If two
tags are used in combination (co-occur ) by a certain user
for annotating a certain bookmark, there is some kind of
semantic relationship between them. The more often two tags
∗This research has partly been funded by the Austrian
Federal Ministry for Education, Science, and Culture (bm:bwk),
and the European Social Fund (ESF) under grant
31.963/46VII/9/2002.
are used in combination, the more intense this relationship
is. This is represented by a graph with labeled nodes and
undirected weighted edges in which nodes correspond to tags
and edges correspond to the relationship between tags. Each
time a new tag is used, a new node for this tag is added to
the graph. Each time a new combination of tags is used, a
new edge with weight α between the corresponding nodes is
created in the graph. If two tags co-occur again, the weight
for the corresponding edge is increased by β.</p>
      <p>
        To include the age of the bookmarks in the user profile
we extend the co-occurrence approach with the evaporation
technique known from ant algorithms [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ]. Evaporation is a
simple method to add time-based information to the weights
of edges in a graph: Each time the profile graph is updated
with tags from a newly added bookmark, the weights of each
edge in the graph is decreased slightly by removing a small
percentage of its current value.
      </p>
      <p>
        Consider a user u adding a bookmark item b tagged with
tags t1, . . . , tn to his or her bookmark collection. The profile
graph Gu = (V, E) where V = v1, . . . , vn is the set of vertices
(which correspond to tags) and E = e1, . . . , en is the set of
edges, is updated as follows. Firstly, the existing information
in the graph is changed by applying the evaporation formula
shown in Equation 1 to every edge ex ∈ E
wex ← wex − ρ · wex ,
(1)
where ρ ∈ [
        <xref ref-type="bibr" rid="ref1">0, 1</xref>
        ] is a constant and wex is the weight of edge ex.
      </p>
      <p>Secondly, the n new tags from bookmark b: t1, . . . , tn are
added to the graph. For every combination titj where i, j ∈
1, . . . , n and i &lt; j, the following procedure is executed:
1. For every tag tx (x ∈ i, j), add a corresponding
vertex vx to graph Gu, if vx does not exist.
2. If it does not yet exist, add an edge with weight α
between vertex vi and vertex vj to graph Gu, where
constant α is a real number and α &gt; 0.
3. Otherwise, if an edge between vertex vi and vertex vj
exists, increase its weight by β. Constant β is a real
number and β &gt; 0.</p>
      <p>This is executed each time the user adds an bookmark item
to the bookmark collection. It creates a profile graph.
Extracting the user profile from the profile graph is defined as
follows.</p>
      <p>1. Create a ordered set Es from E = e1, . . . , en. Es
contains all edges ex (x ∈ 1, . . . , n) from graph Gu ordered
in decreasing order by their weights wex .
2. Create set Ek by extracting the top k elements from
set Es, where k is a natural number and k &gt; 0.
3. Create graph Gu′ which contains all edges from Ek and
all vertices vx from graph Gu which are incident to one
of the edges in Ek.</p>
      <p>The size of the user profile Gu′ is determined by the value
chosen for parameter k.</p>
    </sec>
    <sec id="sec-3">
      <title>3. Evaluation of profile adaptivity</title>
      <p>The amount of change in the user profile depends on the
profile creation mechanism, but also on the user’s activity
pattern. We assess it by comparing the Add-A-Tag algorithm
(1) with and (2) without using the evaporation feature. The
user’s activity pattern serves as a reference value.</p>
      <p>
        We need a way for determining the change of a profile over
time. If we compute the user profile of user u at time t1 and
again at time t2, we need to be able to measure the difference
(distance) between these two user profiles. Since measuring
graph distances is a only partly solved issue [
        <xref ref-type="bibr" rid="ref1">1</xref>
        ], we map the
graphs onto a simpler structure which only contains the
information we need for the comparison. This structure is a
set of edges in decreasing weight order. We define the metric
dist(S1, S2) for the distance between two sets S1 and S2 based
on the Kendall τ coefficient [
        <xref ref-type="bibr" rid="ref3">3</xref>
        ] – a standard measure for
comparing ordered sets that includes rank correlation – as shown
in Equations 2a to 2c. The result values for dist(S1, S2) are
in the range of 0 (if S1 and S2 are the same, that is, equally
ranked) to 1 (if S1 and S2 are in reverse order).
      </p>
      <p>dist(S1, S2) = 1 − 2 ∗ τ (S1, S2) , where</p>
      <p>n ∗ (n − 1)
τ (S1, S2) =</p>
      <p>X τ¯i,j (S1, S2) , and
i,j∈P
 if i and j are in same
τ¯i,j(S1, S2) =  0 order in S1 and S2
 1 otherwise
(2a)
(2b)
(2c)
In Equation 2a, variable n is the size of the sets. In
Equation 2b, P is the set of pairs of distinct elements in S1 and
S2. The Kendall τ is applicable only for sets which have the
same members and – consequently – are of same size. For our
setting, this means that those set members that are present
in only one of the sets need to be added to the other one.
We append the missing set members to the end of the set in
order not to affect the ranking of the pairs.</p>
      <p>Now we compute the user profiles for a sample user’s
bookmark collection. We incrementally create the profile graph
by adding the bookmark items in their temporal order, and
– each time after adding all bookmarks that were created by
the user within the time span of one week – we extract the
user profile from the profile graph. Using this procedure we
retrieve a set of user profiles</p>
      <p>Gu′ = {Guw′x |x = {1, . . . , n}}
for user u and each week wx. In the next step, we apply
the metric dist to these data in order to assess the amount
of change between the weekly snapshots of the profiles. The
wx+1 for week wx+1 is compared to the user
user profile Gup
profile Guwpx for the previous week wx.
1.25
0.25
0
0
20
40</p>
      <p>60
weeks
80
100</p>
      <p>The result is shown in Figure 1. What the trend lines reveal
is that both approaches exhibit a change pattern that is
proportional to the user’s activity pattern, but the Add-A-Tag
approach with evaporation (dashed curve) shows a
considerably higher amount of change and fits better with the activity
pattern (solid grey curve). If the evaporation feature is not
used (solid black curve), the degree of change in the user
profile decreases over time. This is particularly the case for the
results in the time span between week 80 and week 100.
Although the trend line for user activity shows that the user is
adding new bookmarks to the collection, the most often used
tag combinations are dominant and prevent newly arising tag
combinations from being included in the profile.</p>
    </sec>
    <sec id="sec-4">
      <title>4. Conclusion</title>
      <p>In this paper we proposed the Add-A-Tag algorithm for
learning adaptive user profiles from bookmark collections, which is
based on a combination of (1) the co-occurrence technique for
determining the relationships between tags and (2) an
evaporation feature as known from ant algorithms for adapting the
user profile to trends over time. We evaluated the algorithm
by defining a metric appropriate for quantifying the amount
of change over time. What we can show is that the user
profiles created with Add-A-Tag are adaptive in the sense that
they change according to changes in tag usage in a continuous
stream of tagging data.</p>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          [1]
          <string-name>
            <given-names>F.</given-names>
            <surname>Buckley</surname>
          </string-name>
          and
          <string-name>
            <given-names>F.</given-names>
            <surname>Harary</surname>
          </string-name>
          . Distance in graphs.
          <source>Addison-Wesley</source>
          ,
          <year>1990</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref2">
        <mixed-citation>
          [2]
          <string-name>
            <given-names>M.</given-names>
            <surname>Dorigo</surname>
          </string-name>
          and
          <string-name>
            <given-names>G. D.</given-names>
            <surname>Caro</surname>
          </string-name>
          . New Ideas in Optimization,
          <source>chapter The Ant Colony Optimization Meta-Heuristic</source>
          , pages
          <fpage>11</fpage>
          -
          <lpage>32</lpage>
          .
          <string-name>
            <surname>McGraw-Hill</surname>
          </string-name>
          ,
          <year>1999</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref3">
        <mixed-citation>
          [3]
          <string-name>
            <given-names>R.</given-names>
            <surname>Fagin</surname>
          </string-name>
          ,
          <string-name>
            <given-names>R.</given-names>
            <surname>Kumar</surname>
          </string-name>
          , and
          <string-name>
            <given-names>D.</given-names>
            <surname>Sivakumar</surname>
          </string-name>
          .
          <article-title>Comparing Top k Lists</article-title>
          .
          <source>SIAM Journal on Discrete Mathematics</source>
          ,
          <volume>17</volume>
          (
          <issue>1</issue>
          ):
          <fpage>134</fpage>
          -
          <lpage>160</lpage>
          ,
          <year>October 2003</year>
          .
        </mixed-citation>
      </ref>
      <ref id="ref4">
        <mixed-citation>
          <source>[4] Yahoo! Inc. Del.icio.us Social Bookmarking Service. http://del.icio.us.</source>
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>