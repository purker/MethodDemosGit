<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta />
    <article-meta>
      <title-group>
        <article-title>Variable Neighborhood Search for Capacitated Connected Facility Location</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author">
          <string-name>Markus Leitner</string-name>
          <email>leitner@ads.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Gu¨nther R. Raidl</string-name>
          <email>raidl@ads.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <aff id="aff0">
          <label>0</label>
          <institution>Institute of Computer Graphics and Algorithms Vienna University of Technology</institution>
          ,
          <addr-line>Vienna</addr-line>
          ,
          <country country="AT">Austria</country>
        </aff>
      </contrib-group>
      <abstract>
        <p>The Capacitated Connected Facility Location Problem (CConFL) is an N Phard combinatorial optimization problem which arises in the design of last mile communication networks (fiber-to-the-curb scenarios) [1]. Formally, we are given an undirected, weighted graph G = (V, E), with edge costs ce ≥ 0, ∀e ∈ E. The node set V = {r}∪F ∪T is the disjoint union of the root node r, potential facility locations F , and possible Steiner nodes T . Each facility i ∈ F has associated opening costs fi ≥ 0 and a maximum assignable capacity Di ∈ N. Furthermore, we are given a set of potential customers C, with individual capacity demands dk ∈ N and prizes pk ≥ 0, ∀k ∈ C, the latter corresponding to the expected profit when supplying customer k. Each customer k ∈ C may be assigned to one facility of a subset Fk ⊆ F , with assignment costs ai,k ≥ 0, ∀i ∈ Fk. A solution to CConFL S = (RS, TS, FS, CS, αS) consists of a Steiner Tree (RS , TS), RS ⊆ V , TS ⊆ E, connecting the set of opened facilities FS ⊆ F and the root node r. CS ⊆ C is the set of customers feasibly (i.e. respecting the capacity constraints) assigned to facilities FS, whereas the actual mapping between customers and facilities is described by αS : CS → FS . The objective value of a feasible solution S is given by c(S) = Pe∈TS ce+Pi∈FS fi+Pk∈CS aαS(k),k+Pk∈C\CS pk, and we aim to identify a most profitable solution minimizing this function. This variant of CConFL has already been tackled by exact methods based on mixed integer programming [2] and hybrid approaches based on Lagrangian relaxation [1]. Here, we present the first pure metaheuristic approach, which computes high quality solution faster than existing approaches.</p>
      </abstract>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>Introduction</title>
      <p>Markus Leitner, Gu¨nther R. Raidl
connecting i to the partially constructed Steiner tree by means of an additional
least-cost path. In each step, we add the facility with maximal score, connect it
to the partially constructed Steiner tree, and assign the customers Ci′ to it, as
long as at least one facility i with δi &gt; 1 exists.
3</p>
    </sec>
    <sec id="sec-2">
      <title>General Variable Neighborhood Search</title>
      <p>
        In a variable neighborhood descent (VND) [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ] we apply the following
neighborhood structures to improve different aspects of a solution: Key-path
improvement [
        <xref ref-type="bibr" rid="ref1 ref5">5, 1</xref>
        ] to reduce the costs of the Steiner tree and customer swap [
        <xref ref-type="bibr" rid="ref1 ref6">6, 1</xref>
        ] as
well as single customer cyclic exchange [
        <xref ref-type="bibr" rid="ref1">1</xref>
        ] to optimize realized assignments. For
improving the set of opened facilities, we consider a single facility swap
neighborhood which adds or removes exactly one facility. A new opened facility is
connected by an additional least-cost path while redundant edges are removed
after closing a facility in case it has been a leaf of the Steiner tree.
      </p>
      <p>In order to escape from local optima, we embed the VND in a variable
neighborhood search (VNS) performing shaking by swapping l = 2, . . . , lmax randomly
chosen potential facility locations.
4</p>
    </sec>
    <sec id="sec-3">
      <title>Greedy Randomized Adaptive Search Procedure</title>
      <p>
        For comparison purposes we further embed above described VND into a greedy
randomized adaptive search procedure (GRASP) [
        <xref ref-type="bibr" rid="ref7">7</xref>
        ] based on a randomized
version of aforementioned constructive heuristic. Let δmin = argminδi {i ∈ F \ FS |
δi &gt; 1} and δmax be the minimal and maximal scores among all relevant
facilities, respectively. Instead of always adding the facility with maximal score, at
each step we randomly choose one among the facilities i ∈ F \ FS for which
δmax − β(δmax − δmin) ≤ δi ≤ δmax holds.
5
      </p>
    </sec>
    <sec id="sec-4">
      <title>Preliminary Results</title>
      <p>
        We performed computational experiments using the the instances from [
        <xref ref-type="bibr" rid="ref1 ref2">1, 2</xref>
        ].
VNS is terminated after ten consecutive non-improving iterations of the
outermost largest shaking move of size lmax = min{|F |, 10}. For GRASP we set
α = 0.2 and generated 100 initial solutions and each experiment has been
repeated 30 times on a single core of an Intel Core 2 Quad with 2.83GHz and 8GB
RAM. For the VND, we apply the neighborhood structures in the same order as
introduced above, but switch back to the first – i.e. the key-path – neighborhood
after changing the set of opened facilities only. The single customer cyclic
exchange neighborhood is searched using a next improvement strategy, while best
improvement is applied for all other neighborhood structures.
      </p>
      <p>
        Table 1 summarizes relative average objective values in percent,
corresponding standard deviations, and relative median CPU times of the VNS and GRASP
compared to the branch-and-cut-and-price approach (dBCP) from [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ] which
performed best among the previously presented methods. An absolute CPU-time
limit of 7200 seconds has been applied to dBCP. We conclude, that both GRASP
and VNS are able to compute solutions which are only slightly worse that those
of dBCP, while usually needing much less CPU-time. For some instances with
|F | = 200 and |C| = 75, which are particularly hard for dBCP, the obtained
solutions are even significantly better than the ones obtained by dBCP within
two hours. VNS seems to have small advantages over GRASP with respect to
solution quality, while GRASP is usually slightly faster using the current
settings. We are currently analyzing the usage of additional large neighborhood
structures based on the mixed integer programming models from [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ] and plan to
include a more detailed computational study with additional results on further,
larger instances in the full paper.
      </p>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          1.
          <string-name>
            <surname>Leitner</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Raidl</surname>
            ,
            <given-names>G.R.</given-names>
          </string-name>
          :
          <article-title>Combining Lagrangian decomposition with very large scale neighborhoood search for capacitated connected facility location</article-title>
          . In: PostConference Book of the Eight Metaheuristics International Conference - MIC
          <year>2009</year>
          .
          <article-title>(to appear)</article-title>
        </mixed-citation>
      </ref>
      <ref id="ref2">
        <mixed-citation>
          2.
          <string-name>
            <surname>Leitner</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Raidl</surname>
            ,
            <given-names>G.R.</given-names>
          </string-name>
          :
          <article-title>Branch-and-cut-and-price for capacitated connected facility location</article-title>
          .
          <source>Technical Report TR 186-1-10-01</source>
          , Vienna University of Technology, Vienna, Austria (
          <year>2010</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref3">
        <mixed-citation>
          3.
          <string-name>
            <surname>Martello</surname>
            ,
            <given-names>S.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Pisinger</surname>
            ,
            <given-names>D.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Toth</surname>
            ,
            <given-names>P.</given-names>
          </string-name>
          :
          <article-title>Dynamic programming and strong bounds for the 0-1 knapsack problem</article-title>
          .
          <source>Management Science</source>
          <volume>45</volume>
          (
          <issue>3</issue>
          ) (
          <year>1999</year>
          )
          <fpage>414</fpage>
          -
          <lpage>424</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref4">
        <mixed-citation>
          4.
          <string-name>
            <surname>Hansen</surname>
            ,
            <given-names>P.</given-names>
          </string-name>
          , Mladenovi´c, N.:
          <article-title>Variable neighborhood search: Principles and applications</article-title>
          .
          <source>European Journal of Operational Research</source>
          <volume>130</volume>
          (
          <issue>3</issue>
          ) (
          <year>2001</year>
          )
          <fpage>449</fpage>
          -
          <lpage>467</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref5">
        <mixed-citation>
          5.
          <string-name>
            <surname>Voß</surname>
            ,
            <given-names>S.</given-names>
          </string-name>
          :
          <article-title>Steiner's problem in graphs: heuristic methods</article-title>
          .
          <source>Discrete Applied Mathematics</source>
          <volume>40</volume>
          (
          <year>1992</year>
          )
          <fpage>45</fpage>
          -
          <lpage>72</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref6">
        <mixed-citation>
          6.
          <string-name>
            <surname>Contreras</surname>
            ,
            <given-names>I.A.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Diaz</surname>
            ,
            <given-names>J.A.</given-names>
          </string-name>
          :
          <article-title>Scatter search for the single source capacitated facility location problem</article-title>
          .
          <source>Annals of Operations Research</source>
          <volume>157</volume>
          (
          <issue>1</issue>
          ) (
          <year>2008</year>
          )
          <fpage>73</fpage>
          -
          <lpage>89</lpage>
        </mixed-citation>
      </ref>
      <ref id="ref7">
        <mixed-citation>
          7.
          <string-name>
            <surname>Feo</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Resende</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          :
          <article-title>Greedy randomized adaptive search procedures</article-title>
          .
          <source>Journal of Global Optimization</source>
          <volume>6</volume>
          (
          <issue>2</issue>
          ) (
          <year>1995</year>
          )
          <fpage>109</fpage>
          -
          <lpage>133</lpage>
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>