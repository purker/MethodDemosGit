<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta />
    <article-meta>
      <title-group>
        <article-title>Chase Termination for Guarded Existential Rules</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author">
          <string-name>Marco Calautti</string-name>
          <email>calautti@dimes.unical.it</email>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Georg Gottlob</string-name>
          <email>georg.gottlob@cs.ox.ac.uk</email>
          <xref ref-type="aff" rid="aff1">1</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Andreas Pieris</string-name>
          <email>pieris@dbai.tuwien.ac.at</email>
          <xref ref-type="aff" rid="aff2">2</xref>
        </contrib>
        <aff id="aff0">
          <label>0</label>
          <institution>DIMES, University of Calabria</institution>
          ,
          <country country="IT">Italy</country>
        </aff>
        <aff id="aff1">
          <label>1</label>
          <institution>Department of Computer Science, University of Oxford</institution>
          ,
          <country country="UK">UK</country>
        </aff>
        <aff id="aff2">
          <label>2</label>
          <institution>Institute of Information Systems, Vienna University of Technology</institution>
          ,
          <country country="AT">Austria</country>
        </aff>
      </contrib-group>
      <abstract>
        <p>The chase procedure is considered as one of the most fundamental algorithmic tools in database theory. It has been successfully applied to different database problems such as data exchange, and query answering and containment under constraints, to name a few. One of the central problems regarding the chase procedure is all-instance termination, that is, given a set of tuple-generating dependencies (TGDs) (a.k.a. existential rules), decide whether the chase under that set terminates, for every input database. It is well-known that this problem is undecidable, no matter which version of the chase we consider. The crucial question that comes up is whether existing restricted classes of TGDs, proposed in different contexts such as ontological reasoning, make the above problem decidable. In this work, we focus our attention on the oblivious and the semi-oblivious versions of the chase procedure, and we give a positive answer for classes of TGDs that are based on the notion of guardedness.</p>
      </abstract>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>-</title>
      <p>The chase procedure (or simply chase) is considered as one of the most fundamental
algorithmic tools in databases — it accepts as input a database D and a set Σ of
constraints and, if it terminates (which is not guaranteed), its result is a finite instance DΣ
that enjoys two crucial properties:
1. DΣ is a model of D and Σ, i.e., it contains D and satisfies the constraints of Σ;
and
2. DΣ is universal, i.e., it can be homomorphically embedded into every other model
of D and Σ.</p>
      <p>In other words, the chase is an algorithmic tool for computing universal models of D
and Σ, which can be conceived as representatives of all the other models of D and Σ.
This is precisely the reason for the ubiquity of the chase in database theory. Indeed,
many key database problems can be solved by simply exhibiting a universal model.</p>
      <p>A central class of constraints, which can be treated by the chase procedure and
is of special interest for this work, are the well-known tuple-generating dependencies
(TGDs) (a.k.a. existential rules) of the form ∀X∀Y(φ(X, Y) → ∃Z(ψ(Y, Z))), where
φ and ψ are conjunctions of atoms. Given a database D and a set Σ of TGDs, the chase
adds new atoms to D (possibly involving nulls) until the final result satisfies Σ.
Example 1. Consider the database D = {person(Bob)}, and the TGD
∀X(person(X) → ∃Y hasFather (X, Y ) ∧ person(Y )),
which asserts that each person has a father who is also a person. The database atom
triggers the TGD, and the chase will add in D the atoms hasFather (Bob, z1) and
person(z1) in order to satisfy it, where z1 is a (labeled) null representing some
unknown value. However, the new atom person(z1) triggers again the TGD, and the chase
is forced to add the atoms hasFather (z1, z2), person(z2), where z2 is a new null. The
result of the chase is the instance
{person(Bob), hasFather (Bob, z1)} ∪ ∪ {person(zi), hasFather (zi, zi+1)},
i&gt;0
where z1, z2, . . . are nulls.</p>
      <p>
        As shown by the above example, the chase procedure may run forever, even for
extremely simple databases and constraints. In the light of this fact, there has been a long
line of research on identifying syntactic properties on TGDs such that, for every input
database, the termination of the chase is guaranteed; see, e.g., [
        <xref ref-type="bibr" rid="ref10 ref12 ref13 ref4 ref8">4, 8, 10, 12, 13</xref>
        ] — this
list is by no means exhaustive, and we refer to [
        <xref ref-type="bibr" rid="ref9">9</xref>
        ] for a comprehensive survey. With so
much effort spent on identifying sufficient conditions for the termination of the chase
procedure, the question that comes up is whether a sufficient condition that is also
necessary exists. In other words, given a set Σ of TGDs, is it possible to determine whether,
for every database D, the chase on D and Σ terminates? This interesting question has
been recently addressed in [
        <xref ref-type="bibr" rid="ref6">6</xref>
        ], and unfortunately the answer is negative for all the
versions of the chase that are usually used in database applications, namely the oblivious,
semi-oblivious and restricted chase. In fact, the problem remains undecidable even if
the database is known. This has been established in [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ] for the restricted chase, and it
was observed in [
        <xref ref-type="bibr" rid="ref12">12</xref>
        ] that the same proof shows undecidability also for the oblivious
and the semi-oblivious chase.
      </p>
      <p>
        Although the chase termination problem is undecidable in general, the proof given
in [
        <xref ref-type="bibr" rid="ref6">6</xref>
        ] does not show the undecidability of the problem for TGDs that enjoy some
structural conditions, which in turn guarantee favorable model-theoretic properties. Such a
key condition is guardedness, a well-accepted paradigm that gives rise to robust
rulebased languages that capture important databases constraints and lightweight
description logics. A TGD is guarded if it has an atom in the left-hand side that contains (or
guards) all the universally quantified variables [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ]. Guardedness guarantees the
treelikeness of the underlying models, and thus the decidability of central database
problems. The question that comes up is whether guardedness has the same positive impact
on chase termination.
      </p>
      <p>
        We focus on the (semi-)oblivious versions of the chase, and we show that the
problem of deciding the termination of the chase for guarded TGDs is decidable, and we
establish precise complexity results. Surprisingly, the present work is to our knowledge
the first one that establishes positive results for the (semi-)oblivious chase termination
problem. For more details, we refer the reader to [
        <xref ref-type="bibr" rid="ref1">1</xref>
        ].
      </p>
    </sec>
    <sec id="sec-2">
      <title>The Chase Termination Problem</title>
      <p>
        The TGD chase procedure (or simply chase) takes as input an instance I and a set Σ of
TGDs, and constructs a universal model of I and Σ. The chase works on I by applying
the so-called trigger for a set of TGDs on I. The trigger for a set Σ of TGDs on an
instance I is a pair (σ, h), where σ = φ → ψ ∈ Σ and h is a homomorphism that
maps φ to I. An application of (σ, h) to I returns J = I ∪ h′(ψ), where h′ ⊇ h maps
each existentially quantified variable in ψ to a new null value. Such a trigger application
is written I⟨σ, h⟩J . The choice of the type of the next trigger to be applied is crucial
since it gives rise to different versions of the chase procedure. In this work, we focus
our attention on the oblivious [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ] and semi-oblivious [
        <xref ref-type="bibr" rid="ref12 ref7">7, 12</xref>
        ] chase.
      </p>
      <p>A finite sequence I0, I1, . . . , In, where n &gt; 0, is said to be a terminating oblivious
chase sequence of I0 w.r.t. a set Σ of TGDs if: (i) for each 0 6 i &lt; n, there exists
a trigger (σ, h) for Σ on Ii such that Ii⟨σ, h⟩Ii+1; (ii) for each 0 6 i &lt; j &lt; n,
assuming that Ii⟨σi, hi⟩Ii+1 and Ij ⟨σj , hj ⟩Ij+1, σi = σj = σ implies hi ̸= hj , i.e.,
hi and hj are different homomorphisms; and (iii) there is no trigger (σ, h) for Σ on In
such that (σ, h) ̸∈ {(σi, hi)}06i6n−1. In this case, the result of the chase is the (finite)
instance In. An infinite sequence I0, I1, . . . of instances is said to be a non-terminating
oblivious chase sequence of I0 w.r.t. Σ if: (i) for each i &gt; 0, there exists a trigger (σ, h)
for Σ on Ii such that Ii⟨σ, h⟩Ii+1; (ii) for each i, j &gt; 0 such that i ̸= j, assuming that
Ii⟨σi, hi⟩Ii+1 and Ij ⟨σj , hj ⟩Ij+1, σi = σj = σ implies hi ̸= hj ; and (iii) for each
i &gt; 0, and for every trigger (σ, h) for Σ on Ii, there exists j &gt; i such that Ij ⟨σ, h⟩Ij+1;
this is known as the fairness condition, and guarantees that all the triggers eventually
will be applied. The result of the chase is defined as the infinite instance ∪i&gt;0Ii.</p>
      <p>The semi-oblivious chase is a refined version of the oblivious chase, which avoids
the application of some superfluous triggers. Roughly speaking, given a TGD σ of the
form φ → ψ, for the semi-oblivious chase, two homomorphisms h and g that agree on
the universally quantified variables of σ occurring in ψ are indistinguishable.</p>
      <p>Henceforth, we write o-chase and so-chase for oblivious and semi-oblivious chase,
respectively. A ⋆-chase sequence, where ⋆ ∈ {o, so}, may be infinite.</p>
      <p>Example 2. Let D = {p(a, b)}, and Σ = {∀X∀Y (p(X, Y ) → ∃Z(p(Y, Z)))}.
There exists only one ⋆-chase sequence of D w.r.t. Σ, where ⋆ ∈ {o, so}, which is
non-terminating, i.e., I0, I1, . . . with</p>
      <p>I0 = {p(a, b)}</p>
      <p>I1 = {p(a, b), p(b, z1)}</p>
      <p>Ii = Ii−1 ∪ {p(zi−1, zi)}, for i &gt; 2,
where z1, z2, . . . are nulls of N.</p>
      <p>For a set of TGDs, a key question is whether all or some ⋆-chase sequences are
terminating on all databases. Before formalizing the above decision problems, let us
recall the following key classes of TGDs:</p>
      <p>CT⋆∀ = {Σ | ∀D, all ⋆ -chase sequences of D w.r.t. Σ are terminating}
CT⋆∃ = {Σ | ∀D, there exists a terminating ⋆ -chase sequence of D w.r.t. Σ}.
The decision problems tackled in this work are as follows: for q ∈ {∀, ∃}:
q-SEQUENCE ⋆-CHASE TERMINATION:</p>
      <p>Instance: A set Σ of TGDs.</p>
      <p>Question: Does Σ ∈ CTq⋆?</p>
      <p>
        We recall that CTo∀ = CTo∃ ⊂ CTs∀o = CTs∃o [
        <xref ref-type="bibr" rid="ref7">7</xref>
        ]. This implies that the preceding
decision problems coincide for the (semi-)oblivious chase. Henceforth, we refer to the
⋆-chase termination problem, and we write CT⋆ for CT⋆ and CT⋆ , where ⋆ ∈ {o, so}.
∀ ∃
3
      </p>
    </sec>
    <sec id="sec-3">
      <title>The Complexity of Chase Termination</title>
      <p>
        We focus on the class of guarded TGDs [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ], and two key subclasses of it, namely simple
linear and linear TGDs [
        <xref ref-type="bibr" rid="ref3">3</xref>
        ], and we investigate the complexity of the (semi-)oblivious
chase termination problem. Recall that linear TGDs are TGDs with just one atom in the
body, while simple linear TGDs forbid the repetition of variables in the body. Notice
that, despite their simplicity, simple linear TGDs are powerful enough for capturing
prominent database dependencies, and in particular inclusion dependencies, as well as
key description logics such as DL-Lite. In the sequel, we denote by G the class of
guarded TGDs, which is defined as the family of all possible sets of guarded TGDs.
Analogously, we denote by SL and L the classes of simple linear and linear TGDs,
respectively; clearly, SL ⊂ L ⊂ G. Let us first consider the less expressive classes.
3.1
      </p>
      <sec id="sec-3-1">
        <title>Linearity</title>
        <p>
          By exploiting syntactic conditions that ensure the termination of each (semi-)oblivious
chase sequence on all databases, we syntactically characterize the classes (CT⋆ ∩ SL)
and (CT⋆∩L), where ⋆ ∈ {o, so}. We rely on weak-acyclicity [
          <xref ref-type="bibr" rid="ref5">5</xref>
          ] and rich-acyclicity [
          <xref ref-type="bibr" rid="ref11">11</xref>
          ].
Both weak- and rich-acyclicity are defined by posing an acyclicity condition on a
graph, which encodes how terms are propagated among the positions of the underlying
schema during the chase. In fact, weak-acyclicity forbids the existence of dangerous
cycles (which involve the generation of new null values) in the dependency graph [
          <xref ref-type="bibr" rid="ref5">5</xref>
          ],
while rich-acyclicity pose the same condition on the so-called extended dependency
graph [
          <xref ref-type="bibr" rid="ref11">11</xref>
          ]. Let WA and RA be the classes of weakly- and richly-acyclic TGDs,
respectively; notice that RA ⊂ WA. For simple linear TGDs we show that:
Theorem 1. (CTo ∩ SL) = (RA ∩ SL) and (CTso ∩ SL) = (WA ∩ SL).
        </p>
        <p>In simple words, the above theorem states that, given a set Σ ∈ SL: Σ ∈ CTo iff
Σ is richly-acyclic, and Σ ∈ CTso iff Σ is weakly-acyclic. This result is established by
showing that a dangerous cycle in the extended dependency graph (resp., dependency
graph) necessarily gives rise to a non-terminating o-chase (resp., so-chase) sequence.</p>
        <p>Let us now focus on (non-simple) linear TGDs. It is possible to show, by
exhibiting a counterexample, that a dangerous cycle does not necessarily correspond to an
infinite chase derivation. Thus, rich- and weak-acyclicity are not powerful enough for
syntactically characterize the fragment of linear TGDs that guarantees the termination
of the oblivious and semi-oblivious chase, respectively. Interestingly, it is possible to
extend rich- and weak-acyclicity, focussing on linear TGDs, in such a way that the
above key property holds. The obtained formalisms are dubbed critical-rich-acyclicity
and critical-weak-acyclicity, and the corresponding classes are denoted as LCriticalRA
and LCriticalWA, respectively. We show that:
Theorem 2. (CTo ∩ L) = LCriticalRA and (CTso ∩ L) = LCriticalWA.</p>
        <p>The above syntactic characterizations, apart from being interesting in their own
right, allow us to obtain optimal upper bounds for the ⋆-chase termination problem for
(S)L — we simply need to analyze the complexity of deciding whether a set of (simple)
linear TGDs enjoys the above acyclicity-based conditions, which can be formulated as
a reachability problem on a graph. In particular, we obtain the following results:
Theorem 3. Consider a set Σ of TGDs. The problem of deciding whether Σ ∈ CT⋆,
where ⋆ ∈ {o, so}, is
1. NL-complete, even for unary and binary predicates, if Σ ∈ SL; and
2. PSPACE-complete, and NL-complete for predicates of bounded arity, if Σ ∈ L.</p>
        <p>For the hardness results, a generic technique, called the looping operator, is
proposed, which allows us to obtain lower bounds for the chase termination problem in a
uniform way. In fact, the goal of the looping operator is to provide a generic reduction
from propositional atom entailment to the complement of chase termination.
3.2</p>
      </sec>
      <sec id="sec-3-2">
        <title>Guardedness</title>
        <p>We proceed to investigate the (semi-)oblivious chase termination problem for guarded
TGDs. Although there is no way (at least no obvious one) to syntactically characterize
the classes (CT⋆ ∩ G), where ⋆ ∈ {o, so}, via rich- and weak-acyclicity, as we did
for (simple) linear TGDs, it is possible to show that the problem of recognizing the
above classes is decidable. For technical reasons, we focus on standard databases, that
is, databases that have two constants, let say 0 and 1, that are available via the unary
predicates 0(·) and 1(·), respectively. In particular, we show the following:
Theorem 4. Consider a set Σ ∈ G. The problem of deciding whether Σ ∈ CT⋆, where
⋆ ∈ {o, so}, focussing on standard databases, is 2EXPTIME-complete, and
EXPTIMEcomplete for predicates of bounded arity.</p>
        <p>The upper bounds are obtained by exhibiting an alternating algorithm that runs in
exponential space, in general, and in polynomial space in case of predicates of bounded
arity. The lower bounds are obtained by reductions from the acceptance problem of
alternating exponential (resp., polynomial) space clocked Turing machines, i.e., Turing
machines equipped with a counter. These reductions are obtained by modifying
significantly existing reductions for the problem of propositional atom entailment under
guarded TGDs, and then exploiting the looping operator mentioned above. The fact
that the database is standard, is crucial for establishing the above lower bounds; the
upper bounds hold even for non-standard databases.
Our next step is to perform similar analysis focussing on the restricted version of the
chase. We already have some preliminary positive results. In particular, if we focus on
single-head linear TGDs, where each predicate appears in the head of at most one TGD,
then we can syntactically characterize, via a careful extension of weak-acyclicity, the
fragment that guarantees the termination of the restricted chase, and obtain a polynomial
time upper bound. We are currently working towards the full settlement of the problem.
Acknowledgements. M. Calautti was supported by the European Commission,
European Social Fund and Region Calabria. G. Gottlob was supported by the EPSRC
Programme Grant EP/M025268/ “VADA: Value Added Data Systems – Principles and
Architecture”, and the Grant ERC-POC-2014 Nr. 641222 “ExtraLytics: Big Data for
Real Estate”. A. Pieris was supported by the Austrian Science Fund (FWF), projects
P25207-N23 and Y698, and Vienna Science and Technology Fund (WWTF), project
ICT12-015.</p>
      </sec>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          1.
          <string-name>
            <surname>Calautti</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Gottlob</surname>
            ,
            <given-names>G.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Pieris</surname>
            ,
            <given-names>A.</given-names>
          </string-name>
          :
          <article-title>Chase termination for guarded existential rules</article-title>
          .
          <source>In: PODS</source>
          (
          <year>2015</year>
          ), to appear
        </mixed-citation>
      </ref>
      <ref id="ref2">
        <mixed-citation>
          2. Cal`ı,
          <string-name>
            <given-names>A.</given-names>
            ,
            <surname>Gottlob</surname>
          </string-name>
          ,
          <string-name>
            <given-names>G.</given-names>
            ,
            <surname>Kifer</surname>
          </string-name>
          ,
          <string-name>
            <surname>M.</surname>
          </string-name>
          :
          <article-title>Taming the infinite chase: Query answering under expressive relational constraints</article-title>
          .
          <source>J. Artif. Intell. Res</source>
          .
          <volume>48</volume>
          ,
          <fpage>115</fpage>
          -
          <lpage>174</lpage>
          (
          <year>2013</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref3">
        <mixed-citation>
          3. Cal`ı,
          <string-name>
            <given-names>A.</given-names>
            ,
            <surname>Gottlob</surname>
          </string-name>
          ,
          <string-name>
            <given-names>G.</given-names>
            ,
            <surname>Lukasiewicz</surname>
          </string-name>
          ,
          <string-name>
            <surname>T.</surname>
          </string-name>
          :
          <article-title>A general Datalog-based framework for tractable query answering over ontologies</article-title>
          .
          <source>J. Web Sem</source>
          .
          <volume>14</volume>
          ,
          <fpage>57</fpage>
          -
          <lpage>83</lpage>
          (
          <year>2012</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref4">
        <mixed-citation>
          4.
          <string-name>
            <surname>Deutsch</surname>
            ,
            <given-names>A.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Nash</surname>
            ,
            <given-names>A.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Remmel</surname>
            ,
            <given-names>J.B.</given-names>
          </string-name>
          :
          <article-title>The chase revisisted</article-title>
          .
          <source>In: PODS</source>
          . pp.
          <fpage>149</fpage>
          -
          <lpage>158</lpage>
          (
          <year>2008</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref5">
        <mixed-citation>
          5.
          <string-name>
            <surname>Fagin</surname>
            ,
            <given-names>R.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Kolaitis</surname>
            ,
            <given-names>P.G.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Miller</surname>
            ,
            <given-names>R.J.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Popa</surname>
            ,
            <given-names>L.</given-names>
          </string-name>
          :
          <article-title>Data exchange: Semantics and query answering</article-title>
          .
          <source>Theor. Comput. Sci</source>
          .
          <volume>336</volume>
          (
          <issue>1</issue>
          ),
          <fpage>89</fpage>
          -
          <lpage>124</lpage>
          (
          <year>2005</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref6">
        <mixed-citation>
          6.
          <string-name>
            <surname>Gogacz</surname>
            ,
            <given-names>T.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Marcinkowski</surname>
          </string-name>
          , J.:
          <article-title>All-instances termination of chase is undecidable</article-title>
          .
          <source>In: ICALP</source>
          . pp.
          <fpage>293</fpage>
          -
          <lpage>304</lpage>
          (
          <year>2014</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref7">
        <mixed-citation>
          7.
          <string-name>
            <surname>Grahne</surname>
            ,
            <given-names>G.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Onet</surname>
            ,
            <given-names>A.</given-names>
          </string-name>
          :
          <article-title>Anatomy of the chase</article-title>
          .
          <source>CoRR abs/1303</source>
          .6682 (
          <year>2013</year>
          ), http://arxiv.org/abs/1303.6682
        </mixed-citation>
      </ref>
      <ref id="ref8">
        <mixed-citation>
          8.
          <string-name>
            <surname>Grau</surname>
            ,
            <given-names>B.C.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Horrocks</surname>
            ,
            <given-names>I.</given-names>
          </string-name>
          , Kro¨tzsch,
          <string-name>
            <given-names>M.</given-names>
            ,
            <surname>Kupke</surname>
          </string-name>
          ,
          <string-name>
            <given-names>C.</given-names>
            ,
            <surname>Magka</surname>
          </string-name>
          ,
          <string-name>
            <given-names>D.</given-names>
            ,
            <surname>Motik</surname>
          </string-name>
          ,
          <string-name>
            <given-names>B.</given-names>
            ,
            <surname>Wang</surname>
          </string-name>
          ,
          <string-name>
            <surname>Z.</surname>
          </string-name>
          :
          <article-title>Acyclicity conditions and their application to query answering in description logics</article-title>
          .
          <source>In: KR</source>
          (
          <year>2012</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref9">
        <mixed-citation>
          9.
          <string-name>
            <surname>Greco</surname>
            ,
            <given-names>S.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Molinaro</surname>
            ,
            <given-names>C.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Spezzano</surname>
            ,
            <given-names>F.</given-names>
          </string-name>
          :
          <article-title>Incomplete Data and Data Dependencies in Relational Databases</article-title>
          . Morgan &amp; Claypool Publishers (
          <year>2012</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref10">
        <mixed-citation>
          10.
          <string-name>
            <surname>Greco</surname>
            ,
            <given-names>S.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Spezzano</surname>
            ,
            <given-names>F.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Trubitsyna</surname>
            ,
            <given-names>I.</given-names>
          </string-name>
          :
          <article-title>Stratification criteria and rewriting techniques for checking chase termination</article-title>
          .
          <source>PVLDB</source>
          <volume>4</volume>
          (
          <issue>11</issue>
          ),
          <fpage>1158</fpage>
          -
          <lpage>1168</lpage>
          (
          <year>2011</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref11">
        <mixed-citation>
          11.
          <string-name>
            <surname>Hernich</surname>
            ,
            <given-names>A.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Schweikardt</surname>
          </string-name>
          , N.:
          <article-title>CWA-solutions for data exchange settings with target dependencies</article-title>
          .
          <source>In: PODS</source>
          . pp.
          <fpage>113</fpage>
          -
          <lpage>122</lpage>
          (
          <year>2007</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref12">
        <mixed-citation>
          12.
          <string-name>
            <surname>Marnette</surname>
            ,
            <given-names>B.</given-names>
          </string-name>
          :
          <article-title>Generalized schema-mappings: From termination to tractability</article-title>
          . In: PODS. pp.
          <fpage>13</fpage>
          -
          <lpage>22</lpage>
          (
          <year>2009</year>
          )
        </mixed-citation>
      </ref>
      <ref id="ref13">
        <mixed-citation>
          13.
          <string-name>
            <surname>Meier</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Schmidt</surname>
            ,
            <given-names>M.</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Lausen</surname>
          </string-name>
          , G.:
          <article-title>On chase termination beyond stratification</article-title>
          .
          <source>PVLDB</source>
          <volume>2</volume>
          (
          <issue>1</issue>
          ),
          <fpage>970</fpage>
          -
          <lpage>981</lpage>
          (
          <year>2009</year>
          )
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>