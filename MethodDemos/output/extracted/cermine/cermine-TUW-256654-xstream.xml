<Publication>
  <id>TUW-256654</id>
  <publicationYear>2000</publicationYear>
  <abstractText>A section is a contiguous region of memory, to which data or code can be appended (like the Forth dictionary). Assembly languages and linkers have supported multiple sections for a long time. This paper A particular instance of this problem is when A describes the benefits of supporting multiple sec- is a colon definition under construction, and B is tions in Forth, interfaces and implementation tech- the data for a string or floating-point literal. Forth niques. compilers traditionally work around this by not requiring contiguity. A typical solution is to call a word such as (s&quot;) 1 Introduction or flit, and follow that with the inline data. These words get the return address from the return stack, A section is a contiguous memory area, to which use that to push the relevant data on the data/FP new data can be appended at the end; the Forth stack, then increment the return address to skip dictionary is a section. Assemblers and linkers over the data, and then either return to the changed have supported multiple sections or segments for return address or jump to it. Both ways are very exmany decades [Lev00]. In contrast, Forth tradition- pensive on modern CPUs, because they cause misally has had only one section; some systems have predictions from the hardware return stack1: If the had separated headers (another section), and cross- changed address is returned from, the return incurs compilers have uninitialized memory for buffer:, a branch misprediction (about 20 cycles on a modbut by and large, Forth systems have made do ern Intel or AMD CPU); if the changed address is with just one section: the dictionary. With mul- jumped to, the jump has a chance to predict cortiple sections, each section has it&apos;s own start, dic- rectly, but all outer returns will mispredict once (at tionary pointer (what here reads), and end (used about 20 cycles per misprediction). in unused, but otherwise not used much). A faster approach is to jump across the data, and This paper presents various uses of sections and then let some code push the data on the data/FP why they are better than the current workarounds stack. This does not cause significant mispredic(Section 2), presents a programming interface (Sec- tions, but the code is bigger (jump plus inlined littion 3), and discusses various implementation ap- eral code). proaches (Section 4). Finally, if you put the data elsewhere (i.e., a different section), you get fewer mispredictions, and you save the space for the jump around the data. 2 Uses As an example of the benefit of putting the data out-of-line, consider the following micro2.1 Nested structures benchmark: You often build one structure A in memory, and in \ inline variant the middle of that, have to build some out-of-line : foo1 123e f+ ; part B, and afterwards continue building A. If you have two sections, that is easy: you put A in one \ out-of-line simulation section, and B in the other section. In Forth, you 123e fconstant x traditionally use one of the workarounds: : foo2 x f+ ; â€¢ You select a representation for A that does not defer foo require contiguity. : bench 0e 100000000 0 do foo loop f. cr ;</abstractText>
  <maxSectionLayer>0</maxSectionLayer>
  <keywords/>
  <authors>
    <Author>
      <name>M. Anton Ertl</name>
      <firstNames/>
      <affiliations/>
    </Author>
    <Author>
      <name>TU Wien</name>
      <firstNames/>
      <affiliations/>
    </Author>
  </authors>
  <affiliations/>
  <sections>
    <Section>
      <id>sec-1</id>
      <title>-</title>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <id>sec-2</id>
      <title>For multi-tasking, the dictionary and the named</title>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <id>sec-3</id>
      <title>The implementation of sections for use within a session is pretty straightforward: Just a data structure with start, end, and section-dp per section, Ertl</title>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <id>sec-4</id>
      <title>The interface for working with sections is simple,</title>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <id>sec-5</id>
      <title>The current implementation in Gforth takes the collapsing approach. One advantage is that the loader (which does not know about sections) does not need to be changed.</title>
      <referenceIds/>
      <referenceCitations/>
    </Section>
  </sections>
  <citationContexts/>
  <references>
    <Reference>
      <id>ref1</id>
      <referenceIdString>ref1</referenceIdString>
      <title>Arguments nary), and start the next session with just the and design decisions. In 32nd EuroForth dictionary, and with empty named sections</title>
      <source>Conference</source>
      <authors>
        <ReferenceAuthor>
          <firstNames>
            <string>M. Anton</string>
          </firstNames>
          <lastName>Ertl</lastName>
        </ReferenceAuthor>
      </authors>
      <publicationYear>2016</publicationYear>
      <publication reference="/Publication[1]"/>
    </Reference>
  </references>
</Publication>