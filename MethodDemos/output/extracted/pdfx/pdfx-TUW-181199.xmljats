<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  SYSTEM "http://dtd.nlm.nih.gov/archiving/3.0/archivearticle3.dtd">
<article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:xlink="http://www.w3.org/1999/xlink">
   <front>
      <journal-meta>
         <journal-id/>
         <journal-title-group>
            <journal-title/>
         </journal-title-group>
         <issn/>
         <publisher>
            <publisher-name/>
         </publisher>
      </journal-meta>
      <article-meta>
         <title-group>
            <article-title>spock : A Debugging Support Tool for Logic Programs under the Answer-Set Semantics ⋆</article-title>
         </title-group>
         <supplement>
            <p>Martin Gebser 1 , Jörg Pührer 2 , Torsten Schaub 1 , Hans Tompits 2 , and Stefan Woltran 2 1 Institut für Informatik, Universität Potsdam, August-Bebel-Straße 89, D-14482 Potsdam, Germany { gebser,torsten } @cs.uni-potsdam.de 2 Institut für Informationssysteme, Technische Universität Wien, Favoritenstraße 9–11, A–1040 Vienna, Austria { puehrer,tompits } @kr.tuwien.ac.at <email>woltran@dbai.tuwien.ac.at</email>
            </p>
         </supplement>
         <abstract>
            <sec>
               <p>Answer-set programming (ASP) is an emerging logic-programming paradigm that strictly separates the description of a problem from its solving methods. Despite its semantic elegance, ASP suffers from a lack of support for program developers. In particular, tools are needed that help engineers in detecting erroneous parts of their programs. Unlike in other areas of logic programming, applying tracing techniques for debugging logic programs under the answer-set semantics seems rather unnatural, since employing imperative solving algorithms would undermine the declarative flavour of ASP. In this paper, we present the system spock , a debugging support tool for answer-set programs making use of ASP itself. The implemented techniques maintain the declarative nature of ASP within the debugging process and are independent of the actual computation of answer sets.</p>
            </sec>
         </abstract>
      </article-meta>
   </front>
   <body>
      <sec>
         <title>1 General Information</title>
      </sec>
      <sec>
         <title>2 Background</title>
         <p>A ( ) (over an alphabet ) is a finite set of rules of the form</p>
         <sec>
            <title>2.1 Answer-Set Programs A ( normal ) logic program (over an alphabet A ) is a finite set of rules of the form a ← b 1 , . . . , b , not c 1 , . . . , not c , (1) a b , c ∈ A 0 ≤ i ≤ m 0 ≤ j ≤ n a</title>
            <p>where and i j are atoms, for , . A literal is an atom or its negation not a . For a rule r as in (1), let head ( r ) = a be the head of r and body ( r ) = { b 1 , . . . , b m , not c 1 , . . . , not c n } the body of r . Furthermore, we define body + ( r ) = { b 1 , . . . , b m } and body − ( r ) = { c 1 , . . . , c n } . For a logic program Π , a set X of atoms is an answer set of Π iff X is a minimal model of { head ( r ) ← body + ( r ) | r ∈ Π, body − ( r ) ∩ X = ∅} . For uniformity, we assume that any integrity constraint ← body ( r ) is expressed as a rule w ← body ( r ) , not w, where w is a globally new atom. Moreover,  we allow nested expressions of form not not a , where a is some atom, in the body of rules. Such rules are identified with normal rules in which not not a is replaced by not a ⋆ , where a ⋆ is a globally new atom, together with an additional rule a ⋆ ← not a .</p>
         </sec>
         <sec>
            <title>2.2 Tagging-Based Debugging</title>
            <p>In what follows, we sketch the theoretical principles underlying our system spock . For a more detailed discussion, we refer to Brain et al. [<xref id="XR26" ref-type="bibr" rid="R5">5</xref>]. The main idea of tagging is to split the head from the body, for each rule in a program, and thereby to intervene into the applicability of rules. After this division, tags are installed for triggering rules. This way, the formation of answer sets can be controlled, and tags in the answer sets of the transformed (or tagged) program reflect inherent properties of the original program. Technically, a program Π (over alphabet A ) to debug is rewritten into a program T K [ Π ] over an extended alphabet A + . Let Π be a logic program over A and consider a bijection n , assigning to each rule r over A a unique name n r . Then, the program T K [ Π ] over A + consists of the following rules, for r ∈ Π , b ∈ body + ( r ) , and c ∈ body − ( r ) :</p>
            <p>The tags ap ( n r ) and bl ( n r ) express whether a rule r is applicable or blocked, respectively, while the control tags ko ( n r ) , ok ( n r ) , and ok ( n r ) are used for manipulating the application of r . Intuitively, the rules of Π are split into rules of forms (2) and (3), separating the applicability of a rule from the actual occurrence of the respective rule head in an interpretation. Analogously, rules of forms (4) and (5) elicit which rules are blocked. Tags stating whether rule r is applicable or blocked are only derived if ok ( n r ) holds, which is by default the case, as expressed by rules of form (6). We call T K [ Π ] the kernel tagging of Π , since it serves as a basic submodule for more enhanced programs facilitating certain debugging requests. One such extension scenario is the extrapolation of non-existing answer sets of a program Π over A . Using further translations, T P , T C , and T L [<xref id="XR30" ref-type="bibr" rid="R5">5</xref>], the occurrence of abnormality tags , ab p ( n r ) , ab c ( a ) , and ab l ( a ) , respectively, in an answer set X + of the transformed program provides information why an interpretation X = X + ∩ A is not an answer set of Π . Here, we make use of the Lin-Zhao theorem [<xref id="XR31" ref-type="bibr" rid="R8">8</xref>], which qualifies answer sets as models of the completion [<xref id="XR32" ref-type="bibr" rid="R9">9</xref>] and the loop formulas of a program. In particular, the program-oriented abnormality tag ab p ( n r ) indicates that rule r is applicable but not satisfied with respect to an interpretation. The completion-oriented abnormality tag ab c ( a ) signals that a is in the considered interpretation but all rules having a as head are blocked. Finally, the presence of a loop-oriented abnormality tag ab l ( a ) indicates that the derivation of atom a might recursively depend on a itself and, therefore, violate the minimality criterion for answer sets. Note that all transformations used are polynomial in the size of the input program and can be constructed for all programs under consideration, even for programs without answer sets.</p>
            <p>Command-Line Arguments Input Program &lt;file_1&gt; spock &lt;file_2&gt; Internal Program ... Parser Program Translation Representation &lt;file_n&gt; Standard Input</p>
            <fig id="F1">
               <caption>
                  <p>Fig. 1. Data flow of program translations</p>
               </caption>
               <graphic xlink:href=""/>
            </fig>
         </sec>
      </sec>
      <sec>
         <title>3 System</title>
         <p>spock is a command-line oriented tool, written in Java 5.0 and published under the GNU general public license [ <xref id="XR37" ref-type="bibr" rid="R10">10</xref>]. It is publicly available at as a jar-package including binaries and sources. The data flow for all transformations is depicted by <xref id="XR41" ref-type="fig" rid="F1">Fig. 1</xref>. First, the input program is parsed and represented in an internal data structure. Then, the actual program transformation is performed, as specified by command-line arguments. The tagging technique uses labels to refer to individual rules. Therefore, we allow the programmer to add labels to the rules of the program to debug. As this re- quires an extension of the program syntax, spock offers an interface to dlv [<xref id="XR42" ref-type="bibr" rid="R11">11</xref>] and lparse / smodels [<xref id="XR43" ref-type="bibr" rid="R12">12</xref>] for computing answer sets of labelled programs. For illustration of the debugging process, reconsider program Π inv , having the answer sets X 1 = { chekov , scotty } and X 2 = { bones , jim , scotty } , and assume that it is stored in file FILE . The kernel tagging T K [ Π inv ] is then obtained by the call java -jar spock.jar -k FILE . By piping the result of the command to an answer-set solver, we obtain the answer sets X 1 + = X 1 ∪ { ap ( n r 4 ) , ap ( n r 6 ) , bl ( n r 1 ) , bl ( n r 2 ) , bl ( n r 3 ) , bl ( n r 5 ) } ∪ OK and X 2 + = X 2 ∪ { ap ( n r 2 ) , ap ( n r 5 ) , ap ( n r 6 ) , bl ( n r 1 ) , bl ( n r 3 ) , bl ( n r 4 ) } ∪ OK , where OK = { ok ( n r 1 ) , ok ( n r 2 ) , ok ( n r 3 ) , ok ( n r 4 ) , ok ( n r 5 ) , ok ( n r 6 ) } , extending X 1 and X 2 by information about the applicability of rules. E.g., the presence of ap ( n r 4 ) in X 1 + indicates that rule r 4 is applicable with respect to X 1 , and hence chekov ∈ X 1 but bones ∈ / X 1 , while bl ( n r 3 ) ∈ X 1 + indicates that r 3 is blocked with respect to X 1 . This is because scotty ∈ X 1 . The flags ‘ -expo ’, ‘ -exco ’, and ‘ -exlo ’ activate the extrapolation translations T P , T C , and T L , respectively. Instead of using all three flags simultaneously, setting ‘ -ex ’ produces the union of the resulting programs. Furthermore, in order to restrict the scope of transformation T P to a subprogram Π ′ (respectively, translations T C , T L to sets A C , A L of atoms), the names of the considered rules (respectively, atoms) can be explicitly stated in a comma-separated list following the ‘ -exrules= ’ (resp., ‘ -exatomsC= ’ and ‘ -exatomsL= ’) flag. Finally, spock allows for computing only abnormality-minimum answer sets by means of dlv -specific weak constraints. The flags ‘ -minab ’, ‘ -minabp ’, ‘ -minabc ’, or ‘ -minabl ’ make spock output weak constraints for minimising all abnormality tags, program-oriented abnormality tags, completion-oriented abnormality tags, or loop-oriented abnormality tags, respectively. As for our example, recall that Sulu wanted to know why there is no chance for Uhura and Jim to attend the same party. Therefore, we add the constraints ← not uhura and ← not jim to Π inv . Let file FILE2 contain the overall program, which does not have answer sets. The (optimal) answer sets of the tagged program obtained by the call</p>
         <p> 
            <ext-link ext-link-type="uri" href="http://www.kr.tuwien.ac.at/research/debug">http://www.kr.tuwien.ac.at/research/debug</ext-link>
         </p>
         <p>java -jar spock.jar -k -ex -exrules=r1,r2,r3,r4,r5,r6 -minab FILE2 ,</p>
         <p>projected to the atoms occurring in Π inv and the abnormality tags, are given by { ab c ( chekov ) , bones , chekov , jim , uhura } , { ab c ( uhura ) , bones , jim , uhura } , and { ab p ( n r 5 ) , chekov , jim , uhura } , indicating that { bones , chekov , jim , uhura } is not an answer set of Π inv because atom chekov is not supported. Likewise, uhura is not supported with respect to { bones , jim , uhura } . Finally, { chekov , jim , uhura } is not an answer set as it does not satisfy rule r 5 .</p>
      </sec>
      <sec>
         <title>4 Discussion and Related Work</title>
         <p>In this paper, we presented spock , a prototype implementation of a debugging support tool for answer-set programs. The implemented methodology relies on theoretical results of previous work [ <xref id="XR49" ref-type="bibr" rid="R5">5</xref>] and is based on the idea that programs to be debugged are translated into other programs having answer sets that offer debugging-relevant information about the original programs. After an initial kernel transformation, we get insight into the applicability of rules with respect to individual answer sets. In a further step, the system allows for identifying causes why interpretations are not answer sets. Here, spock distinguishes between abnormalities due to missing or spare atoms, or atoms whose presence in an interpretation is self-caused. In order to restrict the amount of information returned to the programmer, standard ASP optimisation techniques can be used to focus on interpretations with a minimal number of abnormalities. In addition to the tagging technique described here, spock also supports another approach towards debugging answer-set programs based on meta-programming [<xref id="XR50" ref-type="bibr" rid="R13">13</xref>, <xref id="XR51" ref-type="bibr" rid="R14">14</xref>]. Future work includes the integration of further aspects of the translation approach and the design of a graphical user interface to ease the use of the features spock provides. Implementations of related techniques include smdebug [<xref id="XR52" ref-type="bibr" rid="R3">3</xref>], a prototype debugger focusing on odd-cycle-free inconsistent programs. The system is designed to find minimal sets of constraints, restoring consistency when removed from a program. Brain and De Vos [<xref id="XR53" ref-type="bibr" rid="R2">2</xref>] present the system IDEAS , implementing two query algorithms addressing the questions why a set of literals is true with respect to some or false with respect to all answer sets of a program. Both algorithms are procedural and similar to the ones used in ASP solvers, suggesting that an approach using program-level transformations would be more practical. Pontelli and Son [<xref id="XR55" ref-type="bibr" rid="R4">4</xref>] developed a preliminary implementation for their adoption of so-called justifications [<xref id="XR56" ref-type="bibr" rid="R15">15</xref>, <xref id="XR57" ref-type="bibr" rid="R16">16</xref>] to the problem of debugging answer-set programs. Their system returns visual output in form of graphs explaining why atoms are (not) present in an answer set.</p>
      </sec>
      <sec>
         <title>References</title>
      </sec>
   </body>
   <back>
      <ref-list>
         <ref id="R1">
            <mixed-citation>1. Baral, C.: Knowledge Representation, Reasoning and Declarative Problem Solving. Cam- bridge University Press (2003)</mixed-citation>
         </ref>
         <ref id="R2">
            <mixed-citation>2. Brain, M., De Vos, M.: Debugging Logic Programs under the Answer Set Semantics. In: Proc. ASP’05. Volume 142, CEUR Workshop Proceedings (CEUR-WS.org) (2005) 141–152</mixed-citation>
         </ref>
         <ref id="R3">
            <mixed-citation>3. Syrjänen, T.: Debugging Inconsistent Answer Set Programs. In: Proc. NMR’06. (2006) 77–83</mixed-citation>
         </ref>
         <ref id="R4">
            <mixed-citation>4. Pontelli, E., Son, T.: Justifications for Logic Programs under Answer Set Semantics. In: Proc. ICLP’06. Springer (2006) 196–210</mixed-citation>
         </ref>
         <ref id="R5">
            <mixed-citation>5. Brain, M., Gebser, M., Pührer, J., Schaub, T., Tompits, H., Woltran, S.: Debugging ASP Programs by means of ASP. In: Proc. LPNMR’07. Springer (2007) 31–43</mixed-citation>
         </ref>
         <ref id="R6">
            <mixed-citation>6. Brain, M., Gebser, M., Pührer, J., Schaub, T., Tompits, H., Woltran, S.: “That is Illogical Captain!” – The Debugging Support Tool spock for Answer-Set Programs: System Descrip- tion. In: Proc. SEA’07. (2007) 71–85</mixed-citation>
         </ref>
         <ref id="R7">
            <mixed-citation>7. Delgrande, J., Schaub, T., Tompits, H.: A Framework for Compiling Preferences in Logic Programs. Theory and Practice of Logic Programming 3 (2003) 129–187</mixed-citation>
         </ref>
         <ref id="R8">
            <mixed-citation>8. Lin, F., Zhao, Y.: ASSAT: Computing Answer Sets of a Logic Program by SAT Solvers. Artificial Intelligence 157 (2004) 115–137</mixed-citation>
         </ref>
         <ref id="R9">
            <mixed-citation>9. Clark, K.: Negation as Failure. In: Logic and Data Bases. Plenum Press (1978) 293–322</mixed-citation>
         </ref>
         <ref id="R10">
            <mixed-citation>10. GNU General Public License – Version 2, June 1991. Free Software Foundation Inc. (1991) <ext-link ext-link-type="uri" href="http://www.gnu.org/copyleft/gpl.html">http://www.gnu.org/copyleft/gpl.html</ext-link>
            </mixed-citation>
         </ref>
         <ref id="R11">
            <mixed-citation>11. Leone, N., Pfeifer, G., Faber, W., Eiter, T., Gottlob, G., Perri, S., Scarcello, F.: The DLV System for Knowledge Representation and Reasoning. ACM Transactions on Computational Logic 7 (2006) 499–562</mixed-citation>
         </ref>
         <ref id="R12">
            <mixed-citation>12. Simons, P., Niemelä, I., Soininen, T.: Extending and Implementing the Stable Model Semantics. Artificial Intelligence 138 (2002) 181–234</mixed-citation>
         </ref>
         <ref id="R13">
            <mixed-citation>13. Pührer, J.: On Debugging of Propositional Answer-Set Programs. Master’s thesis, Vienna University of Technology, Austria (2007)</mixed-citation>
         </ref>
         <ref id="R14">
            <mixed-citation>14. Gebser, M., Pührer, J., Schaub, T., Tompits, H.: A Meta-Programming Technique for Debugging Answer-Set Programs. In: Proc. AAAI’08. (2008) To appear</mixed-citation>
         </ref>
         <ref id="R15">
            <mixed-citation>15. Roychoudhury, A., Ramakrishnan, C., Ramakrishnan, I.: Justifying Proofs using Memo Tables. In: Proc. PPDP’00. (2000) 178–189</mixed-citation>
         </ref>
         <ref id="R16">
            <mixed-citation>16. Specht, G.: Generating Explanation Trees even for Negations in Deductive Database Systems. In: Proc. LPE’93. (1993) 8–13</mixed-citation>
         </ref>
      </ref-list>
   </back>
</article>