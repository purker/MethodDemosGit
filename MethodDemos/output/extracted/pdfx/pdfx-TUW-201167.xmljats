<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  SYSTEM "http://dtd.nlm.nih.gov/archiving/3.0/archivearticle3.dtd">
<article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:xlink="http://www.w3.org/1999/xlink">
   <front>
      <journal-meta>
         <journal-id/>
         <journal-title-group>
            <journal-title/>
         </journal-title-group>
         <issn/>
         <publisher>
            <publisher-name/>
         </publisher>
      </journal-meta>
      <article-meta>
         <title-group>
            <article-title>Using a Solution Archive to Enhance Metaheuristics for the Rooted Delay-Constrained Minimum Spanning Tree Problem</article-title>
         </title-group>
         <supplement>
            <p>Mario Ruthmair, Andreas Hubmer, and Günther R. Raidl Institute of Computer Graphics and Algorithms Vienna University of Technology, Vienna, Austria { ruthmair|raidl } @ads.tuwien.ac.at, <email>andreas.hubmer@tuwien.ac.at</email>
            </p>
         </supplement>
      </article-meta>
   </front>
   <body>
      <sec>
         <title>1 Introduction</title>
      </sec>
      <sec>
         <title>2 The Solution Archive</title>
         <p>One of the basic problems of local search and population-based heuristics is the potentially repeated examination of already visited solutions. To tackle the problem of revisits a complete solution archive can be built efficiently storing solutions and making it possible to derive new unvisited solutions as replacements of detected duplicates. First, promising experiments with solution archives to enhance standard genetic algorithms for binary benchmark problems are pre- sented in [ <xref id="XR11" ref-type="bibr" rid="R3">3</xref>]. Here we introduce a specialized solution archive for the RDCMST problem. A feasible solution to the RDCMST problem can also be interpreted as a directed spanning tree (outgoing arborescence) rooted at the source node s . Therefore each node except the root has a unique predecessor corresponding to the origin of the incoming arc. Our solution archive uses a trie data structure, which is mostly known from the domain of (language) dictionaries, where a huge number of words has to be stored in a very compact way. In our trie, each node contains an array of n − 1 references to nodes at the next level, and at each level a dedicated node’s predecessor in a given solution decides which pointer to follow. Therefore, a single solution is uniquely represented by n − 1 trie nodes. In this way, the trie has maximum height O ( n ), and an insertion operation and a check whether or not a solution is already contained can always be done in time O ( n ) independently of the number of stored solutions. Some special adaptions are applied to the basic trie data structure in order to reduce the used space while at the same not increasing access time too much. More specifically, the preprocessed input graph usually is not complete but typically sparse, so the number of array elements of a trie node can be reduced to the actual degree of the corresponding node. To maintain constant access time to an array element a global mapping between adjacent nodes and array indices is stored. Furthermore we can possibly reduce space by allocating the elements of a trie node dynamically, e.g. by a linked list, naturally at the expense of access time. Last but not least, fully explored subtrees are pruned and replaced by an appropriate marker. The essential aspect which makes our archive approach different to more common simple solution caching strategies as e.g. described in [<xref id="XR12" ref-type="bibr" rid="R2">2</xref>] is the provision of a function that derives for each duplicate a typically similar but definitely not yet visited solution. This operation can also be seen as a kind of “intelligent” mutation. Here, one has to consider that only a subset of possible predecessor assignments correspond to a feasible RDCMST solution satisfying both the tree structure and the delay constraints. In general finding an unvisited predecessor assignment in the archive takes O ( n ) time which is extended by a feasibility check. In a first step we only consider solutions differing in one edge. There are O ( n 2 ) such candidates and each one can be tested for feasibility in constant time when using appropriate pre-calculated information. If no new feasible solution can be found the search is successively extended to more distant solutions. An interesting, although more theoretical side effect of the extension of a metaheuristic by our archive is that the metaheuristic in principle becomes a complete, exact optimization approach with bounded runtime: In each iteration, (at least) one new solution is evaluated, and by the archive it is also efficiently possible to detect when the whole search space has been covered and the search can be terminated.</p>
      </sec>
      <sec>
         <title>3 Integration in Metaheuristics</title>
         <p>An important question is where to integrate the archive in a (meta-)heuristic process and which metaheuristics can benefit from such an extension at all. At some points the solution diversity may be very high lowering the probability of a revisit, e.g. after shaking the solution randomly. Therefore, the archive just grows very large possibly consuming too much space. At other points revisits typically occur more frequently, e.g. after applying local improvement methods, but due to the structure of the metaheuristic it cannot benefit much from consulting the archive. Detailed analyses of variants of archive-extended GRASP, ant colony optimization, and evolutionary algorithms are currently ongoing work. Generally speaking, the solution archive must be used with caution but has the potential to speed up a metaheuristic significantly.</p>
      </sec>
      <sec>
         <title>References</title>
      </sec>
   </body>
   <back>
      <ref-list>
         <ref id="R1">
            <mixed-citation>1. Gouveia, L., Paias, A., Sharma, D.: Modeling and Solving the Rooted Distance- Constrained Minimum Spanning Tree Problem. Computers and Operations Re- search 35(2), 600–613 (2008)</mixed-citation>
         </ref>
         <ref id="R2">
            <mixed-citation>2. Kratica, J.: Improving Performances of the Genetic Algorithm by Caching. Computers and Artificial Intelligence 18(3), 271–283 (1999)</mixed-citation>
         </ref>
         <ref id="R3">
            <mixed-citation>3. Raidl, G.R., Hu, B.: Enhancing Genetic Algorithms by a Trie-Based Complete Solution Archive. In: Cowling, P., Merz, P. (eds.) Evolutionary Computation in Com- binatorial Optimisation – EvoCOP 2010. LNCS, vol. 6022, pp. 239–251. Springer (2010)</mixed-citation>
         </ref>
         <ref id="R4">
            <mixed-citation>4. Ruthmair, M., Raidl, G.R.: A Kruskal-Based Heuristic for the Rooted Delay- Constrained Minimum Spanning Tree Problem. In: Moreno-D ́ ıaz, R., Pichler, F., Quesada-Arencibia, A. (eds.) EUROCAST 2009. LNCS, vol. 5717, pp. 713–720. Springer (2009)</mixed-citation>
         </ref>
         <ref id="R5">
            <mixed-citation>5. Ruthmair, M., Raidl, G.R.: Variable Neighborhood Search and Ant Colony Opti- mization for the Rooted Delay-Constrained Minimum Spanning Tree Problem. In: et al., R.S. (ed.) PPSN XI, Part II. LNCS, vol. 6239, pp. 391–400. Springer (2010)</mixed-citation>
         </ref>
         <ref id="R6">
            <mixed-citation>6. Salama, H.F., Reeves, D.S., Viniotis, Y.: The Delay-Constrained Minimum Spanning Tree Problem. In: Blum, C., Roli, A., Sampels, M. (eds.) Proceedings of the 2nd IEEE Symposium on Computers and Communications. pp. 699–703 (1997)</mixed-citation>
         </ref>
      </ref-list>
   </back>
</article>