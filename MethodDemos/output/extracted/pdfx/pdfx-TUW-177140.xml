<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>07a896cd9b65a62236ea725de931858ec1dabe688848b70fe0780d1d1f1ffdbd</job>
    <base_name>l33</base_name>
    <doi>http://dx.doi.org/10.1007/978-3-642-00675-3_16</doi>
    <warning>Name identification was not possible. </warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Testing Relativised Uniform Equivalence under Answer-Set Projection in the System cc ⊤ ⋆</article-title>
      </title-group>
      <region class="DoCO:TextChunk" id="4" confidence="possible">Johannes Oetsch 1 , Martina Seidl 2 , Hans Tompits 1 , and Stefan Woltran 1 1 Institut für Informationssysteme, Technische Universität Wien, Favoritenstraße 9-11, A-1040 Vienna, Austria { oetsch,tompits } @kr.tuwien.ac.at <email id="2">woltran@dbai.tuwien.ac.at</email> 2 Institut für Softwaretechnik, Technische Universität Wien, Favoritenstraße 9-11, A-1040 Vienna, Austria <email id="3">seidl@big.tuwien.ac.at</email></region>
      <abstract class="DoCO:Abstract" id="5">The system cc ⊤ is a tool for testing correspondence between propositional logic programs under the answer-set semantics with respect to different refined notions of program correspondence. The underlying methodology of cc ⊤ is to reduce a given correspondence problem to the satisfiability problem of quantified propositional logic and to employ extant solvers for the latter language as back-end inference engines. In a previous version of cc ⊤ , the system was designed to test correspondence between programs based on relativised strong equivalence under answer-set projection . Such a setting generalises the standard notion of strong equivalence by taking the alphabet of the context programs as well as the projection of the compared answer sets to a set of designated output atoms into account. This paper outlines a newly added component of cc ⊤ for testing similarly parameterised correspondence problems based on uniform equivalence .</abstract>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="6" page="1" column="1">1 Motivation and General Information</h1>
      </section>
      <region class="DoCO:TextChunk" id="14" page="1" column="1">An important issue in software development is to determine whether two encodings of a given problem are equivalent, i.e., whether they yield the same result on a given problem instance. Depending on the context of problem representations, different definitions of “equivalence” are useful and desirable. The system cc ⊤ [ <xref ref-type="bibr" rid="R1" id="7" class="deo:Reference">1</xref>] (short for “correspondence- checking tool”) is devised as a checker for a broad range of different such comparison relations defined between disjunctive logic programs (DLPs) under the answer-set semantics [<xref ref-type="bibr" rid="R2" id="8" class="deo:Reference">2</xref>]. In a previous version of cc ⊤ , the system was designed to test correspondence between logic programs based on relativised strong equivalence under answer- set projection . Such a setting generalises the standard notion of strong equivalence [<xref ref-type="bibr" rid="R3" id="9" class="deo:Reference">3</xref>] by taking the alphabet of the context programs as well as the projection of the compared answer sets to a set of designated output atoms into account [<xref ref-type="bibr" rid="R4" id="10" class="deo:Reference">4</xref>]. The latter feature ⋆ This work was partially supported by the Austrian Science Fund (FWF) under grant P18019. The second author was also supported by the Austrian Federal Ministry of Transport, Inno- vation, and Technology (BMVIT) and the Austrian Research Promotion Agency (FFG) under grant FIT-IT-810806.<marker type="page" number="2"/><marker type="block"/> reflects the common use of local (hidden) variables which may be used in submodules but which are ignored in the final computation. In this paper, we outline a newly added component of cc ⊤ for testing similarly parameterised correspondence problems but generalising uniform equivalence [<xref ref-type="bibr" rid="R5" id="12" class="deo:Reference">5</xref>]—that is, we deal with a component of cc ⊤ for testing relativised uniform equivalence under answer-set projection . This notion, recently introduced in previous work [<xref ref-type="bibr" rid="R6" id="13" class="deo:Reference">6</xref>], is less re- strained, along with a slightly lower complexity than its strong counterpart (provided that the polynomial hierarchy does not collapse). However, in general, it is still outside a feasible means to be computed by propositional answer-set solvers (again under the proviso that the polynomial hierarchy does not collapse). Yet, like relativised strong equivalence with projection, it can be efficiently reduced to the satisfiability problem of quantified propositional logic, an extension of classical propositional logic charac- terised by the condition that its sentences, generally referred to as quantified Boolean formulas (QBFs), are permitted to contain quantifications over atomic formulas. The architecture of cc ⊤ takes advantage of this and uses extant solvers for quantified propositional logic as back-end reasoning engines.</region>
      <section class="deo:Background">
        <h1 class="DoCO:SectionTitle" id="15" page="2" column="1">2 Background</h1>
        <region class="DoCO:TextChunk" id="16" confidence="possible" page="2" column="1">Propositional disjunctive logic programs (DLPs) are finite sets of rules of the form</region>
        <disp-formula class="DoCO:FormulaBox" id="F1">
          <label class="DoCO:Label" id="17">1</label>
          <content class="DoCO:Formula" id="18" page="2" column="1">a 1 ∨ · · · ∨ a l ← a l +1 , . . . , a m , not a m +1 , . . . , not a n ,</content>
        </disp-formula>
        <region class="DoCO:TextChunk" id="27" page="2" column="1">n ≥ m ≥ l ≥ 0 , where all a i are propositional atoms from some fixed universe U and not denotes default negation. An interpretation I is a model of a program P , denoted by I | = P , iff for every rule from P (as defined above), it holds that, whenever { a l +1 , . . . , a m } ⊆ I and { a m +1 , . . . , a n } ∩ I = ∅ , then { a 1 , . . . , a l } ∩ I = ∅ . Following Gelfond and Lifschitz [ <xref ref-type="bibr" rid="R2" id="19" class="deo:Reference">2</xref>], an interpretation I is an answer set of a program P iff it is a minimal model of the reduct P I , resulting from P by (i) deleting all rules containing default negated atoms not a such that a ∈ I , and (ii) deleting all default negated atoms in the remaining rules. The collection of all answer sets of a program P is denoted by AS ( P ) . In order to semantically compare programs, different notions of equivalence have been introduced in the context of the answer-set semantics. Two programs, P and Q , are strongly equivalent iff, for any program R , AS ( P ∪ R ) = AS ( Q ∪ R ) ; they are uni- formly equivalent iff, for any set F of facts, AS ( P ∪ F ) = AS ( Q ∪ F ) . While strong equivalence is relevant for program optimisation and modular programming in general [<xref ref-type="bibr" rid="R7" id="20" class="deo:Reference">7</xref>, <xref ref-type="bibr" rid="R8" hidden="1" id="21" class="deo:Reference">8</xref>, <xref ref-type="bibr" rid="R9" id="22" class="deo:Reference">9</xref>], uniform equivalence is useful in the context of hierarchically structured program components, where lower-layered components provide input for higher-layered ones. In abstracting from strong and uniform equivalence, Eiter et al. [<xref ref-type="bibr" rid="R4" id="23" class="deo:Reference">4</xref>] introduced the notion of a correspondence problem which allows to specify (i) a context , i.e., a class of programs used to be added to the programs under consideration, and (ii) the comparison relation that has to hold between the answer sets of the extended programs. Following Eiter et al. [<xref ref-type="bibr" rid="R4" id="24" class="deo:Reference">4</xref>], we focus here on correspondence problems where the comparison relation is a projection (to a given set of atoms) of the standard subset or set-equality<marker type="page" number="3"/><marker type="block"/> relation. The context, on the other hand, contains all programs which are sets of facts over some set A of atoms, identified with the power set 2 A over A . Thus, the concrete formal realisation of relativised uniform equivalence with projection is as follows [<xref ref-type="bibr" rid="R6" id="26" class="deo:Reference">6</xref>]: Consider a quadruple Π = ( P, Q, 2 A , ⊙ B ) , where P, Q are programs, A, B are sets of atoms, ⊙ ∈ {⊆ , = } , and S ⊙ B S ′ stands for { I ∩ B | I ∈ S} ⊙ { J ∩ B | J ∈ S ′ } . Π is called a propositional query equivalence problem (PQEP) if ⊙ B is given by = B , and a propositional query inclusion problem (PQIP) if ⊙ B is given by ⊆ B . We say that Π holds iff, for each F ∈ 2 A , AS ( P ∪ F ) ⊙ B AS ( Q ∪ F ) . Note that ( P, Q, 2 A , = B ) holds iff ( P, Q, 2 A , ⊆ B ) and ( Q, P, 2 A , ⊆ B ) jointly hold. We also refer to A as the context set and to B as the projection set . For illustration, consider the programs</region>
        <region class="DoCO:TextChunk" id="28" confidence="possible" page="3" column="1">P = { sad ∨ happy ← ; sappy ← sad , happy ; confused ← sappy } and Q = { sad ← not happy ; happy ← not sad ; confused ← sad , happy } ,</region>
        <region class="DoCO:TextChunk" id="29" page="3" column="1">which express some knowledge about the “moods” of a person, where P uses an aux- iliary atom sappy . The programs can be seen as queries over a propositional database which consists of facts from, e.g., { happy , sad } . For the output, it would be natural to consider the common intensional atom confused . We thus consider Π = ( P, Q, 2 A , = B ) as a suitable PQEP, specifying A = { happy , sad } and B = { confused } . It is a straightforward matter to check that Π , defined in this way, holds.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="30" page="3" column="1">3 System Specifics</h1>
        <region class="DoCO:TextChunk" id="36" page="3" column="1">As pointed out in Section 1, the overall approach of cc ⊤ is to reduce PQEPs and PQIPs to the satisfiability problem of quantified propositional logic and to use extant solvers [ <xref ref-type="bibr" rid="R10" id="31" class="deo:Reference">10</xref>] for the latter language as back-end inference engines for evaluating the resulting formulas. The reductions required for this approach are described by Oetsch et al. [<xref ref-type="bibr" rid="R6" id="32" class="deo:Reference">6</xref>] but cc ⊤ employs additional optimisations [<xref ref-type="bibr" rid="R11" id="33" class="deo:Reference">11</xref>]. The overall architecture of cc ⊤ is depicted in <xref ref-type="fig" rid="F1" id="34" class="deo:Reference">Fig. 1</xref>. The system takes as input two programs, P and Q , and two sets of atoms, A and B . Command-line options select between two kinds of reductions, a direct one or an optimised one, and whether the programs are compared as a PQIP or a PQEP. Detailed invocation syntax can be requested with option -h . Next, let us turn our attention to the concrete usage of cc ⊤ . The syntax of the programs is the basic DLV syntax. 3 In this syntax, the two programs P and Q from the above example look as follows:<marker type="block"/> P =   sad sappy v happy. :- sad, happy. Q =   happy sad :- :- not not happy. sad.  confused :- sappy.  confused :- sad, happy. Let us assume that the two programs are stored in the files P.dl and Q.dl . The two sets A and B from the example are written as comma separated lists within brackets:</region>
        <region class="unknown" id="38" page="3" column="1">3 See <ext-link ext-link-type="uri" href="http://www.dlvsystem.com/" id="37">http://www.dlvsystem.com/</ext-link> for details about DLV .</region>
        <region class="unknown" id="39" page="4" column="1">program P context set A program Q projection set B input files normal form normal form qst QBF QBF-solver non-normal form ccT QBF non-normal form QBF-solver</region>
        <region class="DoCO:FigureBox" id="F1">
          <caption class="deo:Caption" id="40" page="4" column="1">Fig. 1. Overall architecture of cc ⊤ .</caption>
        </region>
        <region class="DoCO:TextChunk" id="41" confidence="possible" page="4" column="1">context set A : (happy, sad) , projection set B : (confused) . We assume them to be stored in files A and B . The concrete invocation syntax for trans- lating the problem Π = ( P, Q, 2 A , = B ) into a corresponding QBF is ccT -u -e P.dl Q.dl A B</region>
        <region class="DoCO:TextChunk" id="43" page="4" column="1">where the command-line options ‘ -u ’ and ‘ -e ’ evince that we want to check for a notion of u niform e quivalence. To check for uniform inclusion, replace ‘ -e ’ by ‘ -i ’ or omit the parameter. The output will be written directly to the standard-output device from where it can serve as input for QBF-solvers. Since cc ⊤ does not output QBFs in a specific normal form, for using solvers requiring normal-form QBFs, the additional normaliser qst [<xref ref-type="bibr" rid="R12" id="42" class="deo:Reference">12</xref>] is employed. Finally, cc ⊤ is developed entirely in ANSI C; hence, it is highly portable. The parser for the input data was written using LEX and YACC. Further in- formation about cc ⊤ is available at</region>
        <region class="DoCO:TextChunk" id="45" confidence="possible" page="4" column="1"> <ext-link ext-link-type="uri" href="http://www.kr.tuwien.ac.at/research/ccT/" id="44">http://www.kr.tuwien.ac.at/research/ccT/</ext-link> .</region>
        <region class="DoCO:TextChunk" id="47" page="4" column="1">Experimental evaluations using different QBF-solvers are reported in a companion paper [<xref ref-type="bibr" rid="R11" id="46" class="deo:Reference">11</xref>].</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="48" page="4" column="1">4 cc on Stage</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="49" confidence="possible" page="4" column="1">⊤</h2>
          <region class="DoCO:TextChunk" id="52" page="4" column="1">In this section, we give a brief and, for space reasons, rather informal discussion on an application of cc ⊤ for verification and debugging needs in the context of a logic programming course at our university. This is not only to make the concept of correspondence checking within a refined framework more tangible but also to show a concrete application field. As a subtask in this course, the students have to model an air-conditioning system consisting of components for cooling and heating, as well as a valve and a switch element. More specifically, they are given a detailed description of the desired input/output behaviour of the components and the system as a whole, and <marker type="page" number="5"/><marker type="block"/> they have to develop logic programs that comply with that specification. Without go- ing into the details, such a specification could demand that the input of, e.g., a heating component consists of an airstream which can be 0 (air does not float) or 1 (air floats) and has an associated temperature (an integer from a certain range) as well as a control parameter (also an integer) to control the heating power. Analogously to the input airstream, a heater has an output airstream. Now, the specification determines the behaviour of the component with respect to the output airstream conditioned by the input airstream and the control parameter. A straightforward strategy to verify the student’s solution is the following: (i) write a sample solution that correctly implements the specification, (ii) define test cases, i.e., sets of facts representing the input for a component, and (iii) compare the output of our sample solution against the output of the student’s component. This method, used in previous years and implemented by a more or less simple script, is obviously sound but not complete with respect to detecting potential flaws. Here comes cc ⊤ into the play: this verification problem can be stated as a PQEP 4 , where the context set consist of the atoms that constitute the input and the projection set contains the atoms that represent the output of a component (thus allowing the students an unrestricted use of additional atoms in their programs). Hence, we have a sound and complete method for verification at hand. We employed this approach last winter semester for evaluating the submitted exercises and it compared favourably to the old method. Two things were necessary to obtain reasonable run-times for evaluating the QBFs, however: First, we had to restrict the context class, and second, we added additional con- straints to the programs to impose some restrictions on the input of the components, like specifying not more than one input value for an airstream temperature. The later point is also to make the test more fair. Albeit we loose completeness in the sense from above this way, we are able to verify thousands of test cases implicitly with the cc ⊤ -approach compared to only 10 to 20 test cases with the old script. Also, a direct comparison of the results between the two test approaches is very encouraging: all errors detected by the script were also detected by the cc ⊤ -approach, while 26 (out of 200 ) components were classified as correct by the script but as non-equivalent to our sample solution by cc ⊤ . It is worth mentioning that on these problem instances the solver qpro [<xref ref-type="bibr" rid="R13" id="51" class="deo:Reference">13</xref>] showed, with a median run-time of 2 . 54 seconds, excellent performance.</region>
        </section>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="53" page="5" column="1">5 Conclusion</h1>
        <region class="DoCO:TextChunk" id="57" page="5" column="1">In this paper, we presented the architecture and system specifics of a new component of the tool cc ⊤ for testing parameterised correspondence problems based on uniform equivalence for disjunctive logic programs under the answer-set semantics. The correspondence problems are efficiently compiled to quantified Boolean formulas for which many solvers have been implemented. As related work, we mention the system DLPEQ [ <xref ref-type="bibr" rid="R14" id="54" class="deo:Reference">14</xref>] for deciding ordinary equivalence, which is based on a reduction to logic programs, and the system SELP [<xref ref-type="bibr" rid="R15" id="55" class="deo:Reference">15</xref>] for checking strong equivalence, which is based 4 The programs under consideration are not propositional, i.e., they contain variables. Never- theless, the domain, i.e., the set of constants that can occur in the programs is finite and such programs can always be treated as a shorthand for the respective propositional programs.<marker type="page" number="6"/><marker type="block"/> on a reduction to classical logic quite in the spirit of our implementation approach. We successfully applied cc ⊤ for the verification of students’ programs obtained from a laboratory course about logic programming at our university. Future work includes extending our methods to non-ground answer set programs, which are important in practical applications.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="58" page="6" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="59" page="6" column="1">1. Oetsch, J., Seidl, M., Tompits, H., Woltran, S.: ccT: A Tool for Checking Advanced Corre- spondence Problems in Answer-Set Programming. In Proceedings of the 15th International Conference on Computing (CIC 2006), IEEE Computer Society Press (2006) 3–10</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="60" page="6" column="1">2. Gelfond, M., Lifschitz, V.: Classical Negation in Logic Programs and Disjunctive Databases. New Generation Computing 9 (1991) 365–385</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="61" page="6" column="1">3. Lifschitz, V., Pearce, D., Valverde, A.: Strongly Equivalent Logic Programs. ACM TOCL 2 (4) (2001) 526–541</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="62" page="6" column="1">4. Eiter, T., Tompits, H., Woltran, S.: On Solution Correspondences in Answer Set Programming. In Proceedings of the 19th International Joint Conference on Artificial Intelligence (IJCAI 2005). (2005) 97–102</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="63" page="6" column="1">5. Eiter, T., Fink, M.: Uniform Equivalence of Logic Programs under the Stable Model Semantics. In Proceedings of the 19th International Conference on Logic Programming (ICLP 2003). Volume 2916 of LNCS, Springer (2003) 224–238</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="64" page="6" column="1">6. Oetsch, J., Tompits, H., Woltran, S.: Facts do not Cease to Exist Because They are Ignored: Relativised Uniform Equivalence with Answer-Set Projection. In Proceedings of the 22nd National Conference on Artificial Intelligence (AAAI 2007), AAAI Press (2007) 458–464</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="65" page="6" column="1">7. Eiter, T., Fink, M., Tompits, H., Woltran, S.: Simplifying Logic Programs Under Uniform and Strong Equivalence. In Proceedings of the 7th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR-7). Volume 2923 of LNCS, Springer (2004) 87–99</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="66" page="6" column="1">8. Pearce, D.: Simplifying Logic Programs under Answer Set Semantics. In Proceedings of the 20th International Conference on Logic Programming (ICLP 2004). Volume 3132 of LNCS, Springer (2004) 210–224</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="67" page="6" column="1">9. Lin, F., Chen, Y.: Discovering Classes of Strongly Equivalent Logic Programs. In Proceedings of the 19th International Joint Conference on Artificial Intelligence (IJCAI 2005). (2005) 516–521</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="68" page="6" column="1">10. Le Berre, D., Narizzano, M., Simon, L., Tacchella, L.A.: The Second QBF Solvers Compar- ative Evaluation. In Proceedings of the 7th International Conference on Theory and Applica- tions of Satisfiability Testing (SAT 2004). Volume 3542 of LNCS, Springer (2005) 376–392</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="69" page="6" column="1">11. Oetsch, J., Seidl, M., Tompits, H., Woltran, S.: An Extension of the System cc ⊤ for Testing Relativised Uniform Equivalence under Answer-Set Projection (2007) Submitted draft.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="70" page="6" column="1">12. Zolda, M.: Comparing Different Prenexing Strategies for Quantified Boolean Formulas (2004) Master’s Thesis, Vienna University of Technology.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="71" page="6" column="1">13. Egly, U., Seidl, M., Woltran, S.: A Solver for QBFs in Nonprenex Form. In Proceedings of the 17th European Conference on Artificial Intelligence (ECAI 2006). (2006) 477–481</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="72" page="6" column="1">14. Oikarinen, E., Janhunen, T.: Verifying the Equivalence of Logic Programs in the Disjunctive Case. In Proceedings of the 7th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR-7). Volume 2923 of LNCS, Springer (2004) 180–193</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="73" page="6" column="1">15. Chen, Y., Lin, F., Li, L.: SELP - A System for Studying Strong Equivalence Between Logic Programs. In Proceedings of the 8th International Conference on Logic Programming and Non Monotonic Reasoning (LPNMR 2005). Volume 3552 of LNCS, Springer (2005) 442– 446</ref>
        </ref-list>
      </section>
    </body>
  </article>
</pdfx>
