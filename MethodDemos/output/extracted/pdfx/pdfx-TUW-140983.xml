<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>be49d4134d07cec74cc91b6418944f2e449ff2ebc3bd6c006cd53879d2e7e86d</job>
    <base_name>l2o</base_name>
    <doi>http://dx.doi.org/10.5220/0005403700140023</doi>
    <warning>Name identification was not possible. </warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Add-A-Tag: Learning Adaptive User Profiles from Bookmark Collections</article-title>
      </title-group>
      <outsider class="DoCO:TextBox" type="outsider" id="3">Elke Michlmayr ♦ <email id="2">michlmayr@wit.tuwien.ac.at</email></outsider>
      <outsider class="DoCO:TextBox" type="outsider" id="5">Paul Shabajee ‡ <email id="4">paul.shabajee@hp.com</email></outsider>
      <outsider class="DoCO:TextBox" type="outsider" id="7">Steve Cayzer ‡ <email id="6">steve.cayzer@hp.com</email> ∗</outsider>
      <region class="unknown" id="8">♦ Women’s Postgraduate College for Internet Technologies (WIT) , Vienna University of Technology, Vienna, Austria ‡ HP Labs, Filton Road, Stoke Gifford, Bristol BS34 8QZ, United Kingdom</region>
      <abstract class="DoCO:Abstract" id="9">In this paper we construct adaptive user profiles from tagging data. We present and evaluate an algorithm for creating such profiles, characterizing its behavior through statistical analysis. Keywords tagging user profiles adaptivity</abstract>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="10" page="1" column="1">1. Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="12" page="1" column="1">Collaborative tagging systems, also called folksonomies or social bookmarking services, allow their users to manage bookmarks online and to annotate them with free-text keywords (tags) for improving re-discovery of information. The most well-known service, del.icio.us [<xref ref-type="bibr" rid="R4" id="11" class="deo:Reference">4</xref>], was started in 2003 and many other services have followed since. Since many users of a folksonomy stick with the same bookmark collection for years, these data contain very fine-grained information about a user’s changing interests over time. This paper describes how to utilize data from a social bookmarking service to create user profiles that can in turn be used for Information Filtering (IF). Unlike many other profile learning mechanisms, which usually rely on relevance feed- back from the user, our method does not require any addi- tional user input. Moreover, since tagging data is time-based, it allows us to create user profiles that dynamically adapt to drifts in users’ interests. The profile should represent the most important parts of a users’ behavior (that is, some com- pression, clustering or summarization needs to be performed). Both persistent long-term interests and transient short-term interests should co-exist in the profile.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="13" page="1" column="1">2. The Add-A-Tag algorithm</h1>
      </section>
      <region class="DoCO:TextChunk" id="17" page="1" column="1">We focus not only on which tags have been used, but rather on which tags have been used in combination. This can be achieved by relying on the co-occurrence technique. If two tags are used in combination ( co-occur ) by a certain user for annotating a certain bookmark, there is some kind of se- mantic relationship between them. The more often two tags ∗ This research has partly been funded by the Austrian Fed- eral Ministry for Education, Science, and Culture (bm:bwk), and the European Social Fund (ESF) under grant 31.963/46- VII/9/2002. <marker type="column" number="2"/><marker type="block"/> are used in combination, the more intense this relationship is. This is represented by a graph with labeled nodes and undirected weighted edges in which nodes correspond to tags and edges correspond to the relationship between tags. Each time a new tag is used, a new node for this tag is added to the graph. Each time a new combination of tags is used, a new edge with weight α between the corresponding nodes is created in the graph. If two tags co-occur again, the weight for the corresponding edge is increased by β . To include the age of the bookmarks in the user profile we extend the co-occurrence approach with the evaporation technique known from ant algorithms [<xref ref-type="bibr" rid="R2" id="16" class="deo:Reference">2</xref>]. Evaporation is a simple method to add time-based information to the weights of edges in a graph: Each time the profile graph is updated with tags from a newly added bookmark, the weights of each edge in the graph is decreased slightly by removing a small percentage of its current value. Consider a user u adding a bookmark item b tagged with tags t 1 , . . . , t n to his or her bookmark collection. The profile graph G u = ( V, E ) where V = v 1 , . . . , v n is the set of vertices (which correspond to tags) and E = e 1 , . . . , e n is the set of edges, is updated as follows. Firstly, the existing information in the graph is changed by applying the evaporation formula shown in Equation 1 to every edge e x ∈ E w e x ← w e x − ρ · w e x , (1) where ρ ∈ [0 , 1] is a constant and w e x is the weight of edge e x . Secondly, the n new tags from bookmark b : t 1 , . . . , t n are added to the graph. For every combination t i t j where i, j ∈ 1 , . . . , n and i &lt; j , the following procedure is executed: 1. For every tag t x ( x ∈ i, j ), add a corresponding vertex v x to graph G u , if v x does not exist. 2. If it does not yet exist, add an edge with weight α between vertex v i and vertex v j to graph G u , where constant α is a real number and α &gt; 0. 3. Otherwise, if an edge between vertex v i and vertex v j exists, increase its weight by β . Constant β is a real number and β &gt; 0. This is executed each time the user adds an bookmark item to the bookmark collection. It creates a profile graph. Ex- tracting the user profile from the profile graph is defined as follows.</region>
      <region class="unknown" id="15" page="1" column="1">ICWSM’2007 Boulder, Colorado, USA</region>
      <region class="DoCO:TextChunk" id="18" confidence="possible" page="1" column="2">1. Create a ordered set E s from E = e 1 , . . . , e n . E s contains all edges e x ( x ∈ 1 , . . . , n ) from graph G u ordered in decreasing order by their weights w e x .</region>
      <outsider class="DoCO:TextBox" type="header" id="19" page="2" column="1">1.5</outsider>
      <outsider class="DoCO:TextBox" type="header" id="20" page="2" column="1">1.25</outsider>
      <outsider class="DoCO:TextBox" type="header" id="21" page="2" column="1">No Evaporation Evaporation User Activity (log) No evaporation Evaporation User Activity</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="22" page="2" column="1">1</outsider>
      <outsider class="DoCO:TextBox" type="header" id="23" page="2" column="1">2. Create set E k by extracting the top k elements from set E s , where k is a natural number and k &gt; 0. 3. Create graph G u ′ which contains all edges from E k and all vertices v x from graph G u which are incident to one of the edges in E k . The size of the user profile G u ′ is determined by the value chosen for parameter k .</outsider>
      <outsider class="DoCO:TextBox" type="header" id="24" page="2" column="1">0.75</outsider>
      <outsider class="DoCO:TextBox" type="header" id="25" page="2" column="1">3. Evaluation of profile adaptivity</outsider>
      <region class="DoCO:TextChunk" id="28" page="2" column="1">The amount of change in the user profile depends on the profile creation mechanism, but also on the user’s activity pattern. We assess it by comparing the Add-A-Tag algorithm (1) with and (2) without using the evaporation feature. The user’s activity pattern serves as a reference value. We need a way for determining the change of a profile over time. If we compute the user profile of user u at time t 1 and again at time t 2 , we need to be able to measure the difference (distance) between these two user profiles. Since measuring graph distances is a only partly solved issue [<xref ref-type="bibr" rid="R1" id="26" class="deo:Reference">1</xref>], we map the graphs onto a simpler structure which only contains the information we need for the comparison. This structure is a set of edges in decreasing weight order. We define the metric dist ( S 1 , S 2 ) for the distance between two sets S 1 and S 2 based on the Kendall τ coefficient [<xref ref-type="bibr" rid="R3" id="27" class="deo:Reference">3</xref>] – a standard measure for comparing ordered sets that includes rank correlation – as shown in Equations 2a to 2c. The result values for dist ( S 1 , S 2 ) are in the range of 0 (if S 1 and S 2 are the same, that is, equally ranked) to 1 (if S 1 and S 2 are in reverse order).</region>
      <disp-formula class="DoCO:FormulaBox" id="F2a">
        <label class="DoCO:Label" id="29">2a</label>
        <content class="DoCO:Formula" id="30" page="2" column="1">2 ∗ τ ( S 1 , S 2 ) dist ( S 1 , S 2 ) = 1 − , where n ∗ ( n − 1)</content>
      </disp-formula>
      <disp-formula class="DoCO:FormulaBox" id="F2b">
        <label class="DoCO:Label" id="31">2b</label>
        <content class="DoCO:Formula" id="32" page="2" column="1">τ ( S 1 , S 2 ) = τ i,j ( S 1 , S 2 ) , and i,j ∈ P</content>
      </disp-formula>
      <disp-formula class="DoCO:FormulaBox" id="F2c">
        <label class="DoCO:Label" id="33">2c</label>
        <content class="DoCO:Formula" id="34" page="2" column="1">τ i,j ( S 1 , S 2 ) =   0 order in S 1 and S 2</content>
      </disp-formula>
      <region class="DoCO:TextChunk" id="39" page="2" column="1"> 1 otherwise In Equation 2a, variable n is the size of the sets. In Equation 2b, P is the set of pairs of distinct elements in S 1 and S 2. The Kendall τ is applicable only for sets which have the same members and – consequently – are of same size. For our setting, this means that those set members that are present in only one of the sets need to be added to the other one. We append the missing set members to the end of the set in order not to affect the ranking of the pairs. Now we compute the user profiles for a sample user’s bookmark collection. We incrementally create the profile graph by adding the bookmark items in their temporal order, and – each time after adding all bookmarks that were created by the user within the time span of one week – we extract the user profile from the profile graph. Using this procedure we retrieve a set of user profiles G u ′ = { G w u ′ x | x = { 1 , . . . , n }} for user u and each week w x . In the next step, we apply the metric dist to these data in order to assess the amount of change between the weekly snapshots of the profiles. The user profile G w up x +1 for week w x +1 is compared to the user profile G up w x for the previous week w x . <marker type="column" number="2"/><marker type="block"/> The result is shown in <xref ref-type="fig" rid="F1" id="38" class="deo:Reference">Figure 1</xref>. What the trend lines reveal is that both approaches exhibit a change pattern that is pro- portional to the user’s activity pattern, but the Add-A-Tag approach with evaporation (dashed curve) shows a consider- ably higher amount of change and fits better with the activity pattern (solid grey curve). If the evaporation feature is not used (solid black curve), the degree of change in the user profile decreases over time. This is particularly the case for the results in the time span between week 80 and week 100. Al- though the trend line for user activity shows that the user is adding new bookmarks to the collection, the most often used tag combinations are dominant and prevent newly arising tag combinations from being included in the profile.</region>
      <region class="unknown" id="36" page="2" column="2">0.5 0.25 0 0 20 40 60 80 100 weeks</region>
      <region class="DoCO:FigureBox" id="F1">
        <caption class="deo:Caption" id="37" page="2" column="2">Fig. 1: Adaptivity comparison for the co-occurrence ( α = 1 . 0 , β = 1 . 0 , ρ = 0 , k = 20 ) and the Add-A-Tag approach ( α = 1 . 0 , β = 1 . 0 , ρ = 0 . 01 , k = 20 )</caption>
      </region>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="40" page="2" column="2">4. Conclusion</h1>
        <region class="DoCO:TextChunk" id="41" page="2" column="2">In this paper we proposed the Add-A-Tag algorithm for learning adaptive user profiles from bookmark collections, which is based on a combination of (1) the co-occurrence technique for determining the relationships between tags and (2) an evaporation feature as known from ant algorithms for adapting the user profile to trends over time. We evaluated the algorithm by defining a metric appropriate for quantifying the amount of change over time. What we can show is that the user profiles created with Add-A-Tag are adaptive in the sense that they change according to changes in tag usage in a continuous stream of tagging data.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="42" page="2" column="2">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="43" page="2" column="2">[1] F. Buckley and F. Harary. Distance in graphs . Addison-Wesley, 1990.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="44" page="2" column="2">[2] M. Dorigo and G. D. Caro. New Ideas in Optimization , chapter The Ant Colony Optimization Meta-Heuristic, pages 11–32. McGraw-Hill, 1999.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="45" page="2" column="2">[3] R. Fagin, R. Kumar, and D. Sivakumar. Comparing Top k Lists. SIAM Journal on Discrete Mathematics , 17(1):134–160, October 2003.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="47" page="2" column="2">[4] Yahoo! Inc. Del.icio.us Social Bookmarking Service. <ext-link ext-link-type="uri" href="http://del.icio.us" id="46">http://del.icio.us</ext-link> .</ref>
        </ref-list>
      </section>
    </body>
  </article>
</pdfx>
