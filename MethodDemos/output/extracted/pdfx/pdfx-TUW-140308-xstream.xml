<Publication>
  <id>TUW-140308</id>
  <title>Algorithmic Thinking: The Key for Understanding Computer Science</title>
  <abstractText>We show that algorithmic thinking is a key ability in informatics that can be developed independently from learning programming. For this purpose we use problems that are not easy to solve but have an easily understandable problem definition. A proper visualization of these problems can help to understand the basic concepts connected with algorithms: correctness, termination, efficiency, determinism, parallelism, etc. The presented examples were used by the author in a pre-university course, they may also be used in secondary schools to help understanding some concepts of computer science.</abstractText>
  <keywords/>
  <authors/>
  <affiliations/>
  <sections>
    <Section>
      <title>1 Introduction</title>
      <type>deo:Introduction</type>
      <typeEnum>INTRODUCTION</typeEnum>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <title>2 What Is Algorithmic Thinking?</title>
      <type>DoCO:Section</type>
      <typeEnum>METHOD</typeEnum>
      <referenceIds>
        <string>3</string>
      </referenceIds>
      <referenceCitations/>
    </Section>
    <Section>
      <title>3 How to Teach Algorithmic Thinking?</title>
      <type>DoCO:Section</type>
      <typeEnum>METHOD</typeEnum>
      <referenceIds>
        <string>4</string>
        <string>1</string>
      </referenceIds>
      <referenceCitations/>
    </Section>
    <Section>
      <title>4 Example: Paths in Mazes</title>
      <type>DoCO:Section</type>
      <typeEnum>METHOD</typeEnum>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <title>5 Example: Parallel Sorting</title>
      <type>DoCO:Section</type>
      <typeEnum>METHOD</typeEnum>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <title>6 Summary</title>
      <type>DoCO:Section</type>
      <typeEnum>METHOD</typeEnum>
      <referenceIds/>
      <referenceCitations/>
    </Section>
  </sections>
  <citationContexts/>
  <references>
    <Reference>
      <id>ref77</id>
      <referenceIdString>77</referenceIdString>
      <authors/>
      <referenceText>1. Propädeutikum in Informatik (prolog), Lessons held at Vienna University of Technology: www.informatik.tuwien.ac.at/prolog</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref78</id>
      <referenceIdString>78</referenceIdString>
      <authors/>
      <referenceText>2. Loidl, S., Mühlbacher, J, Schauer, H.: Preparatory Knowledge: Propaedeutic in Informatics. In Mittermeir, R.T. (ed.): From Computer Literacy to Informatics Fundamentals. Lecture Notes in Computer Science, Vol. 3422. Springer-Verlag, Berlin Heidelberg New York (2005) 104-115</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref80</id>
      <referenceIdString>80</referenceIdString>
      <authors/>
      <referenceText></referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref81</id>
      <referenceIdString>81</referenceIdString>
      <authors/>
      <referenceText>4. Mudner, T., Shakshuki, E.: A new Approach to Learning Algorithms. In Proceedings of International Conference on Information Technology: Coding and Computing. (2004) 141-145</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
  </references>
</Publication>