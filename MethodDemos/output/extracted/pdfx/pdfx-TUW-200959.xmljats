<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  SYSTEM "http://dtd.nlm.nih.gov/archiving/3.0/archivearticle3.dtd">
<article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:xlink="http://www.w3.org/1999/xlink">
   <front>
      <journal-meta>
         <journal-id/>
         <journal-title-group>
            <journal-title/>
         </journal-title-group>
         <issn/>
         <publisher>
            <publisher-name/>
         </publisher>
      </journal-meta>
      <article-meta>
         <title-group>
            <article-title>D IGRAPH D M ONOTONICITY</article-title>
         </title-group>
         <supplement>
            <p>ECOMPOSITIONS AND IN D IGRAPH S EARCHING</p>
            <p>Stephan Kreutzer and Sebastian Ordyniak , Oxford University Computing Laboratory, University of Oxford { kreutzer,ordyniak } @comlab.ox.ac.uk February 15, 2008</p>
         </supplement>
         <abstract>
            <sec>
               <p>We consider monotonicity problems for graph searching games. Variants of these games – defined by the type of moves allowed for the players – have been found to be closely connected to graph decompositions and associated width measures such as path- or tree-width. Of particular interest is the question whether these games are monotone, i.e. whether the cops can catch a robber without ever allowing the robber to reach positions that have been cleared before. The monotonicity problem for graph searching games has intensely been studied in the literature, but for two types of games the problem was left unresolved. These are the games on digraphs where the robber is invisible and lazy or visible and fast. In this paper, we solve the problems by giving examples showing that both types of games are non-monotone. Graph searching games on digraphs are closely related to recent proposals for digraph decompositions generalising tree-width to directed graphs. These proposals have partly been motivated by attempts to develop a structure theory for digraphs similar to the graph minor theory developed by Robertson and Seymour for undirected graphs, and partly by the immense number of algorithmic results using tree-width of undirected graphs and the hope that part of this success might be reproducible on digraphs using a “directed tree-width”. For problems such as disjoint paths and Hamiltonicity, it has indeed been shown that they are tractable on graphs of small directed tree-width. However, the number of such examples is still small. We therefore explore the limits of the algorithmic applicability of digraph decompositions. In particular, we show that various natural candidates for problems that might benefit from digraphs having small “directed tree-width” remain NP-complete even on almost acyclic graphs.</p>
            </sec>
         </abstract>
      </article-meta>
   </front>
   <body>
      <sec>
         <title>1 Introduction</title>
         <p>The seminal work of Robertson and Seymour in their graph minor project has focused much attention on graph decompositions and associated measures of graph connectivity such as tree- or path- width. Aside from the interest in graph structure theory, these notions have also proved fruitful in the devel- opment of algorithms. The tree-width of a graph is a measure of how tree-like the graph is and small tree-width allows for graph decompositions along which recursive algorithms can work. Many problems that are intractable in general can be solved efficiently on graphs of bounded tree-width. These include such classical NP-complete problems as finding a Hamiltonian-cycle in a graph or detecting if a graph is three-colourable. See [ <xref id="XR6" ref-type="bibr" rid="R9">9</xref>, <xref id="XR7" ref-type="bibr" rid="R8">8</xref>] and references therein for an introduction to tree-width. Closely related to the theory of graph decompositions is the theory of graph searching games. In a graph searching game a number of searchers, or cops, tries to catch a fugitive, or robber, hiding in the graph. There are many variants of these games. The robber can hide on edges or vertices, he can be fast or lazy, he can be visible or not, the game can be played on undirected or directed graphs, and many more. Graph searching games are particularly interesting in relation to graph decompositions, as many width measures for graphs based on decompositions can also be described in terms of variants of Cops and Robber games. For instance, in 1993, Seymour and Thomas [<xref id="XR8" ref-type="bibr" rid="R12">12</xref>] showed that the treewidth of a graph equals the minimal number of cops required to catch a visible and fast robber (minus one). Dendris, Kirousis, and Thilikos [<xref id="XR9" ref-type="bibr" rid="R10">10</xref>] gave an analogous characterisation in terms of an invisible, lazy robber game. Other variants of Cops and Robber games have also been used to characterise the path-width of graphs and similar connectivity measures. An important concept in the theory of graph searching games is monotonicity. A game is monotone , if whenever k cops can catch a robber on a graph they can do so without allowing the robber to re-occupy vertices. In general, restricting the cops to monotone strategies may require additional cops to catch a robber. LaPaugh [<xref id="XR10" ref-type="bibr" rid="R20">20</xref>] gave a first proof of monotonicity for a Cops and Robber game. Since then, monotonicity has been intensely studied and a large number of monotonicity results have been established. See e.g. [<xref id="XR11" ref-type="bibr" rid="R20">20</xref>, <xref id="XR12" ref-type="bibr" rid="R7">7</xref>, <xref id="XR13" ref-type="bibr" rid="R10">10</xref>, <xref id="XR14" ref-type="bibr" rid="R4">4</xref>, <xref id="XR15" ref-type="bibr" rid="R13">13</xref>, <xref id="XR16" ref-type="bibr" rid="R14">14</xref>, <xref id="XR17" ref-type="bibr" rid="R21">21</xref>, <xref id="XR18" ref-type="bibr" rid="R27">27</xref>] or the survey [<xref id="XR19" ref-type="bibr" rid="R2">2</xref>] and references therein. Despite the considerable interest and the large number of results in this field, two cases have so far resisted any attempts to solve the monotonicity problem – the Cops and Robber game with a visible, fast robber and the game with an invisible, lazy robber, both played on digraphs. In this paper,we solve the problems by showing that both games are non-monotone. Digraph decompositions. In recent years, attempts have been made to generalise the notion of tree-decompositions and their algorithmic applications to directed graphs. Clearly, we can define the tree-width of a directed graph as the tree-width of the undirected graph we get by forgetting the direction of edges, a process which leads to some loss of information. This loss may be significant, if the algorithmic problems we are interested in are inherently directed. A good example is the problem of detecting Hamiltonian cycles. While we know that this can be solved easily on graphs with small tree-width, there are directed graphs with very simple connectivity structure which have large treewidth. Therefore, several proposals have been made to extend the notions of tree-decompositions and tree-width to directed graphs (see [<xref id="XR20" ref-type="bibr" rid="R24">24</xref>, <xref id="XR21" ref-type="bibr" rid="R17">17</xref>, <xref id="XR22" ref-type="bibr" rid="R4">4</xref>, <xref id="XR23" ref-type="bibr" rid="R6">6</xref>, <xref id="XR24" ref-type="bibr" rid="R25">25</xref>, <xref id="XR25" ref-type="bibr" rid="R16">16</xref>]). In particular, Reed [<xref id="XR26" ref-type="bibr" rid="R24">24</xref>] and Johnson, Robertson, Seymour, and Thomas [<xref id="XR27" ref-type="bibr" rid="R17">17</xref>] introduce the notion of directed tree-width and they show that Hamiltonicity can be solved for graphs of bounded directed tree-width in polynomial time. Following this initial paper, several alternative definitions of directed graph decompositions have been proposed, with the aim of overcoming some shortcomings of the original definition. Obdr zàlek [<xref id="XR28" ref-type="bibr" rid="R23">23</xref>] and Berwanger, Dawar, Hunter, and Kreutzer [<xref id="XR29" ref-type="bibr" rid="R5">5</xref>] introduce the notion of DAG-width and Hunter and Kreutzer [<xref id="XR30" ref-type="bibr" rid="R16">16</xref>] introduce the notion of Kelly-width. All three proposals are supported by algorithmic applications and various equivalent characterisations in terms of obstructions, elimination orderings, and, in particular, variants of Cops and Robber games on directed graphs. However, so far the algorithmic applications are restricted to few classes of problems, in particular the problem of finding disjoint paths, Hamiltonian-cycles, and similar linkage problems and certain problems in relation to combinatorial games (parity games) played on graphs that are motivated by the theory of computer-aided verification. Whereas the tree-width of undirected graphs has been employed to solve a huge number of problems on graphs of small tree-width, the algorithmic theory of directed graph decompositions is not nearly as rich. It is an obvious question whether this is due to the fact that digraph decompositions are a rela- tively new field of research, where the fundamental machinery first needs to be developed, or whether this is due to a general limitation of this approach to algorithms on digraphs. In this paper we sys- tematically explore the range of algorithmic applicability of digraph decompositions. For this, we look at typical NP-complete problems on graphs – as they can be found in [<xref id="XR33" ref-type="bibr" rid="R15">15</xref>] for instance – and identify those that are “suitable”for this approach, where by “suitable” we mean that the problems should be NP-complete in general but be tractable on acyclic graphs. The reason for the latter is that all digraph decompositions proposed so far measure in some way the similarity of a graph to being acyclic. In particular, acyclic graphs have small width in all of these measures. Hence, if a problem is already hard on acyclic digraphs, there is no point in studying the effect of digraph decompositions on this problem. We then identify representatives for the various types of “suitable” problems and ask whether they can be solved in polynomial time on graphs of small directed tree-width, Kelly- or DAG-width, or directed path-width. The results we present in Section 4 show that the border for algorithmic applicability of digraph decompositions is rather tight. Essentially, as far as classical graph theoretical problems are con- cerned, disjoint paths and Hamiltonian-cycles can be detected efficiently on graphs of small directed tree-width, but all other problems we considered such as Minimum Equivalent Subgraph, Feedback Vertex Set (FVS), Feedback Arc Set, Graph Grundy Numbering, and several others are NP-complete even on graphs with a very low global connectivity and thus very low directed path or tree-width. Organisation. The paper is organised as follows. In Section 2 we briefly recall basic notions from graph and game theory needed in the sequel. In Section 3 we give a formal description of Cops and Robber games and present the first main result of this paper, the non-monotonicity of the two types of games mentioned above. In Section 4 we explore the algorithmic boundaries of the digraph decompositions obtained so far by showing NP-completeness for a number of problems on digraphs with bounded “width”. We conclude and state some open problems in Section 5.</p>
      </sec>
      <sec>
         <title>2 Preliminaries</title>
         <p>We use standard notation from graph theory as can be found in, e.g., [<xref id="XR36" ref-type="bibr" rid="R11">11</xref>]. All graphs and directed graphs in this work are finite and simple. Let G be a (directed) graph. We denote the vertexset of G by V ( G ) and the edgeset of G by E ( G ) . For X ⊆ V ( G ) we denote by G [ X ] the subgraph of G induced by X and by G \ X the subgraph of G induced by V ( G ) \ X . Similarly for Y ⊆ E ( G ) we set G \ Y to be the subgraph of G after deleting all edges in Y . A path in G from a vertex v 1 to a vertex v n is a subgraph of G with vertices v 1 , · · · , v n and edges {{ v i , v i +1 } | 1 ≤ i &lt; n } if G is undirected, respectively { ( v i , v i +1 ) | 1 ≤ i &lt; n } if G is directed. For convenience we write v → u in G if G contains a path from v to u . A cycle in G is a path from v 1 to v n together with an edge { v n , v 1 } if G is undirected, and ( v n , v 1 ) if G is directed. We say X ⊆ V ( G ) is connected, if for all pairs x, y ∈ X there is a path from x to y in G [ X ] . A component in G is a maximal connected vertexset in G . Finally, for a set X and k ∈ N , we denote by [ X ] ≤ k the set of all subsets of X of cardinality ≤ k .</p>
      </sec>
      <sec>
         <title>3 Cops and robber games</title>
         <p>Cops and Robber games are played by two players, that alternately place tokens on the vertices of a graph. Whereas the robber player has only one token and is merely able to move his token in a restricted way (depending on the variant of the game), the cop player can use an arbitrary amount of tokens and is free to move them anywhere on the graph. As the name suggests the objective of the cop player is to capture the token of the robber, i.e. to force the robber into a position where he is not able to move any more. Depending on the variant of the game – the variants differ in the abilities of both players – the minimum number of tokens needed by the cop to capture the robber defines a graph invariant. More formally, let D be a graph – either directed or undirected. A position in the game is a pair ( X, r ) , with X ⊆ V ( D ) and r ∈ V ( D ) , and a play is a sequence of positions (( X 1 , r 1 ) , · · · , ( X n , r n )) , such that X 1 = ∅ and a move from one position to another is only allowed if the robber player is allowed to move from r i to r i +1 with respect to D \ ( X i ∩ X i +1 ) , X i +1 , and the variant of the game. For a play (( X 1 , r 1 ) , · · · , ( X n , r n )) we define the robber-space as a sequence of vertexsets ( R 1 , · · · , R n ) , with R 1 = V ( D ) and R i = { r | the robber can move from r i − 1 to r } , for i &gt; 1 . The cop player wins, if there is a position satisfying r i ∈ X i , otherwise the robber player wins. We are mainly interested in the type of strategies the players can employ. One can easily verify that strategies in these games only depend on the current position of the game, i.e. are deterministic and positional. Hence, strategies are functions assigning a new position for a player depending on the current position in the game. A strategy is winning for a player, if he wins all plays consistent with it, i.e. where all transitions from one position to another are consistent with it. Let D be a digraph, and f a strategy for the cop. We define the cop-width of f , in terms cw ( f ) , to be cw ( f ) = max {| f ( X, r ) | | X ⊆ V ( D ) , r ∈ V ( D ) } , and the cop-width of D to be cw ( D ) = min { cw ( f ) | f is winning on D } . So the cop-width of a graph defines the graph invariant that we are interested in. Before explaining the different variants of the game we introduce the concept of monotonicity. We say a play (( X 1 , r 1 ) , · · · , ( X n , r n )) is cop-monotone, if the cop player never reoccupies a previously vacated vertex, i.e. there are no indices 1 ≤ i &lt; j ≤ n , such that ( X i \ X i +1 ) ∩ ( X j \ X j − 1 ) = ∅ . We say a play is robber-monotone, if the corresponding robber-space never increases. A play is monotone, if it is both robber- and cop-monotone. The notion of monotonicity directly applies to cop-strategies, so we say that a cop-strategy is robber-monotone, cop-monotone or just monotone, if all plays consistent with this strategy are. We denote by mon-cw ( D ) = min { cw ( f ) | f is monotone and winning on D } and say that a game is monotone if mon-cw ( D ) = cw ( D ) for all graphs D , and non-monotone otherwise. We are now ready to introduce the variants of the game. On undirected graphs a move from ( X, r ) to ( X ′ , r ′ ) is legal, if there exists a path from r to r ′ in D \ ( X ∩ X ′ ) , i.e. the robber is allowed to move along cop free paths. The variant of the game that places no other restriction on the robber is called dynamic as the robber is allowed to move in every move of the game, except when he is captured. Contrary to that is the so called inert variant, where the robber is only able to move when the cop player is going to occupy his current position, i.e. a move from ( X, r ) to ( X ′ , r ′ ) is legal if r ∈ X ′ . Furthermore there is also a variant of the game where the cops are unable to see the robber, which is called invisible . The normal version, i.e. where the cops can see the robber is called visible . Combining these, one obtains four variants of the game, of which only three are considered in literature, namely: visible and dynamic (vis), invisible and dynamic (invis), and invisible and inert (inert). On undirected graphs all these variants are monotone and satisfy: 1. vis-cw ( D ) = inert-cw ( D ) = tw ( D ) + 1 , for every graph D , where tw ( D ) denotes the treewidth of D ( see [<xref id="XR40" ref-type="bibr" rid="R12">12</xref>] and [<xref id="XR41" ref-type="bibr" rid="R10">10</xref>] ).</p>
         <p>2. invis-cw ( D ) = pw ( D ) + 1 , for every graph D , where pw ( D ) denotes the path-width of D ( see [<xref id="XR44" ref-type="bibr" rid="R7">7</xref>] ).</p>
         <p>Depending on how one translates the notion of an undirected path to the directed setting, i.e. whether one regards it as one directed path from source to destination or as two directed paths ,one in each direction, there are two natural variants of this game on directed graphs. We refer to the first variant, i.e. where the robber is allowed to move along (cop-free) directed paths, as reachability variant (reach), and to the second one, i.e. where the robber is only allowed to move when there exist a path in each direction, as strong connected component (scc) variant, since in this case the robber is only allowed to move in strongly connected components. Combining these two main versions of the game with the variants discussed for the undirected setting one retrieves a number of interesting games on directed graphs of which the following have been discussed in literature so far: strong connected component, visible and dynamic (scc-vis); reachability, visible and dynamic (reach-vis); reachability, invisible and dynamic (reach-invis); and reachability, invisible and inert (reach-inert). We briefly relate these games to the corresponding digraph decompositions and recall what is known about monotonicity.</p>
         <p>scc, visible, and dynamic: This variant is closely related to directed tree-width as it is known that scc-vis-cw ( D ) − 1 ≤ dtw ( D ) ≤ 3 · scc-vis-cw ( D ) + 5 , for every digraph D with directed treewidth dtw ( D ) (see [<xref id="XR47" ref-type="bibr" rid="R18">18</xref>]). It has been shown to be neither robber- nor cop-monotone [<xref id="XR48" ref-type="bibr" rid="R1">1</xref>, <xref id="XR49" ref-type="bibr" rid="R17">17</xref>]. However, although not explicitly stated, [<xref id="XR50" ref-type="bibr" rid="R17">17</xref>] gives an upper bound for the monotonicity costs with respect to robber-monotonicity. It remains an interesting open question whether this holds for the cop-monotone variant as well. reachability, invisible and dynamic: This variant defines directed path-width and has been shown to be monotone in [<xref id="XR51" ref-type="bibr" rid="R4">4</xref>]. reachability, visible and dynamic: The monotone version of this variant defines DAG-width [<xref id="XR52" ref-type="bibr" rid="R5">5</xref>]. We therefore refer to these games as DAG-games . reachability, invisible and inert: The monotone version of this variant defines Kelly-width [<xref id="XR53" ref-type="bibr" rid="R16">16</xref>]. We therefore refer to these games as Kelly-games .</p>
         <p>We are now ready to state our main results of this section, proving that DAG- and Kelly-Games are non-monotone.</p>
         <sec>
            <title>3.1 Non-Monotonicity of DAG-Games</title>
            <p>Theorem 3.1. For every p ≥ 2 there exists a digraph D p with mon-dag-cw ( D p ) = 4 p − 2 and dag-cw ( D p ) = 3 p − 1 .</p>
            <p>Proof. A schematic overview of D p is given in Figure 1 . The graph consists of three main parts with 2 p − 1 vertices each. C 0 and C 2 are cliques on 2 p − 1 vertices, C 1 2 is a clique on p − 1 vertices and C 1 1 forms an independent set having p vertices. A directed edge between two parts A and B means that there are edges from every vertex in A to every vertex in B . Undirected edges mean that there are edges between A and B in both direction. It is easy to see that dag-cw ( D p ) ≥ 3 p − 1 since the vertices in C 0 ∪ C 1 2 together with a vertex of C 1 1 form a clique of size 3 p − 1 . To show that dag-cw ( D p ) ≤ 3 p − 1 consider the following strategy for 3 p − 1 cops on D p . In the first move the cops occupy C 0 ∪ C 1 1 . If the robber plays to C 2 the cops capture him by playing on C 1 1 ∪ C 2 . Otherwise, if the robber plays to C 1 2 the cops move to C 0 ∪ C 1 2 .  Now the robber has to be on a vertex v ∈ C 1 1 . Since the vertices in C 1 1 form an independent set the robber is now captured by playing to { v } ∪ C 1 2 ∪ C 0 . It remains to show that mon-dag-cw ( D p ) = 4 p − 2 . It is easy to see that 4 p − 2 cops can capture the robber on D p by playing C 0 ∪ C 2 and then C 0 ∪ C 1 . To show that mon-dag-cw ( D p ) ≥ 4 p − 2 we give a strategy for the robber against 4 p − 3 cops playing monotonously on D p . First the robber stays in C 0 until the cops occupy all vertices of C 0 . There are two cases to consider.</p>
            <p>C 2 1 C 2 C 0 C 1 1</p>
            <fig id="F1">
               <caption>
                  <p>Figure 1: The graph D p with dag-cw ( D p ) = mon-dag-cw ( D p ) .</p>
               </caption>
               <graphic xlink:href=""/>
            </fig>
            <p>1. The cops occupy ( at least ) C 0 ∪ C 1 1 . In this case there is a vertex v ∈ C 1 2 which is not occupied by a cop and which the robber can reach from his current position in C 0 . Since every v ∈ C 1 2 has an edge to every other vertex in C 0 ∪ C 1 the cop cannot capture the robber monotonously with less than 4 p − 2 cops. 2. The cops occupy ( at least ) C 0 and there is at least one vertex in C 1 1 which is not occupied by a cop. Then there exists a vertex v ∈ C 2 which is not occupied by a cop and which the robber can reach from his current position in C 0 . Since from every vertex in C 2 there is a path to every other vertex in the graph (as long as there is at least one vertex in C 1 1 not occupied by a cop) the robber can stay in C 2 until the cops occupy all vertices in C 1 1 . And if they do the robber can move to a vertex in C 1 2 and play as in the first case.</p>
         </sec>
         <sec>
            <title>3.2 Non-Monotonicity of Kelly-Games</title>
            <p>We now consider Kelly-games. Recall that in a Kelly-game, the robber is invisible. Hence, a strategy for the cop must be independent of the current position of the robber. We can therefor represent a cop-strategy in a digraph D by a sequence ( v 1 , . . . , v | D | ) of vertices in the order in which they are visited by the cops. Theorem 3.2. For every p ≥ 2 there exists a digraph D p with mon-kelly-cw ( D p ) = 7 p and kelly-cw ( D p ) = 6 p . Proof. A schematic overview of D p is given in Figure 2 . The graph consists of five cliques with | C 0 | = p , | C 2 | = | C 1 | = | X 1 | = 2 p , | X 2 | = 3 p . An edge between two parts A and B means that there are edges from every vertex in A to every vertex in B , where again an undirected edge between A and B means that there are edges in D p in both directions.  The following strategies for the cop show that mon-kelly-cw ( D p ) ≤ 7 p and kelly-cw ( D p ) ≤ 6 p . For the monotone game we use the strategy ( X ∪ C 0 , X 2 ∪ C 0 ∪ C 1 , X 1 ∪ C ) , i.e. the cops first occupy all of X and C 0 , then proceed to X 2 ∪ C 0 ∪ C 1 , and finally move to X 1 ∪ C . For the non-monotone case we use ( X ∪ C 0 , X 2 ∪ C 0 ∪ C 1 , X 1 ∪ C 1 , X 1 ∪ C 1 ∪ C 2 , X, X ∪ C 0 ) . To see that kelly-cw ( D p ) ≥ 6 p note that C 0 ∪ X is a clique of size 6 p . It remains to show that mon-kelly-cw ( D p ) ≥ 7 p . Suppose mon-kelly-cw ( D p ) &lt; 7 p and let S = ( v 1 , · · · , v | V ( D p ) | ) be a cop-strategy witnessing this. For each part Y ∈ { C 0 , C 1 , C 2 , X 1 , X 2 , C, X } of D p let I ( Y ) be the greatest index of a vertex in Y , i.e. v I ( Y ) is the last vertex of Y which is searched by S . Then the following statements hold:</p>
            <p>C 2 C 1 C 0 X 1 X 2 C X</p>
            <fig id="F2">
               <caption>
                  <p>Figure 2: The graph D p with kelly-cw ( D p ) = mon-kelly-cw ( D p ) .</p>
               </caption>
               <graphic xlink:href=""/>
            </fig>
            <p>1. I ( X ) &lt; I ( C 1 ) and I ( X ) &lt; I ( C 2 ) . For the sake of contradiction, suppose I ( X ) &gt; I ( C 1 ) and let v = v I ( X ) . Hence, when the cops clear v , they have already cleared all vertices in X other than v and all vertices in C 1 . As v has edges to every other vertex in C 1 ∪ X , the cops need to occupy all of ( C 1 ∪ X ) \ { v } before they can place a token on v . But this requires 7 p cops. The case of I ( X ) &lt; I ( C 2 ) is analogous. 2. I ( C 0 ) &lt; I ( C 1 ) . Again, assume the contrary, i.e. I ( C 0 ) &gt; I ( C 1 ) . Hence, when clearing v I ( C 1 ) there is a free vertex v ∈ C 0 through which the robber can reach all of X . As I ( X ) &lt; I ( C 1 ) , the cops needs to occupy at least ( X ∪ C 1 ) \ { v I ( C 1 ) } before clearing v I ( C 1 ) , which yields the contradiction. 3. I ( C 1 ) &lt; I ( C 2 ) . With a similar reasoning as before we obtain that otherwise the cops have to occupy X ∪ C 2 when searching v I ( C 2 ) , using 7 p cops. The statements (1) - (3) imply I ( X ) &lt; I ( C 0 ) &lt; I ( C 1 ) &lt; I ( C 2 ) but now the cop needs to occupy | C 2 ∪ C 1 ∪ C 0 ∪ X 1 | = 7 p vertices in order to search v I ( C 2 ) . So S uses at least 7 p cops.</p>
         </sec>
      </sec>
      <sec>
         <title>4 Limits of Algorithmic Applications</title>
         <p>In [ <xref id="XR72" ref-type="bibr" rid="R17">17</xref>] it has been shown that the k -disjoint path problem and related problems are solvable in polynomial time on graphs of bounded directed tree-width. However, up to now only few other problems are known to be solvable with the help of digraph decompositions, a further example being parity games, which are tractable on graphs of bounded DAG- and Kelly-width [<xref id="XR73" ref-type="bibr" rid="R5">5</xref>, <xref id="XR74" ref-type="bibr" rid="R16">16</xref>]. As directed tree-width is the most general of these width-measures, tractability results for directed tree-width directly extend to all other measures. The converse is not true, for example it is not known whether parity games are tractable on graphs of bounded directed tree-width. In this section we explore the algorithmic boundaries of the digraph measures introduced so far. In our analysis we focus on NP-complete problems that are explicitly directed. All analysed problems are solvable in polynomial time on digraphs whose underlying undirected graph has bounded tree-width – but as mentioned in the introduction, tree-width is not a good measure for the global connectivity of a digraph. Furthermore, we discard problems that are not tractable on acyclic graphs, as all measures defined so far are bounded on acyclic graphs. As representatives for various types of the remaining problems, we have considered the following problems: Minimum Equivalent Subgraph, Directed Feedback Vertex / Arc Set, Graph Grundy Numbering, and Kernel. It turned out that all of these problems remain NP-complete even on digraphs that have very low global connectivity, i.e. digraphs that can be decomposed into strong components of constant size just by removing a small number of vertices. In particular, these graphs have low width with respect to all digraph decompositions defined so far, i.e. small directed path width, small DAG-, Kelly-, and directed tree-width, small Entanglement and D-width. For notational convenience, we state the proofs in terms of DAG-width, which as already stated in Section 3 is equal to the number of cops needed to catch the robber in the reachibility, monotone, visible and dynamic cops and robber game.</p>
         <sec>
            <title>4.1 Minimum Equivalent Subgraph</title>
            <p>The Minimum Equivalent Subgraph (MES) -problem is the problem to compute in a given digraph D an edge-minimal subgraph D ′ ⊆ D that preserves reachability in D . Definition 4.1. Let D be a digraph and k ∈ N . MES is the problem to decide, if there is a set E ′ ⊆ E ( D ) with | E ′ | ≤ k , such that the digraph D ′ = ( V ( D ) , E ′ ) contains a path between two vertices if, and only if, such a path exists in D , i.e. D and D ′ have the same transitive closure. MES is NP-complete for arbitrary digraphs (see [<xref id="XR79" ref-type="bibr" rid="R15">15</xref>]), but is known to be solvable in polynomial time for acyclic and undirected graphs. In [<xref id="XR80" ref-type="bibr" rid="R22">22</xref>] it is also shown that it suffices to consider MES on connected digraphs. There MES is equivalent to a generalisation of the directed hamilton cycle problem, the so-called round-trip-problem, in which vertices can be used more than ones. This is particularly interesting because the directed hamilton cycle problem is a special case of the k -linkage problem, which can be solved in polynomial time on digraphs of bounded DAG-width. Definition 4.2. Let D be a connected digraph. A round-trip R = ( v 1 , · · · , v k , v 1 ) is a sequence of k + 1 vertices of D , such that ( v i , v i +1 ) ∈ E ( D ) and R visits every vertex of D at least once. The size of R equals k + 1 . Lemma 4.3. [<xref id="XR81" ref-type="bibr" rid="R22">22</xref>] Let D be a connected digraph and k a natural number. Then D has a MES of size less than k if, and only if, D has a round-trip of size less than k. The NP-completeness of MES for digraphs of DAG-width less than four follows from a reduction of 3-SAT to the problem of finding a minimum round-trip in a connected digraph of DAG-width less than four as follows:</p>
            <p>Theorem 4.4. The MES-problem is NP-complete on directed graphs of DAG-width less than four. Proof. The proof reduces 3-SAT to round-trip. Let F be a 3-SAT-Formula with variables x 1 , · · · , x n and clauses C 1 , · · · , C m . From F we construct a digraph D satisfying:</p>
            <p> d   d     j a 1 a i   j d H 1   d ©     d d j d 1 b b i, i, 1 2 j % j ' ' r % rr  ̈  ̈ rr  ̈  ̈ rr  ̈  ̈ rr  ̈  ̈ E E r  ̈  ̈ r rr j j e e  ̈  ̈ ' ' i, i, rr  ̈  ̈ 1 2 rr  ̈  ̈ rr  ̈  ̈ r E E j  ̈  ̈ j j j c c i, i, 1 2 H c j j 2 d a 2 2 c e e c e c c b i, b 2 i, ∗ 2 k ∗ i k − i 1 r j j ' ' % d rr %  ̈ rr  ̈ d  ̈  ̈ d rr  ̈ rr  ̈  ̈ E E  ̈ r e  ̈ r i, e  ̈ r j 2 j i,  ̈ r ∗ 2 ' '  ̈ k rr ∗  ̈ i rr k −  ̈ i    ̈ 1  ̈ rr    ̈ r  ̈ E   E j  ̈ j  ̈ j j c i, c 2 i, ∗ 2 k ∗ i k − i 1 d H j c j n d a n n d ©   d d c d i j d j d a) b)</p>
            <fig id="F3">
               <caption>
                  <p>Figure 3: a) The graph H i for the reduction of 3-SAT to MES in Theorem 4.4. b) The connections between the graphs H 1 , · · · , H n and the vertex d .</p>
               </caption>
               <graphic xlink:href=""/>
            </fig>
            <p>b b b d e ©   d i − 1   c e d a i e C j 2 1 e C j 2 2 e c e e C j 1 3 E E e e e e e e © ' ' ' ' ' ' % rr r % % % rr r d rr %  ̈  ̈  ̈  ̈  ̈   rr rr d  ̈  ̈  ̈  ̈  ̈ E E E E E E r r r  ̈  ̈  ̈  ̈  ̈ e e e e e e ' ' ' ' ' ' © r r r r r  ̈    ̈  ̈  ̈  ̈ d r r r r r E E E E E E  ̈ j   j j j  ̈  ̈  ̈  ̈ j e e e e e e ' ¡ ! e C j 2 3 c e C j 1 2 c e C j 1 1 e e d i ¡ e ¡ e ¡ e c ¡ e e b b ¡ ¡ e b ¡ e ¡ e ¡ e ¡ e ¡ e d d ©   n ¡ e e ¡ ' ' e   e c ¡ ' ¡ c c d</p>
            <fig id="F4">
               <caption>
                  <p>Figure 4: An example for the reduction of 3-SAT to round-trip in Theorem 4.4. In this example x i is positive in C j 1 , C j 2 and negative in C j 3 .</p>
               </caption>
               <graphic xlink:href=""/>
            </fig>
            <p>⇐ =</p>
            <p>i,j</p>
            <p>(B) D is constructable in polynomial time, given F . (C) D has DAG-width less than four. We construct D as follows: • For each variable x i in F add the digraph H i , which is shown in <xref id="XR96" ref-type="fig" rid="F3">Figure 3</xref> a), to D . • Add a vertex d to D . • Connect d and the graphs H i as illustrated in <xref id="XR97" ref-type="fig" rid="F3">Figure 3</xref> b), i.e. add the edges ( d i , a i +1 ) , ( d n , d ) and ( d, a 1 ) to D . • For each clause C j add the vertices C j 1 and C j 2 together with the edges ( C j 1 , d ) and ( d, C j 2 ) to D . • For each occurrence of x i , respectively x i in a clause C j add the edges ( b i, 2 ∗ l − 1 , C j 1 ) and ( C j 2 , c i, 2 ∗ l ) , respectively ( c i, 2 ∗ l − 1 , C j 1 ) and ( C j 2 , b i, 2 ∗ l ) to D , where l is the smallest integer, such that neither b i, 2 ∗ l − 1 nor c i, 2 ∗ l − 1 have been used by a clause before. An example for D is shown in <xref id="XR98" ref-type="fig" rid="F4">Figure 4</xref>. It remains to show that D actually satisfies (A)-(C). (A) = ⇒ Let β be a satisfying assignment for F . We have to show that D contains a round-trip R of size | V ( D ) | + m . R uses the following edges: • ( d i , a i +1 ) , ( d n , d ) and ( d, a 1 ) . • For each H i , such that β ( x i ) = true , respectively β ( x i ) = false , R uses the edges ( a i , b i, 1 ) , ( b i, 1 , e i, 1 ) and ( e i, 1 , c i, 1 ) , respectively ( a i , c i, 1 ) , ( c i, 1 , e i, 1 ) and ( e i, 1 , b i, 1 ) . • If β ( x i ) = true , respectively β ( x i ) = false and c i,l , respectively b i,l has an edge to a clause C j , such that neither C j 1 nor C j 2 are already contained in R , use the edges ( c i,l , C j 1 ) , ( C j 1 , d ) , ( d, C j 2 ) and ( C j 2 , b i,l +1 ) , respectively ( b i,l , C j 1 ) , ( C j 1 , d ) , ( d, C j 2 ) and ( C j 2 , c i,l +1 ) . If not R uses the edge ( c i,l , b i,l +1 ) , respectively ( b i,l , c i,l +1 ) . It is easy to see that R is a round-trip for D , using every vertex except d at most once and every vertex in H 1 , · · · , H n exactly once. As β is a satisfying assignment for F every vertex C j 1 , C j 2 is used at least once and d is used exactly m + 1 -times. So R has size | V ( D ) | + m . Now suppose we are given a round-trip R on D of size | V ( D ) | + m . We have to show that there exist a satisfying assignment for F . We show this by a series of claims: a) In every round-trip d has exactly m + 1 predecessors. b) In every round-trip d has exactly m + 1 successors. c) All vertices in R except d have in- and out-degree one and d has in- and out-degree m + 1 . d) R contains exactly one of ( b i,j , e i,j ) and ( e i,j , b i,j ) . The same holds for ( c i,j , e i,j ) and ( e i,j , c i,j ) . e) R contains either ( b i,j , e i,j ) and ( e i,j , c i,j ) or ( c i,j , e i,j ) and ( e i,j , b i,j ) for every i and j . f) R contains either all edges ( b i,j , e i,j ) and ( e i,j , c i,j ) or all edges ( c i,j , e i,j ) and ( e i,j , b for every i .</p>
            <p>g) If R contains an edge ( b i,j 1 , C l 1 1 ) , than R does not contain an edge ( c i,j 2 , C l 1 2 ) , for every i . h) The assignment β , with β ( x i ) = true , if R contains edges of the form ( b i,j , C l 1 ) and β ( x i ) = false otherwise is a satisfying assignment for F . Proof of (a)-(h): a) This follows from the fact that d is the only successor of it’s m + 1 predecessors in D . b) This follows from the fact that d is the only predecessor of it’s m + 1 successors in D . c) This follows from (a) and (b) together with the fact that the size of R is | V ( D ) | + m . d) Suppose R contains concurrently ( b i,j , e i,j ) and ( e i,j , b i,j ) . Then it follows from (c) that b i,j and e i,j are isolated in R , a contradiction. e) This follows from (d) and the fact that b i,j and c i,j are the only neighbours of e i,j . f) We show this by induction on j . For j = 1 this follows from (e). W.l.o.g. we can assume that R contains ( b i,j , e i,j ) and ( e i,j , c i,j ) . We have to show that R also contains ( b i,j +1 , e i,j +1 ) and ( e i,j +1 , c i,j +1 ) . As ( e i,j , c i,j ) is contained in R , c i,j has either C l 1 or b i,j +1 as successor in R . We therefore distinguish two cases: (a) R contains ( c i,j , C l 1 ) . Then the only predecessors of c i,j +1 in D are b i,j and e i,j +1 . As b i,j already has a successor in R , R has to contain ( e i,j +1 , c i,j +1 ) . (b) R contains ( c i,j , b i,j +1 ) . In this case b i,j +1 cannot have another predecessor in R , thus R cannot contain ( e i,j +1 , b i,j +1 ) . g) Because of (f) for every i either all vertices b i,j are succeeded by e i,j or all vertices c i,j are succeeded by e i,j in R . So R contains either only edges of the form ( c i,j , C l 1 ) or only edges of the form ( b i,j , C l 1 ) . h) This follows from (g) and the fact that R has to contain all vertices of D , in particular C j l . (B) This follows from the construction of D . (C) The following defines a monotone winning strategy f for the cop-player on D using less than 4 cops: 1) f ( ∅ , r ) = { d, C 1 2 } 2) f ( { d, C i 2 } , r ) = { d, C i 2 +1 } where 1 ≤ i &lt; m . 3) f ( { d, C m 2 } , r ) = { d, a 1 } 4) f ( { d, a i } , r ) = { d, b i, 1 , e i, 1 } where 1 ≤ i ≤ n . 5) f ( { d, b i,j , e i,j } , r ) = { d, e i,j , c i,j } where 1 ≤ i ≤ n and 1 ≤ j ≤ 2 · k i . 6) f ( { d, e i,j , c i,j } , r ) = { d, a i,j +1 , e i,j +1 } where 1 ≤ i ≤ n and 1 ≤ j ≤ 2 · k i . 7) f ( { d, e i, 2 · k i , c i, 2 · k i } , r ) = { d, d i } where 1 ≤ i ≤ n . 8) f ( { d, d i } , r ) = { d, a i +1 } where 1 ≤ i &lt; n . 9) f ( { d, d n } , r ) = { d, C 1 1 } . 10) f ( { d, C i 1 } r ) = { d, C i 1 +1 } where 1 ≤ i &lt; m .</p>
         </sec>
         <sec>
            <title>4.2 Feedback Vertex Set / Feedback Arc Set</title>
            <p>The Feedback Vertex/Arc Set (FVS/FAS) -problem is the problem to find a minimum set of vertices (edges) in a digraph D , whose removal leaves D acyclic. Both problems are known to be NP- complete on arbitrary digraphs (see [<xref id="XR104" ref-type="bibr" rid="R19">19</xref>]). Trivially both problems become efficiently solvable on acyclic graphs. FVS is the only problem we present here that is NP-complete on undirected graphs as well. We prove the NP-completeness of FVS/FAS on digraphs of DAG-width four by reducing it to a special variant of 3-SAT namely 3-SAT-2, which we introduce now. Definition 4.5. 3-SAT-2 is the variant of 3-SAT, so that every literal is used in at most two clauses. 3-SAT-2 is NP-complete. Next we need a simple lemma that helps us with the actual reduction. Lemma 4.6. Let D be the complete bipartite graph with two vertices in each part. Then every FVS of D contains all vertices of one part. Furthermore the vertices of one part form a FVS. Proof. Suppose for a contradiction that V ′ is a FVS of D and a, b ∈ / V ′ are two vertices in V ′ not in the same part of D . Then ( a, b ) , ( b, a ) is a circle in D which is not covered by V ′ . Now suppose V ′ is a part of D . Then D − V ′ is an independent set and acyclic.</p>
            <p>We are now ready to prove the main theorem of this section. Theorem 4.7. FVS is NP-complete on graphs of DAG-width at most four. Proof. We reduce 3-SAT-2 to FVS on graphs of DAG-width at most 4. For every 3-SAT-2 formula F with variables x 1 , · · · , x n and clauses C 1 , · · · , C m we construct a graph D satisfying: (A) D has a FVS of size 2 n if, and only if F is satisfiable. (B) D is constructable in polynomial time given F . (C) D has DAG-width at most four. D is constructed by the following steps: • Add a vertex v to D . • For each variable x i add to D the complete bipartite graph H i with partitions { x 1 i , x i 2 } and { x 1 i , x 2 i } . • For each clause C j with literals l 1 , · · · , l k , which are ordered corresponding to the index of their variables, add a circle c 1 , · · · , c k , v, c 1 to D , such that : a) If l h equals x i , respectively x i , then c h is one of x i 1 , x i 2 , respectively x 1 i , x 2 i . b) The vertex used by l h is not used by any other clause. This is always possible as each literal is contained in at most two clauses. We now show that D satisfies (A)-(C).</p>
            <p>⇐ = Let V ′ be a FVS for D of size 2 n . Because of Lemma 4.6 V ′ contains either x 1 i , x i 2 or x 1 i , x i 2 for each 1 ≤ i ≤ n . As | V ′ | ≤ 2 n V ′ contains no other vertices. Now define β ( x i ) = true if x 1 i , x i 2 ∈ V ′ and β ( x i ) = false otherwise. As V ′ is a FVS and v ∈ / V ′ , V ′ contains at least one vertex of every clause. So β is a satisfying assignment for F . This follows easily from the construction. To show that D has DAG-width at most four, we give a monotone winning strategy for four cops on D : 1. f ( ∅ , r ) = { v, x 1 1 , x 2 1 , x 1 1 } 2. f ( { v, x i 1 , x 2 i , x i 1 } , r ) = { v, x i 1 , x 2 i , x 2 i } where 1 ≤ i ≤ n 3. f ( { v, x 1 i , x 2 i , x 2 i } , r ) = { v, x 1 i +1 , x i 2 +1 , x 1 i +1 } where 1 ≤ i &lt; n</p>
            <p>To show that FAS is NP-complete on digraphs of bounded DAG-width as well, we use a simple reduction to FVS, as follows:</p>
            <p>Definition 4.8. Let D be a digraph. Then K ( D ) is the digraph obtained from D after replacing every vertex v ∈ V ( D ) with two vertices v 1 , v 2 and an edge ( v 1 , v 2 ) and every edge ( v, w ) ∈ D with an edge ( v 2 , w 1 ) . In [<xref id="XR112" ref-type="bibr" rid="R3">3</xref>] it is shown that D has a FVS of size k if, and only if K ( D ) has a FAS of size k . Thus using Lemma 4.7, it only remains to show that the DAG-width of D equals the DAG-width of K ( D ) , for every digraph D . Lemma 4.9. Let k ≥ 2 and D be a digraph. Then the DAG-width of K ( D ) is at most the DAG-width of D .</p>
            <p>Proof. Let f be a monotone winning strategy for k cops on D and let r ∈ V ( D ) , X ⊆ V ( D ) . W.l.o.g. we can assume that f either places or removes one cop at a time. If f places a cop on a vertex v then f ′ copies this move by placing a cop on v 2 . If f removes a cop from a vertex v and the robber does not occupy v 1 , f ′ just removes a cop from v 2 . If the robber occupies v 1 , when f is to remove a cop from v then f ′ first removes all cops currently occupied except v 2 and after that, places a cop on v 1 . Now the robber is captured on v 2 . It is easy to see that f ′ is a monotone winning strategy for max { 2 , k } = k cops on K ( D ) .</p>
            <p>Combining the previous lemma with theorem 4.7 we get: Theorem 4.10. FAS is NP-complete on graphs of DAG-width at most four.</p>
         </sec>
         <sec>
            <title>4.3 Graph Grundy Numbering and Kernel</title>
            <p>Definition 4.11. Graph Grundy Numbering is the problem to decide for a digraph D if there exists a function f : V ( D ) → N , such that for all v ∈ V ( D ) , f ( v ) is the smallest natural number not contained in { f ( u ) : u ∈ V ( D ) , ( v, u ) ∈ E ( D ) } . Definition 4.12. Kernel is the problem to decide in a digraph D if there exists V ′ ⊆ V ( D ) , such that 1. there is no edge between two vertices in V ′ , i.e. V ′ is an independent set.</p>
            <p>x i x i h E h E h E h T T T h h h ' h c y i y i</p>
            <fig id="F5">
               <caption>
                  <p>Figure 5: The graph H i for a variable x i used in the proof of Theorem 4.13.</p>
               </caption>
               <graphic xlink:href=""/>
            </fig>
            <p>2. for every v ∈ V ( D ) \ V ′ there exists a u ∈ V ′ with ( v, u ) ∈ E ( D ) .</p>
            <p>Observe, that on undirected graphs the maximisation version of Kernel is the Independent Set problem, whereas the minimisation version of Graph Grundy Numbering equals Vertex-Colouring. On digraphs however even the existential versions of both problems are known to be NP-complete [<xref id="XR122" ref-type="bibr" rid="R26">26</xref>], but are trivially solvable on acyclic graphs. A simple example of a digraph that neither has a Graph Grundy Numbering nor a Kernel is the directed cycle with three vertices. We are now ready to prove the NP-completeness for Graph Grundy Numbering on digraphs of DAG-width two.</p>
            <p>0 1 0 1 1 0 1 0 h E h E h E h h E h E h E h T T T T T T h h h ' h c h h h ' h c 1 0 1 0 0 1 0 1</p>
            <fig id="F6">
               <caption>
                  <p>Figure 6: The two possible colourings for the graph in <xref id="XR125" ref-type="fig" rid="F5">Figure 5</xref>.</p>
               </caption>
               <graphic xlink:href=""/>
            </fig>
            <p>Theorem 4.13. Graph Grundy Numbering is NP-complete for digraphs of DAG-Width at most two.</p>
            <p>Proof. As the proof uses the reduction of 3-SAT to Graph Grundy Numbering given in [<xref id="XR128" ref-type="bibr" rid="R26">26</xref>], we only show that the graph used in [<xref id="XR129" ref-type="bibr" rid="R26">26</xref>] has DAG-width at most two. To do this we first take a look at what the graph looks like. Let F be a 3-SAT-Formula with variables x 1 , · · · , x n and clauses C 1 , · · · , C m , then the digraph D used in the reduction from 3-SAT to Graph Grundy Numbering is constructed as follows:</p>
            <p>• For each variable x i we add the graph H i , which is given in <xref id="XR131" ref-type="fig" rid="F5">Figure 5</xref>, to D . • For each clause C j we add the vertices A j , B j , C j and edges ( A j , B j ) , ( B j , C j ) , ( C j , A j ) to D . • For each occurrence of a variable x i , respectively x i in a clause C j we add to D the edges ( C j , y i ) , respectively ( C j , y i ) .</p>
            <p>We now show that D has DAG-width at most two. This is done by giving a description of a monotone winning strategy for two cops on D :</p>
            <p>1. The robber starts on a vertex of H i . In this case the robber cannot leave H i as there is no edge from a vertex in H i to a vertex in D \ H i . As H i can be made acyclic by removing one vertex, H i can be searched monotonously by two cops. 2. The robber starts on one of the vertices A j , B j , C j . As D [ { A j , B j , C j } ] is a circle and the robber is not able to reach a vertex A p , B p , C p for p = j the two cops can push the robber to a H i , where he can be captured as shown in case one. Theorem 4.14. Kernel is NP-complete for digraphs of DAG-width two.</p>
            <p>Proof. Since the prove uses the same graph as in theorem 4.13 and the reduction is given in [<xref id="XR136" ref-type="bibr" rid="R26">26</xref>] the result follows.</p>
         </sec>
      </sec>
      <sec>
         <title>5 Conclusion and Open Problems</title>
         <p>In this paper we considered graph searching games on directed graphs and established non-monotonicity for two important types of games. Our examples show that the monotonicity costs for these games can not be bound by an additive term, i.e. for any k there are digraphs where at least k additional cops are required to catch a robber with a monotone strategy. However, so far there is no upper bound for the monotonicity costs involved. It is conceivable that there is a constant c ∈ N such that whenever n cops suffice to catch a robber on a digraph D in any of the two variants, than c · n cops suffice for a monotone strategy. This, however, is left as an open problem. A different trait we explored in this paper are the limits of an algorithm theory based on directed graph decompositions. We showed that while there are interesting and important examples for natural problems that become tractable on digraphs of small width, many other natural problems remain NP- complete even if the digraphs have very low global connectivity.</p>
      </sec>
      <sec>
         <title>References</title>
      </sec>
   </body>
   <back>
      <ref-list>
         <ref id="R1">
            <mixed-citation>[1] I. Adler. Directed tree-width examples. J. Combin. Theory Ser. B , 97(5):718–725, 2007.</mixed-citation>
         </ref>
         <ref id="R2">
            <mixed-citation>[2] B. Alspach. Searching and sweeping graphs: A brief survey. In COMBINATORICS 04 , 2004.</mixed-citation>
         </ref>
         <ref id="R3">
            <mixed-citation>[3] J. Bang-Jensen and G. Gutin. Digraphs - Theory, Algorithms and Applications . Springer, 2001.</mixed-citation>
         </ref>
         <ref id="R4">
            <mixed-citation>[4] J. Barát. Directed path-width and monotonicity in digraph searching. Graphs Combin. , 22(2):161–172, 2006.</mixed-citation>
         </ref>
         <ref id="R5">
            <mixed-citation>[5] D. Berwanger, A. Dawar, P. Hunter, and S. Kreutzer. DAG-width and parity games. In STACS 2006 , volume 3884 of Lecture Notes in Comput. Sci. , pages 524–536. Springer, Berlin, 2006.</mixed-citation>
         </ref>
         <ref id="R6">
            <mixed-citation>[6] D. Berwanger and E. Grädel. Entanglement – A measure for the complexity of directed graphs with applications to logic and games. In LPAR , pages 209–223, 2004.</mixed-citation>
         </ref>
         <ref id="R7">
            <mixed-citation>[7] D. Bienstock and P. Seymour. Monotonicity in graph searching. Journal of Algorithms , 12:239 – 245, 1991.</mixed-citation>
         </ref>
         <ref id="R8">
            <mixed-citation>[8] H. L. Bodlaender. Treewidth: Algorithmic techniques and results. In MFCS’97 , volume 1295, pages 19–36, 1997.</mixed-citation>
         </ref>
         <ref id="R9">
            <mixed-citation>[9] H. L. Bodlaender. A partial k -arboretum of graphs with bounded treewidth. Theoretical Computer Science , 209:1–45, 1998.</mixed-citation>
         </ref>
         <ref id="R10">
            <mixed-citation>[10] N. D. Dendris, L. M. Kirousis, and D. M. Thilikos. Fugitive-search games on graphs and related parameters. TCS , 172(1-2):233–254, 1997.</mixed-citation>
         </ref>
         <ref id="R11">
            <mixed-citation>[11] R. Diestel. Graph theory , volume 173 of Graduate Texts in Mathematics . Springer-Verlag, Berlin, third edition, 2005.</mixed-citation>
         </ref>
         <ref id="R12">
            <mixed-citation>[12] P. D.Seymour and R. Thomas. Graph searching, and a min-max theorem for tree-width. Journal of Combinatorial Theory, Series B , 58:22–33, 1993.</mixed-citation>
         </ref>
         <ref id="R13">
            <mixed-citation>[13] D. Dyer. Sweeping Graphs and Digraphs . PhD thesis, Simon Fraser University, 2004.</mixed-citation>
         </ref>
         <ref id="R14">
            <mixed-citation>[14] F. V. Fomin and D. M. Thilikos. On the monotonicity of games generated by symmetric sub- modular functions. Lecture Notes in Computer Science , 2204:177+, 2001.</mixed-citation>
         </ref>
         <ref id="R15">
            <mixed-citation>[15] M. R. Garey and D. S. Johnson. Computers and Intractibility . W. H. Freeman and Company, 1979.</mixed-citation>
         </ref>
         <ref id="R16">
            <mixed-citation>[16] P. Hunter and S. Kreutzer. Digraph measures: Kelly decompositions, games, and orderings. In Proc. of the 18th ACM-SIAM Symp. on Discrete Algorithms (SODA) , pages 637 – 644, 2007.</mixed-citation>
         </ref>
         <ref id="R17">
            <mixed-citation>[17] T. Johnson, N. Robertson, P. D. Seymour, and R. Thomas. Directed tree-width. J. Combin. Theory Ser. B , 82(1):138–154, 2001.</mixed-citation>
         </ref>
         <ref id="R18">
            <mixed-citation>[18] T. Johnson, N. Robertson, P. D. Seymour, and R. Thomas. Directed tree-width. Journal of Combinatorial Theory, Series B , 82(1):138–154, 2001.</mixed-citation>
         </ref>
         <ref id="R19">
            <mixed-citation>[19] Rm M. Karp. Complexity of Computer Science . Plenum Press New York, 1972.</mixed-citation>
         </ref>
         <ref id="R20">
            <mixed-citation>[20] A. S. LaPaugh. Recontamination does not help to search a graph. Journal of the ACM , 40:224 – 254, 1993.</mixed-citation>
         </ref>
         <ref id="R21">
            <mixed-citation>[21] F. Mazoit and N. Nisse. Monotonicity property of non-deterministic graph searching. In In Proceedings of the 33rd International Workshop on Graph-Theoretic Concepts in Computer Science (WG 2007) , 2007. to appear.</mixed-citation>
         </ref>
         <ref id="R22">
            <mixed-citation>[22] D. M. Moyles and G. L. Thompson. An algorithm for finding a minimum equivalent graph of a digraph. J. ACM , 16(3):455–460, 1969.</mixed-citation>
         </ref>
         <ref id="R23">
            <mixed-citation>[23] J. Obdr zálek. DAG-width: connectivity measure for directed graphs. In Proceedings of the 17th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA) , pages 814–821, 2006.</mixed-citation>
         </ref>
         <ref id="R24">
            <mixed-citation>[24] B. Reed. Introducing directed tree width. In 6th Twente Workshop on Graphs and Combinatorial Optimization (Enschede, 1999) , volume 3 of Electron. Notes Discrete Math. , page 8 pp. (electronic). Elsevier, Amsterdam, 1999.</mixed-citation>
         </ref>
         <ref id="R25">
            <mixed-citation>[25] M. A. Safari. d-width: a more natural measure for directed tree width. In Mathematical founda- tions of computer science 2005 , volume 3618 of Lecture Notes in Comput. Sci. , pages 745–756. Springer, Berlin, 2005.</mixed-citation>
         </ref>
         <ref id="R26">
            <mixed-citation>[26] J. van Leeuwen. Having a grundy-numbering is np-complete. Technical report, Pennsylvania State University, 1976.</mixed-citation>
         </ref>
         <ref id="R27">
            <mixed-citation>[27] B. Yang and Y. Cao. Digraph strong searching: Monotonicity and complexity. In AAIM , pages 37–46, 2007.</mixed-citation>
         </ref>
      </ref-list>
   </back>
</article>