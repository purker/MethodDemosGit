<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>b287472fd516245156bc06d1aa03ec29aa06cabe7540501782350cbc0731b9c9</job>
    <base_name>l3k</base_name>
    <doi>http://dx.doi.org/10.1145/2425936.2425937</doi>
    <warning>Name identification was not possible. </warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <outsider class="DoCO:TextBox" type="header" id="1">Electronic Communications of the EASST Volume 34 (2010)</outsider>
      <region class="DoCO:FigureBox" id="Fx2">
        <image class="DoCO:Figure" src="l3k.page_001.image_01.png" thmb="l3k.page_001.image_01-thumb.png"/>
      </region>
      <title-group>
        <article-title class="DoCO:Title" id="3" confidence="possible">Proceedings of the 6th Educators’ Symposium: Software Modeling in Education at MODELS 2010 (EduSymp 2010)</article-title>
      </title-group>
      <region class="DoCO:TextChunk" id="4" confidence="possible">Position Paper: m2n—A Tool for Translating Models to Natural Language Descriptions Petra Brosch and Andrea Randak 8 pages</region>
      <region class="unknown" id="5">Guest Editors: Peter J. Clarke, Martina Seidl Managing Editors: Tiziana Margaria, Julia Padberg, Gabriele Taentzer</region>
      <outsider class="DoCO:TextBox" type="footer" id="7">ECEASST Home Page: <ext-link ext-link-type="uri" href="http://www.easst.org/eceasst/" id="6">http://www.easst.org/eceasst/</ext-link></outsider>
      <outsider class="DoCO:TextBox" type="footer" id="8">ISSN 1863-2122</outsider>
      <region class="DoCO:FigureBox" id="Fx9">
        <image class="DoCO:Figure" src="l3k.page_002.image_02.png" thmb="l3k.page_002.image_02-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="10">ECEASST</outsider>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="11" page="2" column="1">Position Paper: m2n—A Tool for Translating Models to Natural Language Descriptions</h1>
        <region class="DoCO:TextChunk" id="14" confidence="possible" page="2" column="1">Petra Brosch ∗ and Andrea Randak <email id="12">lastname@big.tuwien.ac.at</email>, <ext-link ext-link-type="uri" href="http://www.big.tuwien.ac.at" id="13">http://www.big.tuwien.ac.at</ext-link> Business Informatics Group Vienna University of Technology, Austria Abstract: To describe the structure of a system, the UML Class Diagram yields the means-of-choice. Therefor, the Class Diagram provides concepts like class, attribute, operation, association, generalization, aggregation, enumeration, etc. When students are introduced to this diagram, they often have to solve exercises where texts in natural language are given and they have to model the described systems. When analyzing such exercises, it becomes evident that certain kinds of phrases describing a particular concept appear again and again contextualized to the described domain. In this paper, we present an approach which allows the automatic generation of textual specifications from a given Class Diagram based on standard phrases in natural language. Besides supporting teachers in preparing exercises, such an approach is also valuable for various e-learning scenarios. Keywords: modeling exercises, natural language description</region>
      </section>
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="15" page="2" column="1">1 Introduction</h1>
        <region class="DoCO:TextChunk" id="22" page="2" column="1">When teaching modeling, one of the most repetitive and time consuming tasks is the development of exercises and the corresponding solutions. A typical exercise consists of a given textual description of an arbitrary domain (e.g., university systems, enterprises, airports) which students have to model for example with a UML Class Diagram. In order to obtain an adequate exercise, it does not suffice to prepare the textual specification only, but also the sample solution has to be modeled for checking if all taught concepts are covered and if the difficulty level and size are rea- sonable. Hence, the teacher has to describe the same content twice: once as textual specification in natural language and once as a model. As there should be a one-to-one correspondence between text and model, the question at hand is if it is possible to automatically derive one artifact from the other. Already in the early 1980s attempts of automated translation of textual descriptions into pro- gram code were conducted. R.J. Abbott [Abb83] discusses a method for deriving programming concepts like data types and references by analyzing informal English descriptions. An important remark of Abbott’s work relates to the automation level of such a method. He points out that such a transformation is far away from being fully automated. User interaction is still needed ∗ Funding for this research was provided by the fFORTE WIT - Women in Technology Program of the Vienna University of Technology, and the Austrian Federal Ministry of Science and Research. <marker type="page" number="3"/><marker type="block"/> to make the outcome perfect. After all natural language is imprecise and therefore leaves room for interpretation. Only if the text obeys a certain structure and the sentences are expressed in a precise, unambiguous way, the models can be automatically derived as it is for example done in the field of requirements engineering (cf. [FKM05, WKH08]). In contrast to models of real-world software engineering projects, the models of the exercises have not to express customers’ and users’ expectations, but they have to fulfill certain didactical expectations and usually show fictive, simplified scenarios only. Therefore, the construction is different: when a teacher prepares an exercise, (s)he usually does not write the text and model the sample solution afterwards, but starts with modeling the sample solution. Having the sample solution at hand, a formal specification of the scenario is available. In this paper, we propose to use the sample solution for generating the natural language textual description of the exercise.</region>
        <outsider class="DoCO:TextBox" type="footer" id="17" page="2" column="1">1/8</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="18" page="2" column="1">Volume 34 (2010)</outsider>
        <outsider class="DoCO:TextBox" type="header" id="19" page="3" column="1">Position Paper: m2n—A Tool for Translating Models to</outsider>
        <region class="DoCO:FigureBox" id="Fx20">
          <image class="DoCO:Figure" src="l3k.page_003.image_03.png" thmb="l3k.page_003.image_03-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="21" page="3" column="1">Natural Language Descriptions</outsider>
      </section>
      <section class="deo:Background">
        <h1 class="DoCO:SectionTitle" id="23" page="3" column="1">2 Background</h1>
        <region class="DoCO:TextChunk" id="28" page="3" column="1">With five years experience in teaching the course Object-Oriented Modeling at the Vienna University of Technology [ <xref ref-type="bibr" rid="R4" id="24" class="deo:Reference">BSW + 08</xref>], it becomes evident that specific modeling concepts are expressed by recurring phrases, solely contextualized to the described domain. Phrases like “part of” for expressing composite aggregations or “is a” for generalizations are used repeatedly, irre- spective of describing houses, persons, or elements of any other domain. <xref ref-type="fig" rid="F1" id="25" class="deo:Reference">Fig. 1</xref> shows a typical toy example of our modeling course, covering the basic concepts of Class Diagrams. One possible textual description is as follows.<marker type="block"/> Although this textual description sounds natural, it follows an algorithmic pattern. In a first step, the most important class of the model is identified as a starting point for the description and input for the algorithm. This class is described by its name and its attributes. Then, inheritance relations and associations follow. In the order of exploring related classes, the procedure recurs.</region>
        <region class="unknown" id="27" page="3" column="1">Persons have a name. Guides and visitors are persons. A guide leads multiple guided tours. Each guided tour has exactly one guide. Each visitor may attend multiple guided tours, guided tours are attended by one to 20 visitors. For each guided tour the id and the duration are known. A guided tour covers exactly one sight, but each sight is covered by multiple guided tours. A sight has a name and an address. A sight is located in one city. A city may have multiple sights. For each city name and size are known.</region>
        <region class="DoCO:FigureBox" id="F1">
          <image class="DoCO:Figure" src="l3k.page_003.image_04.png" thmb="l3k.page_003.image_04-thumb.png"/>
          <caption class="deo:Caption" id="30" page="3" column="1">Figure 1: Class Diagram example</caption>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="31" page="3" column="1">Proc. EduSymp 2010</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="32" page="3" column="1">2/8</outsider>
        <region class="DoCO:FigureBox" id="Fx33">
          <image class="DoCO:Figure" src="l3k.page_004.image_05.png" thmb="l3k.page_004.image_05-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="34" page="4" column="1">ECEASST</outsider>
        <region class="unknown" id="35" page="4" column="1">ECORE   MM Traversal Strategy Sentences Natural   m2n 2 Language   Description</region>
        <region class="DoCO:FigureBox" id="F2">
          <caption class="deo:Caption" id="36" page="4" column="1">Figure 2: m2n Architecture</caption>
        </region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="37" page="4" column="1">3 Realization</h1>
        <region class="DoCO:TextChunk" id="50" page="4" column="1">The m2n tool (short for model to natural language description) yields a framework for translat- ing models of arbitrary metamodels to natural language descriptions as depicted in <xref ref-type="fig" rid="F2" id="38" class="deo:Reference">Fig. 2</xref>. The implementation is based on the Eclipse Modeling Framework 1 , hence any ECORE based metamodel may be integrated. Three artifacts are necessary to define a translation specification for a modeling language: a metamodel, a model traversal strategy, and a set of sentence templates for describing specific concepts. In the following, these artifacts are examined in detail for a simplified Class Diagram.<marker type="block"/> Metamodel. The Class Diagram metamodel used in our first prototype comprises a restricted set of the UML Class Diagram concepts. At the moment, we support the concepts of Class , Attribute , Generalization (single inheritance), and Association (binary).<marker type="block"/> Sentence Templates. Standard phrases in the form of sentence templates have to be provided for each concept of the metamodel. If there are more than one sentence for a concept, one is randomly selected, which makes the generated text more natural. These sentences contain wildcards, which are replaced by concrete model values.<marker type="block"/> Traversal Strategy. Each metamodel needs a dedicated traversal strategy to explore the model. A traversal strategy should implement a dedicated interface to allow reliable integration into the m2n framework by the dynamic class loading mechanism of Java. The traversal strategy for the Class Diagram implements a special kind of a breadth first search as shown in Listing 1. The most important model element is identified by a heuristic and acts as a starting point for the algorithm. Currently, subclass relations and associations are counted. Generalizations are higher ranked than associations. In the example of <xref ref-type="fig" rid="F1" id="42" class="deo:Reference">Fig. 1</xref>, the class Person is selected as most important element, because of its two subclasses. For the actual text generation, the root class is first introduced in the generated text by a sentence describing its name and attributes. Second, all direct subclasses are named and put to a queue holding the succeeding model elements to describe, if they are not printed so far. Third, associations are specified. Currently, the reading direction is not explicitly available in the Class Diagram metamodel. To construct a sentence, the direction is derived from source and target 1 <ext-link ext-link-type="uri" href="http://www.eclipse.org/modeling/emf/" id="43">http://www.eclipse.org/modeling/emf/</ext-link><marker type="page" number="5"/><marker type="block"/> roles of the association. Referenced classes are then put into the queue. As long as the queue is not empty, the algorithm prints the details for the next node. If the model is split into parts, then a new root node has to be found. The algorithm terminates, when all model elements are printed.</region>
        <outsider class="DoCO:TextBox" type="footer" id="45" page="4" column="1">3/8</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="46" page="4" column="1">Volume 34 (2010)</outsider>
        <outsider class="DoCO:TextBox" type="header" id="47" page="5" column="1">Position Paper: m2n—A Tool for Translating Models to</outsider>
        <region class="DoCO:FigureBox" id="Fx48">
          <image class="DoCO:Figure" src="l3k.page_005.image_06.png" thmb="l3k.page_005.image_06-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="49" page="5" column="1">Natural Language Descriptions</outsider>
        <region class="unknown" id="51" page="5" column="1">∗</region>
        <region class="unknown" id="52" page="5" column="1">∗</region>
        <region class="unknown" id="53" page="5" column="1">∗</region>
        <region class="unknown" id="54" page="5" column="1">∗ Queue nodeQueue ; ∗ Set printedME ; ∗ S e t allME ; ∗</region>
        <region class="unknown" id="55" page="5" column="1">∗</region>
        <region class="unknown" id="56" page="5" column="1">∗</region>
        <region class="unknown" id="57" page="5" column="1">∗</region>
        <region class="unknown" id="58" page="5" column="1">∗ ∗</region>
      </section>
      <section class="deo:Methods">
        <h1 class="DoCO:SectionTitle" id="59" confidence="possible" page="5" column="1">/ variable declarations / / t e m p o r a r y b u f f e r f o r a l l d i s t i n c t v i s i t e d e l e m e n t s / / h o l d s a l r e a d y p r i n t e d model e l e m e n t s / / h o l d s a l l model e l e m e n t s / / function declarations / / i m p l e m e n t e d method o f i n t e r f a c e ; c a l l e d by m2n / / a l l model e l e m e n t s p r i n t e d ? / / s e a r c h f o r m o s t i m p o r t a n t model e l e m e n t / / add node a s s t a r t i n g c l a s s t o nodeQueue / / p r i n t model d e t a i l s /</h1>
        <region class="unknown" id="60" page="5" column="1">∗</region>
        <region class="unknown" id="61" page="5" column="1">∗ ∗ v o i d g e t T e x t ( ) { ∗ w h i l e ( p r i n t e d M E ! = allME ) { ∗ node = l o c a l i z e R o o t C l a s s ( ) ; ∗ nodeQueue . add ( node ) ; ∗ printModel ( ) ; ∗ } }</region>
        <region class="unknown" id="62" page="5" column="1">∗</region>
        <region class="unknown" id="63" page="5" column="1">∗</region>
        <region class="unknown" id="64" page="5" column="1">void printModel ( ) { node = nodeQueue . p o l l ( ) ; ∗ p r i n t A t t r i b u t e s ( node ) ; ∗ p r i n t I n h e r i t a n c e ( node ) ; ∗</region>
        <region class="unknown" id="65" page="5" column="1">∗</region>
        <region class="unknown" id="66" page="5" column="1">p r i n t A s s o c i a t i o n ( node ) ; ∗</region>
        <region class="unknown" id="67" page="5" column="1">∗</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="68" confidence="possible" page="5" column="1">/ g e t node t o d e s c r i b e / / print sentence for a t t r i b u t e s / / print sentence for inheritance ; add e a c h new s u b c l a s s t o nodeQueue / / print sentence for association ; add e a c h new a s s o c i a t e d c l a s s t o nodeQueue / / p r i n t i n g o f node c o m p l e t e d / / i f any n o d e s l e f t , r e p e a t ; /</h1>
        <region class="unknown" id="69" page="5" column="1">∗ ∗</region>
        <region class="unknown" id="70" page="5" column="1">p r i n t e d M E . add ( node ) ; ∗ i f ( ! nodeQueue . i s E m p t y ( ) ) ∗ printModel ( ) ;</region>
        <outsider class="DoCO:TextBox" type="sidenote" id="71" page="5" column="1">1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</outsider>
        <region class="DoCO:TextChunk" id="72" confidence="possible" page="5" column="1">} Listing 1: Model to Natural Language Description Generation</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="73" page="5" column="1">4 The Long-Term Vision</h1>
        <region class="DoCO:TextChunk" id="74" page="5" column="1">The presented m2n-tool supports on the one hand teachers in keeping exercises consistent with the sample solutions, i.e., it facilitates the management of teaching artifacts. On the other hand, if provided to the students, they can generate natural text out of the given diagram, providing them some explanation of the diagram. But these are only side-effects; we developed our tool with a very different intention in mind. m2n is intended to be used within a major e-learning project aiming at the development of an interactive e-learning system for Class Diagrams. In the following, we motivate why we need such an e-learning system, then we shortly describe the basic architecture, and finally we explain the important role m2n plays in these considerations.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="75" page="5" column="1">4.1 Motivation</h2>
          <region class="DoCO:TextChunk" id="81" page="5" column="1">One of the basic challenges in teaching modeling is the practical part of the course. Unlike in programming where the programs of the students are relatively easily testable by checking whether they show the expected behavior or not, the situation in modeling is different. Especially <marker type="page" number="6"/><marker type="block"/> when models are used for describing, analyzing, or designing systems, and when the models are not executable or transferable to a formal specification like code, automatic testing is hardly possible. A serious correction and grading is only possible by human teachers, often requiring considerable intellectual effort to follow the students’ approach, because students often have a different viewpoint on a matter, which is still correct. It is also possible, that the specification is interpretable in different ways. Especially in teaching modeling, learning by doing is extremely important, so such practical exercises in which the students have to derive a model from a textual specification. Even if the students use modeling tools instead of drawing the models by hand, automatic correction is hardly possible, and if it is possible then the specification has to be formulated very narrow, teaching the students to recognize patterns only instead of allowing them to be creative. Due to this reasons it is extremely difficult, to build e-learning environments which allow the students to train on their own and to get valuable feedback from the system, especially when no teacher is at hand. Naturally, the exercises may be formulated in a very static manner in terms of multiple choice questions, where the students have to decide if a statement about a given model is true or false. Another approach is to give the students textual specifications and a sample solution, which they can compare to their own result. Although such approaches are certainly helpful, they do not allow to train creativity, which is certainly an important skill in practical modeling. In the following, we propose an approach which allows a more flexible way to practice the modeling of Class Diagrams.</region>
          <outsider class="DoCO:TextBox" type="footer" id="77" page="5" column="1">Proc. EduSymp 2010</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="78" page="5" column="1">4/8</outsider>
          <region class="DoCO:FigureBox" id="Fx79">
            <image class="DoCO:Figure" src="l3k.page_006.image_07.png" thmb="l3k.page_006.image_07-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="header" id="80" page="6" column="1">ECEASST</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="82" page="6" column="1">4.2 The Basic Architecture</h2>
          <region class="DoCO:TextChunk" id="83" page="6" column="1">The ideal case for teaching modeling is that the students have to realize a software engineering project where they have to create the models as primary design and documentation artifacts. Since in many courses it is not possible to combine teaching modeling with realizing a practical project (or if the assumption is that it is preferable to learn the necessary concepts first before putting them into practice), typical modeling exercises consist of small textual specifications as they may be created with m2n. The students are asked to model the given text as precisely as possible. A good approach is as follows:</region>
          <region class="DoCO:TextChunk" id="84" confidence="possible" page="6" column="1">1. identify classes, 2. decorate classes with attributes and operations, 3. include inheritance relationships, 4. introduce the associations between classes.</region>
          <region class="DoCO:TextChunk" id="91" page="6" column="1">One of the major problems hampering the automatic correction is the naming of the modeling elements. Model elements are usually identified by their names and often there is a huge choice of freedom on how to name an element. To circumvent this problem we propose the following approach. The specification is internally annotated with the information which words describe model elements. Considering our example from above, the annotated specification contains information <marker type="page" number="7"/><marker type="block"/> that a Guide is a class, that Person is a class and that name is an attribute of Person . Naturally, the annotations are not visible to the students, as they contain the solutions. Additionally, the relationships between the model elements are known. In the proposed tool, the student only sees the given textual specification. First, (s)he is al- lowed to select those terms of the text which (s)he thinks represents classes. Having identified the classes, attributes and operations are added similarly. When the student selects a term in the text, a corresponding model element is created in a graphical editor. When the student is done with the identification of model elements, (s)he adds the relationships between the model elements. The system monitors the student’s behavior and is able to give immediate feedback. Similar approaches have been presented in [APL08, BM06, SM04], but our approach is novel in the way how the specifications are created.</region>
          <outsider class="DoCO:TextBox" type="footer" id="86" page="6" column="1">5/8</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="87" page="6" column="1">Volume 34 (2010)</outsider>
          <outsider class="DoCO:TextBox" type="header" id="88" page="7" column="1">Position Paper: m2n—A Tool for Translating Models to</outsider>
          <region class="DoCO:FigureBox" id="Fx89">
            <image class="DoCO:Figure" src="l3k.page_007.image_08.png" thmb="l3k.page_007.image_08-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="header" id="90" page="7" column="1">Natural Language Descriptions</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="92" page="7" column="1">4.3 The Role of m2n</h2>
          <region class="DoCO:TextChunk" id="93" page="7" column="1">Whenever a new exercise is created, the specification has to be prepared accordingly in order to be suitable for being used as input for the e-learning tool. Without automatic support, the creation of the specification with the required information is cumbersome and time-consuming. Furthermore, it has to be done extremely carefully because otherwise the exercise in the e-learning system is buggy and the students either get confused or they even learn wrong things. For supporting the teachers in easily creating new exercises, we propose an extension of m2n which is able to create such an annotated specification automatically which may serve as input for the e-learning tool. As we have already seen, the teacher provides the sample solution model and m2n creates the textual version. Furthermore, the extension of m2n also creates an annotated version of the specification which may be directly imported from the e-learning tool. Naturally, the sample solution model provides all information necessary and the required annotation is straightforward in the case that the text is used as provided by our tool. If manual postprocessing is desired, then the danger is that the model and specification are not synchronized anymore. It may be possible that certain features are not derived as expected and then manual intervention is necessary. For this problem, we intend to develop a sophisticated update mechanism allowing to propagate modifications not only from the model to the specification but also vice versa, i.e., from the specification to the model. Having this extension at hand, we expect to offer an e-learning tool for Class Diagrams which allows an easy creation of exercises with minimizing the problem of inconsistencies between specification and model.</region>
        </section>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="94" page="7" column="1">5 Conclusion</h1>
        <region class="DoCO:TextChunk" id="100" page="7" column="1">In this paper, we presented a tool for transforming a given Class Diagram to a textual specification in natural language. With such a tool teachers can automatically create the textual specification from the sample solution of an exercise which may serve as a basis for the description of the students’ homework or for examination questions. We realized a first prototype implementation as Eclipse Plugin. Although the text generated in first experiments yield a good basis for describing a given model, the implementation leaves <marker type="page" number="8"/><marker type="block"/> much room for interesting extensions and fine-tuning. For example, currently the plural of a noun is obtained by appending an “s” at the end of the word—irregular forms are neglected. Furthermore, we will extend the collection of sentences and elaborate on a more sophisticated assembly algorithm of the text in order to obtain a more natural specification. Also we consider a subset of the Class Diagram’s elements only at the moment—e.g., we are not able to express association classes or n-ary associations which may be treated as any other model element. Furthermore, better synchronization support between text and model will be an issue, because if the text has been edited manually and the model is modified, then the manual changes of the text should not get lost. Our tool may also be used by the students for practicing. Students get a textual description of their model and by experimenting they obtain an explanation of the modifications’ impact. For the realization of this use case, it will be necessary to build a dedicated user interface which is able to highlight the modifications. The long-term goal is building an e-learning framework for learning UML diagrams. Given a textual specification, the students shall identify model elements like classes, associations, aggregations etc. which have to be arranged as described in the specification. The result of the students’ effort is compared to a sample solution and differences (i.e., the mistakes) are reported. Similar approaches are presented in [APL08, BM06, SM04]. In order to obtain the link between textual specification and sample solution, the text has to be annotated, which is done by hand so far. With the approach presented in this paper it will be possible to annotate the textual specification automatically, facilitating the creation of new exercises.</region>
        <outsider class="DoCO:TextBox" type="footer" id="96" page="7" column="1">Proc. EduSymp 2010</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="97" page="7" column="1">6/8</outsider>
        <region class="DoCO:FigureBox" id="Fx98">
          <image class="DoCO:Figure" src="l3k.page_008.image_09.png" thmb="l3k.page_008.image_09-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="99" page="8" column="1">ECEASST</outsider>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="101" page="8" column="1">Bibliography</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="102" page="8" column="1">[Abb83] R. J. Abbott. Program Design by Informal English Descriptions. Communications of the ACM 26(11):882–894, 1983.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="103" page="8" column="1">[APL08] L. Auxepaules, D. Py, T. Lemeunier. A Diagnosis Method that Matches Class Diagrams in a Learning Environment for Object-Oriented Modeling. In ICALT ’08: Proc. of the 2008 Eighth IEEE International Conference on Advanced Learning Technologies . Pp. 26–30. IEEE Computer Society, 2008.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="104" page="8" column="1">[BM06] N. Baghaei, A. Mitrovic. A Constraint-Based Collaborative Environment for Learning UML Class Diagrams. In Proc. Intelligent Tutoring Systems . LNCS 4053, pp. 176–186. Springer, 2006.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="105" page="8" column="1">[BSW + 08] M. Brandsteidl, M. Seidl, M. Wimmer, C. Huemer, G. Kappel. Teaching Models @ BIG - How to Give 1000 Students an Understanding of the UML. In Promoting Software Modeling Through Active Education, Educators Symposium Models’08 . Pp. 64–68. Warsaw University of Technology, 2008.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="106" page="8" column="1">[FKM05] G. Fliedl, C. Kop, H. C. Mayr. From Textual Scenarios to a Conceptual Schema. Data &amp; Knowledge Engineering 55(1):20–37, 2005.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="112" page="9" column="1">[SM04] P. Suraweera, A. Mitrovic. An Intelligent Tutoring System for Entity Relationship Modelling. International Journal of Artificial Intelligence in Education (IJAIED) 14(3-4):375–417, 2004.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="113" page="9" column="1">[WKH08] K. Wolter, T. Krebs, L. Hotz. A Combined Similarity Measure for Determining Similarity of Model-based and Descriptive Requirements. In Artificial Intelligence Tech- niques in Software Engineering (ECAI 2008 Workshop) . Pp. 11–15. 2008.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="footer" id="107" page="8" column="1">7/8</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="108" page="8" column="1">Volume 34 (2010)</outsider>
        <outsider class="DoCO:TextBox" type="header" id="109" page="9" column="1">Position Paper: m2n—A Tool for Translating Models to</outsider>
        <region class="DoCO:FigureBox" id="Fx110">
          <image class="DoCO:Figure" src="l3k.page_009.image_10.png" thmb="l3k.page_009.image_10-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="111" page="9" column="1">Natural Language Descriptions</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="114" page="9" column="1">Proc. EduSymp 2010</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="115" page="9" column="1">8/8</outsider>
      </section>
    </body>
  </article>
</pdfx>
