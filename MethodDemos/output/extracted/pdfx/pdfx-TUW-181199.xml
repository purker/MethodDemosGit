<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>44c3f4ccb85fffc418943da7967f9297c5f5cdaa5bd9f33644652ccd9638c1f6</job>
    <base_name>l36</base_name>
    <doi>http://dx.doi.org/10.1007/978-3-642-00675-3_17</doi>
    <warning>Name identification was not possible. </warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">spock : A Debugging Support Tool for Logic Programs under the Answer-Set Semantics ⋆</article-title>
      </title-group>
      <region class="DoCO:TextChunk" id="3" confidence="possible">Martin Gebser 1 , Jörg Pührer 2 , Torsten Schaub 1 , Hans Tompits 2 , and Stefan Woltran 2 1 Institut für Informatik, Universität Potsdam, August-Bebel-Straße 89, D-14482 Potsdam, Germany { gebser,torsten } @cs.uni-potsdam.de 2 Institut für Informationssysteme, Technische Universität Wien, Favoritenstraße 9–11, A–1040 Vienna, Austria { puehrer,tompits } @kr.tuwien.ac.at <email id="2">woltran@dbai.tuwien.ac.at</email></region>
      <abstract class="DoCO:Abstract" id="4">Answer-set programming (ASP) is an emerging logic-programming paradigm that strictly separates the description of a problem from its solving methods. Despite its semantic elegance, ASP suffers from a lack of support for program developers. In particular, tools are needed that help engineers in detecting erroneous parts of their programs. Unlike in other areas of logic programming, applying tracing techniques for debugging logic programs under the answer-set semantics seems rather unnatural, since employing imperative solving algorithms would undermine the declarative flavour of ASP. In this paper, we present the system spock , a debugging support tool for answer-set programs making use of ASP itself. The implemented techniques maintain the declarative nature of ASP within the debugging process and are independent of the actual computation of answer sets.</abstract>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="5" page="1" column="1">1 General Information</h1>
      </section>
      <region class="DoCO:TextChunk" id="17" page="1" column="1">Answer-set programming (ASP) [ <xref ref-type="bibr" rid="R1" id="6" class="deo:Reference">1</xref>] has become an important logic-programming paradigm for declarative problem solving, incorporating fundamental concepts of non- monotonic reasoning. A major reason why ASP has not yet found a more widespread popularity as a problem-solving technique, however, is its lack of suitable engineering tools for developing programs. In particular, realising tools for debugging answer-set programs is a clearly recognised issue in the ASP community, and several approaches in this direction have been proposed in recent years [<xref ref-type="bibr" rid="R2" id="7" class="deo:Reference">2</xref>, <xref ref-type="bibr" rid="R3" hidden="1" id="8" class="deo:Reference">3</xref>, <xref ref-type="bibr" rid="R4" hidden="1" id="9" class="deo:Reference">4</xref>, <xref ref-type="bibr" rid="R5" id="10" class="deo:Reference">5</xref>]. From a theoretical point of view, the nonmonotonicity of answer-set programs is an aggravating factor for detecting sources of errors, since every rule of a program might significantly influence the resulting answer sets. On the other hand, applying tracing techniques for debugging logic programs under the answer-set semantics seems rather unnatural, since employing imperative solving algorithms would undermine the declarative flavour of ASP. ⋆ This work was partially supported by the Austrian Science Fund (FWF) under project P18019.<marker type="page" number="2"/><marker type="block"/> In this paper, we discuss the main features of the system spock [<xref ref-type="bibr" rid="R6" id="12" class="deo:Reference">6</xref>], which supports developers of answer-set programs in locating errors in their programs by exploiting the declarative nature of ASP itself, but being independent of specific ASP solvers. The name “ spock ” makes reference to the fact that detecting errors is done by means of logic, just like the popular Vulcan of Star Trek fame. The theoretical background of the implemented methods was introduced in previous work [<xref ref-type="bibr" rid="R5" id="13" class="deo:Reference">5</xref>], exploiting and extending a tagging technique as used by Delgrande et al. [<xref ref-type="bibr" rid="R7" id="14" class="deo:Reference">7</xref>] for compiling ordered logic programs into standard ones. In our approach, a program to debug, Π , is augmented with dedicated meta-atoms, called tags , serving two purposes: Firstly, they allow for controlling and manipulating the applicability of rules, and secondly, tags occurring in the answer sets of the extended program reflect various properties of Π . Our tool implements the tagging process and further related translations for a program Π to debug, allowing for an extrapolation of non-existing answer sets in combination with explanations why an interpretation is not an answer set of Π . For illustration of the debugging questions addressed, consider the problem of invit- ing guests to a party when it is known that some of them would appear only if certain others do or do not attend the festivity. An instance of such a setting is encoded in program Π inv , where each atom represents the appearing of a potential party visitor:<marker type="block"/> This program has two answer sets, viz., { chekov , scotty } and { bones , jim , scotty } . Assume that Sulu, the programmer, is quite perplexed by this result, wondering why there is a scenario where only Chekov and Scotty, who merely have a neutral relation to each other rather than a friendship, attend. On the other hand, he is astonished as there is no possibility such that Uhura and Jim can jointly be invited. With the help of the tool spock , reasons for such mismatches between the expected and the actual semantics of a program can be found.</region>
      <region class="unknown" id="16" page="2" column="1">r 1 = jim ← uhura , r 4 = chekov ← not bones , r 2 = jim ← not chekov , r 5 = bones ← jim , r 3 = uhura ← chekov , not scotty , r 6 = scotty ← not uhura .</region>
      <section class="deo:Background">
        <h1 class="DoCO:SectionTitle" id="18" page="2" column="1">2 Background</h1>
        <region class="DoCO:TextChunk" id="19" confidence="possible" page="2" column="1">A ( ) (over an alphabet ) is a finite set of rules of the form</region>
        <disp-formula class="DoCO:FormulaBox" id="F1">
          <label class="DoCO:Label" id="20">1</label>
          <content class="DoCO:Formula" id="21" page="2" column="1">m n</content>
        </disp-formula>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="22" page="2" column="1">2.1 Answer-Set Programs A ( normal ) logic program (over an alphabet A ) is a finite set of rules of the form a ← b 1 , . . . , b , not c 1 , . . . , not c , (1) a b , c ∈ A 0 ≤ i ≤ m 0 ≤ j ≤ n a</h2>
          <region class="DoCO:TextChunk" id="24" page="2" column="1">where and i j are atoms, for , . A literal is an atom or its negation not a . For a rule r as in (1), let head ( r ) = a be the head of r and body ( r ) = { b 1 , . . . , b m , not c 1 , . . . , not c n } the body of r . Furthermore, we define body + ( r ) = { b 1 , . . . , b m } and body − ( r ) = { c 1 , . . . , c n } . For a logic program Π , a set X of atoms is an answer set of Π iff X is a minimal model of { head ( r ) ← body + ( r ) | r ∈ Π, body − ( r ) ∩ X = ∅} . For uniformity, we assume that any integrity constraint ← body ( r ) is expressed as a rule w ← body ( r ) , not w, where w is a globally new atom. Moreover, <marker type="page" number="3"/><marker type="block"/> we allow nested expressions of form not not a , where a is some atom, in the body of rules. Such rules are identified with normal rules in which not not a is replaced by not a ⋆ , where a ⋆ is a globally new atom, together with an additional rule a ⋆ ← not a .</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="25" page="3" column="1">2.2 Tagging-Based Debugging</h2>
          <region class="DoCO:TextChunk" id="27" page="3" column="1">In what follows, we sketch the theoretical principles underlying our system spock . For a more detailed discussion, we refer to Brain et al. [<xref ref-type="bibr" rid="R5" id="26" class="deo:Reference">5</xref>]. The main idea of tagging is to split the head from the body, for each rule in a program, and thereby to intervene into the applicability of rules. After this division, tags are installed for triggering rules. This way, the formation of answer sets can be controlled, and tags in the answer sets of the transformed (or tagged) program reflect inherent properties of the original program. Technically, a program Π (over alphabet A ) to debug is rewritten into a program T K [ Π ] over an extended alphabet A + . Let Π be a logic program over A and consider a bijection n , assigning to each rule r over A a unique name n r . Then, the program T K [ Π ] over A + consists of the following rules, for r ∈ Π , b ∈ body + ( r ) , and c ∈ body − ( r ) :</region>
          <disp-formula class="DoCO:FormulaBox" id="F6">
            <label class="DoCO:Label" id="28">6</label>
            <content class="DoCO:Formula" id="29" page="3" column="1">head ( r ) ← ap ( n r ) , not ko ( n r ) , ap ( n r ) ← ok ( n r ) , body ( r ) , bl ( n r ) ← ok ( n r ) , not b, bl ( n r ) ← ok ( n r ) , not not c, ok ( n r ) ← not ok ( n r ) .</content>
          </disp-formula>
          <region class="DoCO:TextChunk" id="33" page="3" column="1">The tags ap ( n r ) and bl ( n r ) express whether a rule r is applicable or blocked, respectively, while the control tags ko ( n r ) , ok ( n r ) , and ok ( n r ) are used for manipulating the application of r . Intuitively, the rules of Π are split into rules of forms (2) and (3), separating the applicability of a rule from the actual occurrence of the respective rule head in an interpretation. Analogously, rules of forms (4) and (5) elicit which rules are blocked. Tags stating whether rule r is applicable or blocked are only derived if ok ( n r ) holds, which is by default the case, as expressed by rules of form (6). We call T K [ Π ] the kernel tagging of Π , since it serves as a basic submodule for more enhanced programs facilitating certain debugging requests. One such extension scenario is the extrapolation of non-existing answer sets of a program Π over A . Using further translations, T P , T C , and T L [<xref ref-type="bibr" rid="R5" id="30" class="deo:Reference">5</xref>], the occurrence of abnormality tags , ab p ( n r ) , ab c ( a ) , and ab l ( a ) , respectively, in an answer set X + of the transformed program provides information why an interpretation X = X + ∩ A is not an answer set of Π . Here, we make use of the Lin-Zhao theorem [<xref ref-type="bibr" rid="R8" id="31" class="deo:Reference">8</xref>], which qualifies answer sets as models of the completion [<xref ref-type="bibr" rid="R9" id="32" class="deo:Reference">9</xref>] and the loop formulas of a program. In particular, the program-oriented abnormality tag ab p ( n r ) indicates that rule r is applicable but not satisfied with respect to an interpretation. The completion-oriented abnormality tag ab c ( a ) signals that a is in the considered interpretation but all rules having a as head are blocked. Finally, the presence of a loop-oriented abnormality tag ab l ( a ) indicates that the derivation of atom a might recursively depend on a itself and, therefore, violate the minimality criterion for answer sets. Note that all transformations used are polynomial in the size of the input program and can be constructed for all programs under consideration, even for programs without answer sets.</region>
          <region class="unknown" id="34" page="4" column="1">Command-Line Arguments Input Program &lt;file_1&gt; spock &lt;file_2&gt; Internal Program ... Parser Program Translation Representation &lt;file_n&gt; Standard Input</region>
          <region class="DoCO:FigureBox" id="F1">
            <caption class="deo:Caption" id="35" page="4" column="1">Fig. 1. Data flow of program translations</caption>
          </region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="36" page="4" column="1">3 System</h1>
        <region class="DoCO:TextChunk" id="45" page="4" column="1">spock is a command-line oriented tool, written in Java 5.0 and published under the GNU general public license [ <xref ref-type="bibr" rid="R10" id="37" class="deo:Reference">10</xref>]. It is publicly available at<marker type="block"/> as a jar-package including binaries and sources. The data flow for all transformations is depicted by <xref ref-type="fig" rid="F1" id="41" class="deo:Reference">Fig. 1</xref>. First, the input program is parsed and represented in an internal data structure. Then, the actual program transformation is performed, as specified by command-line arguments. The tagging technique uses labels to refer to individual rules. Therefore, we allow the programmer to add labels to the rules of the program to debug. As this re- quires an extension of the program syntax, spock offers an interface to dlv [<xref ref-type="bibr" rid="R11" id="42" class="deo:Reference">11</xref>] and lparse / smodels [<xref ref-type="bibr" rid="R12" id="43" class="deo:Reference">12</xref>] for computing answer sets of labelled programs. For illustration of the debugging process, reconsider program Π inv , having the answer sets X 1 = { chekov , scotty } and X 2 = { bones , jim , scotty } , and assume that it is stored in file FILE . The kernel tagging T K [ Π inv ] is then obtained by the call java -jar spock.jar -k FILE . By piping the result of the command to an answer-set solver, we obtain the answer sets X 1 + = X 1 ∪ { ap ( n r 4 ) , ap ( n r 6 ) , bl ( n r 1 ) , bl ( n r 2 ) , bl ( n r 3 ) , bl ( n r 5 ) } ∪ OK and X 2 + = X 2 ∪ { ap ( n r 2 ) , ap ( n r 5 ) , ap ( n r 6 ) , bl ( n r 1 ) , bl ( n r 3 ) , bl ( n r 4 ) } ∪ OK , where OK = { ok ( n r 1 ) , ok ( n r 2 ) , ok ( n r 3 ) , ok ( n r 4 ) , ok ( n r 5 ) , ok ( n r 6 ) } , extending X 1 and X 2 by information about the applicability of rules. E.g., the presence of ap ( n r 4 ) in X 1 + indicates that rule r 4 is applicable with respect to X 1 , and hence chekov ∈ X 1 but bones ∈ / X 1 , while bl ( n r 3 ) ∈ X 1 + indicates that r 3 is blocked with respect to X 1 . This is because scotty ∈ X 1 . The flags ‘ -expo ’, ‘ -exco ’, and ‘ -exlo ’ activate the extrapolation translations T P , T C , and T L , respectively. Instead of using all three flags simultaneously, setting<marker type="page" number="5"/><marker type="block"/> ‘ -ex ’ produces the union of the resulting programs. Furthermore, in order to restrict the scope of transformation T P to a subprogram Π ′ (respectively, translations T C , T L to sets A C , A L of atoms), the names of the considered rules (respectively, atoms) can be explicitly stated in a comma-separated list following the ‘ -exrules= ’ (resp., ‘ -exatomsC= ’ and ‘ -exatomsL= ’) flag. Finally, spock allows for computing only abnormality-minimum answer sets by means of dlv -specific weak constraints. The flags ‘ -minab ’, ‘ -minabp ’, ‘ -minabc ’, or ‘ -minabl ’ make spock output weak constraints for minimising all abnormality tags, program-oriented abnormality tags, completion-oriented abnormality tags, or loop-oriented abnormality tags, respectively. As for our example, recall that Sulu wanted to know why there is no chance for Uhura and Jim to attend the same party. Therefore, we add the constraints ← not uhura and ← not jim to Π inv . Let file FILE2 contain the overall program, which does not have answer sets. The (optimal) answer sets of the tagged program obtained by the call</region>
        <region class="unknown" id="40" page="4" column="1"> <ext-link ext-link-type="uri" href="http://www.kr.tuwien.ac.at/research/debug" id="39">http://www.kr.tuwien.ac.at/research/debug</ext-link></region>
        <region class="DoCO:TextChunk" id="46" confidence="possible" page="5" column="1">java -jar spock.jar -k -ex -exrules=r1,r2,r3,r4,r5,r6 -minab FILE2 ,</region>
        <region class="DoCO:TextChunk" id="47" page="5" column="1">projected to the atoms occurring in Π inv and the abnormality tags, are given by { ab c ( chekov ) , bones , chekov , jim , uhura } , { ab c ( uhura ) , bones , jim , uhura } , and { ab p ( n r 5 ) , chekov , jim , uhura } , indicating that { bones , chekov , jim , uhura } is not an answer set of Π inv because atom chekov is not supported. Likewise, uhura is not supported with respect to { bones , jim , uhura } . Finally, { chekov , jim , uhura } is not an answer set as it does not satisfy rule r 5 .</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="48" page="5" column="1">4 Discussion and Related Work</h1>
        <region class="DoCO:TextChunk" id="58" page="5" column="1">In this paper, we presented spock , a prototype implementation of a debugging support tool for answer-set programs. The implemented methodology relies on theoretical results of previous work [ <xref ref-type="bibr" rid="R5" id="49" class="deo:Reference">5</xref>] and is based on the idea that programs to be debugged are translated into other programs having answer sets that offer debugging-relevant information about the original programs. After an initial kernel transformation, we get insight into the applicability of rules with respect to individual answer sets. In a further step, the system allows for identifying causes why interpretations are not answer sets. Here, spock distinguishes between abnormalities due to missing or spare atoms, or atoms whose presence in an interpretation is self-caused. In order to restrict the amount of information returned to the programmer, standard ASP optimisation techniques can be used to focus on interpretations with a minimal number of abnormalities. In addition to the tagging technique described here, spock also supports another approach towards debugging answer-set programs based on meta-programming [<xref ref-type="bibr" rid="R13" id="50" class="deo:Reference">13</xref>, <xref ref-type="bibr" rid="R14" id="51" class="deo:Reference">14</xref>]. Future work includes the integration of further aspects of the translation approach and the design of a graphical user interface to ease the use of the features spock provides. Implementations of related techniques include smdebug [<xref ref-type="bibr" rid="R3" id="52" class="deo:Reference">3</xref>], a prototype debugger focusing on odd-cycle-free inconsistent programs. The system is designed to find minimal sets of constraints, restoring consistency when removed from a program. Brain and De Vos [<xref ref-type="bibr" rid="R2" id="53" class="deo:Reference">2</xref>] present the system IDEAS , implementing two query algorithms addressing the questions why a set of literals is true with respect to some or false with respect to<marker type="page" number="6"/><marker type="block"/> all answer sets of a program. Both algorithms are procedural and similar to the ones used in ASP solvers, suggesting that an approach using program-level transformations would be more practical. Pontelli and Son [<xref ref-type="bibr" rid="R4" id="55" class="deo:Reference">4</xref>] developed a preliminary implementation for their adoption of so-called justifications [<xref ref-type="bibr" rid="R15" id="56" class="deo:Reference">15</xref>, <xref ref-type="bibr" rid="R16" id="57" class="deo:Reference">16</xref>] to the problem of debugging answer-set programs. Their system returns visual output in form of graphs explaining why atoms are (not) present in an answer set.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="59" page="6" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="60" page="6" column="1">1. Baral, C.: Knowledge Representation, Reasoning and Declarative Problem Solving. Cam- bridge University Press (2003)</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="61" page="6" column="1">2. Brain, M., De Vos, M.: Debugging Logic Programs under the Answer Set Semantics. In: Proc. ASP’05. Volume 142, CEUR Workshop Proceedings (CEUR-WS.org) (2005) 141–152</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="62" page="6" column="1">3. Syrjänen, T.: Debugging Inconsistent Answer Set Programs. In: Proc. NMR’06. (2006) 77–83</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="63" page="6" column="1">4. Pontelli, E., Son, T.: Justifications for Logic Programs under Answer Set Semantics. In: Proc. ICLP’06. Springer (2006) 196–210</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="64" page="6" column="1">5. Brain, M., Gebser, M., Pührer, J., Schaub, T., Tompits, H., Woltran, S.: Debugging ASP Programs by means of ASP. In: Proc. LPNMR’07. Springer (2007) 31–43</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="65" page="6" column="1">6. Brain, M., Gebser, M., Pührer, J., Schaub, T., Tompits, H., Woltran, S.: “That is Illogical Captain!” – The Debugging Support Tool spock for Answer-Set Programs: System Descrip- tion. In: Proc. SEA’07. (2007) 71–85</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="66" page="6" column="1">7. Delgrande, J., Schaub, T., Tompits, H.: A Framework for Compiling Preferences in Logic Programs. Theory and Practice of Logic Programming 3 (2003) 129–187</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="67" page="6" column="1">8. Lin, F., Zhao, Y.: ASSAT: Computing Answer Sets of a Logic Program by SAT Solvers. Artificial Intelligence 157 (2004) 115–137</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="68" page="6" column="1">9. Clark, K.: Negation as Failure. In: Logic and Data Bases. Plenum Press (1978) 293–322</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="70" page="6" column="1">10. GNU General Public License – Version 2, June 1991. Free Software Foundation Inc. (1991) <ext-link ext-link-type="uri" href="http://www.gnu.org/copyleft/gpl.html" id="69">http://www.gnu.org/copyleft/gpl.html</ext-link></ref>
          <ref rid="R11" class="deo:BibliographicReference" id="71" page="6" column="1">11. Leone, N., Pfeifer, G., Faber, W., Eiter, T., Gottlob, G., Perri, S., Scarcello, F.: The DLV System for Knowledge Representation and Reasoning. ACM Transactions on Computational Logic 7 (2006) 499–562</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="72" page="6" column="1">12. Simons, P., Niemelä, I., Soininen, T.: Extending and Implementing the Stable Model Semantics. Artificial Intelligence 138 (2002) 181–234</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="73" page="6" column="1">13. Pührer, J.: On Debugging of Propositional Answer-Set Programs. Master’s thesis, Vienna University of Technology, Austria (2007)</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="74" page="6" column="1">14. Gebser, M., Pührer, J., Schaub, T., Tompits, H.: A Meta-Programming Technique for Debugging Answer-Set Programs. In: Proc. AAAI’08. (2008) To appear</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="75" page="6" column="1">15. Roychoudhury, A., Ramakrishnan, C., Ramakrishnan, I.: Justifying Proofs using Memo Tables. In: Proc. PPDP’00. (2000) 178–189</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="76" page="6" column="1">16. Specht, G.: Generating Explanation Trees even for Negations in Deductive Database Systems. In: Proc. LPE’93. (1993) 8–13</ref>
        </ref-list>
      </section>
    </body>
  </article>
</pdfx>
