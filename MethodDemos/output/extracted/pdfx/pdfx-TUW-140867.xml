<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>417efc43d388b407fcd2ab8363da495c12b8cb74240d7e74abc1083a8c483513</job>
    <base_name>l2m</base_name>
    <doi>http://dx.doi.org/10.1007/1-4020-7876-5_13</doi>
    <warning>Name identification was not possible. </warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Automated Tools for Teaching Formal Software Verification</article-title>
      </title-group>
      <region class="unknown" id="2">Ingo Feinerer Gernot Salzer Institut f ur  ̈ Computersprachen Technische Universit at  ̈ Wien Karlsplatz 13 A-1040 Vienna, Austria { feinerer | salzer } @logic.at</region>
      <abstract class="DoCO:Abstract" id="3">We present the status of formal methods at our university, and describe our course on formal software verification in more detail. We report our experiences in using Perfect Developer for the course assignments.</abstract>
      <region class="unknown" id="4">Keywords: formal verification of software, Perfect Developer</region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="5" page="1" column="1">1. INTRODUCTION</h1>
      </section>
      <region class="DoCO:TextChunk" id="18" page="1" column="1">As the automation of formal methods makes progress, they become more and more relevant for industry. Unfortunately, other areas are growing faster and are more popular with students, university teachers, and professionals – at least in Austria. <marker type="block"/> Computer Science @ TU Wien The computer science department at Technische Universit at  ̈ Wien (T UW , Vienna University of Technology) is by far the biggest in Austria. About 120 full, associate, and assistant professors (5 % of T UW ’s teaching personnel) teach approximately 6000 students (30 % of T UW ’s students). Until 2001, there were only two monolithic studies: Informatik (informatics) taking 5 years and Wirtschaftsinformatik (business informatics) taking 4.5 years. In 2001, triggered by the Bologna declaration of the European Union, the two studies were replaced by 6 bachelor 1 and 9 master 2 degrees taking three and two years, respectively.<marker type="block"/> Formal Methods @ TU Wien The change of the curricula had a significant impact on the kind and amount of formal methods taught. First, specialisation and diversification now start as early as the second year; the required room was partially gained by reducing mathematics, theory and logic by one third (<xref ref-type="table" rid="T1" id="11" class="deo:Reference">Table 1</xref>). Second, traditional theory and logic was compressed into a single course; a second course is now focussed on applied logics along the lines of the book Logic in Computer Science by Huth and Ryan [<xref ref-type="bibr" rid="R7" id="12" class="deo:Reference">7</xref>] (augmented by recent topics like description logics and the semantic web). Apart from these compulsory courses there are only a few elective ones dealing with formal methods, most notably Computer Aided Verification focusing on model checking [<xref ref-type="bibr" rid="R2" id="13" class="deo:Reference">2</xref>], and Formal Verification of Software concentrating on Hoare calculus and dynamic logic; each has 6.0 Ects and consists of a lecture and a lab. In summary, the change led to 1 Business Informatics, Computer Engineering, Data Engineering &amp; Statistics, Media Informatics, Medical Informatics, Software &amp; Information Engineering 2 Business Engineering and Informatics ( Wirtschaftsingenieurwesen Informatik ), Business Informatics, Computer Engineering, Computer Graphics &amp; Digital Image Processing, Computational Intelligence, Information &amp; Knowledge Management, Media Informatics, Medical Informatics, Software Engineering &amp; Internet Computing 3 Ects = ECTS credit, where ECTS means European Credit Transfer System; 1 year corresponds to 60 Ects, 1 Ects equals 25 working hours.<marker type="page" number="2"/><marker type="block"/> a modernisation concerning theory and logic, but at the same time reduced mathematics to a minimum, leaving hardly any room to train the ability to understand and construct rigorous proofs.</region>
      <region class="DoCO:TableBox" id="Tx8">
        <content>
          <table class="DoCO:Table" number="1" page="1">
            <thead class="table"/>
            <tbody>
              <tr class="table">
                <td class="table"></td>
                <td class="table"></td>
                <td class="table"> Duration</td>
                <td class="table"> Math &amp; Statistics</td>
                <td class="table"> Theory &amp; Logic</td>
              </tr>
              <tr class="table">
                <td class="table"> Diploma study (up</td>
                <td class="table"> to 2001)</td>
                <td class="table"> 5 yrs/324 Ects 3</td>
                <td class="table"> 34.5 Ects (10.6%)</td>
                <td class="table"> 19.5 Ects (6.0%)</td>
              </tr>
              <tr class="table">
                <td class="table"> Bac.+Mast. (2001</td>
                <td class="table"> onwards)</td>
                <td class="table"> 3+2 yrs/300 Ects</td>
                <td class="table"> 21.0 Ects (7.0%)</td>
                <td class="table"> 12.0 Ects (4.0%)</td>
              </tr>
            </tbody>
          </table>
        </content>
        <region class="TableInfo" id="9" confidence="possible" page="1" column="1">Duration Math &amp; Statistics Theory &amp; Logic Diploma study (up to 2001) 5 yrs/324 Ects 3 34.5 Ects (10.6%) 19.5 Ects (6.0%) Bac.+Mast. (2001 onwards) 3+2 yrs/300 Ects 21.0 Ects (7.0%) 12.0 Ects (4.0%)</region>
        <caption class="deo:Caption" id="10" page="1" column="1">TABLE 1: Comparison of old and new CS curricula</caption>
      </region>
      <outsider class="DoCO:TextBox" type="footer" id="15" page="1" column="1">Teaching Formal Methods: Practice and Experience, 15 December 2006</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="16" page="1" column="1">1</outsider>
      <outsider class="DoCO:TextBox" type="header" id="17" page="2" column="1">Automated Tools for Teaching Formal Software Verification</outsider>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="19" page="2" column="1">2. FORMAL VERIFICATION OF SOFTWARE</h1>
        <region class="DoCO:TextChunk" id="46" page="2" column="1">The course Formal Verification of Software has been taught for two decades, but until recently only theoretically in the style of Dijkstra [ <xref ref-type="bibr" rid="R4" id="20" class="deo:Reference">4</xref>] and Gries [<xref ref-type="bibr" rid="R6" id="21" class="deo:Reference">6</xref>]. The slow but steady progress in the automation of program verification led us in 2003 to evaluate several tools in order to select one for use in the course. [<xref ref-type="bibr" rid="R5" id="22" class="deo:Reference">5</xref>] All of them can be used free of charge for academic and teaching purposes.<marker type="block"/> Frege Program Prover (FPP) [<xref ref-type="bibr" rid="R9" id="24" class="deo:Reference">9</xref>] FPP supports a small subset of Ada consisting of typical imperative program structures like loop-, case- and if-statements. The only data types available are integer and boolean. The language for specifying pre- and post-conditions is rather restricted. E.g., function definitions, recursive specifications and structured data types like arrays are not supported. FPP is able to verify simple programs and to compute their weakest pre-conditions. The prover, Analytica, acts as a black box signalling either the validity of a formula or returning unprovable sub-formulas; formal proofs are not supplied.<marker type="block"/> Due to its simplicity and its web interface, FPP is easy to learn and use. It seems to be a valuable tool for illustrating the ideas of formal program verification in basic courses. It is not suitable, however, for advanced courses on the subject or for real world applications. Neither is it able to deal with standard examples from Dijkstra and Gries involving arrays, nor does it support object- oriented features. Moreover, the terse output in pure ASCII makes it difficult to trace errors.<marker type="block"/> The KeY system [<xref ref-type="bibr" rid="R1" id="27" class="deo:Reference">1</xref>] The KeY system supports a subset of Java known as JavaCard, which is increasingly used for mobile and embedded devices. Verification is based on dynamic logic, a generalization of the Hoare calculus. The system cooperates with C ASE tools like Together Control Center , Solo or Architect . Objects and constraints can be specified using U ML and O CL .<marker type="block"/> Java, U ML , O CL , and C ASE tools are familiar to software engineers and students alike, which helps in getting started. Nevertheless, KeY cannot be recommended for such target groups at present: the interactive prover and its interaction with the user are in their infancy and are inadequate for serious use. Moreover, O CL is not expressive enough to specify complex program behaviour. Considering that KeY is still in alpha stage, it seems to be worthwhile to reevaluate the system in a few years in order to see whether it lives up to expectations.<marker type="block"/> Perfect Developer (PD) [<xref ref-type="bibr" rid="R3" id="30" class="deo:Reference">3</xref>] PD consists of a full-fledged object-oriented programming language called Perfect, of a powerful automated theorem prover, and of a code generator translating programs from Perfect to Java, Ada, and C++. A rich collection of built-in data types, classes, functions and theories allows the user to write concise specifications on a fairly abstract level. U ML class diagrams can be imported to generate the skeleton of classes automatically.<marker type="block"/> PD is a technically mature product that is ready for use in a regular development process. However, software engineers will need some time to become sufficiently aquainted with the many features of Perfect. Moreover, at least a basic knowledge of formal logic is required to be able to interpret the prover output and to use it for detecting errors in the specification or in the program. Perfect Developer is also well suited for teaching advanced courses on formal program verification. Usually there will not be enough time to cover all features of Perfect. Therefore a tutorial is required that concentrates on just those elements of the language that are necessary to implement and verify instructive examples like those in [<xref ref-type="bibr" rid="R6" id="32" class="deo:Reference">6</xref>].<marker type="block"/> PD is that tool of the four that comes closest to the ideal of automated program verification. But there are still some shortcomings. One is that the prover currently does not support induction. Consequently certain recursive functions and loops cannot be verified by the system. E.g., if one specifies multiplication recursively by iterating over the first argument but decides to implement it as a loop over the second argument, the loop invariant cannot be proved automatically since the proof involves induction; in such a case the user has to provide a lemma whose correctness<marker type="page" number="3"/><marker type="block"/> has to be verified outside the system. In practice this limitation is not as severe as it seems: The principle of proof-by-contract generates dozens of proof obligations even for toy programs, most of which are rather trivial and therefore are verified by PD’s prover automatically; the user can focus his attention on a few unproven assertions resulting from the core algorithms. Another weakness, at least from an academic point of view, is the lack of information concerning the internals of the prover. Ideally the logical rules used in correctness proofs should be open for inspection such that independent proof checkers can establish additional trust in the system. Finally, the prover does not support all specification methods equally well: It may happen that a natural and obvious specification of an algorithm leads to unprovable assertions, whereas a less obvious one using different builtins succeeds. Ideally, the user should be able to formalise the informal specification of a problem as directly as possible without paying attention to the prover.<marker type="block"/> Prototype Verification System (PVS) [<xref ref-type="bibr" rid="R8" id="42" class="deo:Reference">8</xref>] PVS is a powerful interactive theorem prover, which has been used for various real world applications. In contrast to the other systems it does not generate verified program code, but it proves properties of algorithms. The prover is versatile and offers many possibilities. It is automatic to a certain degree, but usually requires frequent user interactions.<marker type="block"/> Due to its many basic inference rules and tactics it takes a long learning phase to become familiar with the system. Morover, users of PVS need a firm background in mathematics and formal logic to guide the prover. In our opinion typical software engineers and average students of computer science will have a hard time using PVS. Graduate or Ph.D. students might have a chance, provided they are given enough time. For courses with just a few hours per week in the lab PVS seems to be too complex.<marker type="block"/>  <xref ref-type="table" rid="T2" id="45" class="deo:Reference">Table 2</xref> compares the four selected tools FPP, KeY, PD, and PVS regarding formal background in logic and application area. Based on this evaluation we decided to use Perfect Developer for our course in formal software verification.</region>
        <outsider class="DoCO:TextBox" type="footer" id="35" page="2" column="1">Teaching Formal Methods: Practice and Experience, 15 December 2006</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="36" page="2" column="1">2</outsider>
        <outsider class="DoCO:TextBox" type="header" id="37" page="3" column="1">Automated Tools for Teaching Formal Software Verification</outsider>
        <region class="DoCO:TableBox" id="Tx38">
          <content>
            <h1 class="table"> Industrial applications</h1>
            <table class="DoCO:Table" number="2" page="3">
              <thead class="table">
                <tr class="table">
                  <th class="table"></th>
                  <th class="table"> 6</th>
                  <th class="table"> PVS</th>
                </tr>
              </thead>
              <tbody>
                <tr class="table.strange">
                  <td class="table.strange"></td>
                  <td class="table.strange"></td>
                  <td class="table.strange"> PD KeY</td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"> Toy/Academic</td>
                  <td class="table.strange"> system FPP</td>
                  <td class="table.strange"></td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"></td>
                  <td class="table.strange"></td>
                  <td class="table.strange"> -</td>
                </tr>
                <tr class="table">
                  <td class="table"> Little</td>
                  <td class="table"> formal training</td>
                  <td class="table"> Strong background in logic required</td>
                </tr>
              </tbody>
            </table>
          </content>
          <region class="TableInfo" id="39" confidence="possible" page="3" column="1">Industrial applications 6 PVS PD KeY FPP Toy/Academic system Little formal training Strong background in logic required</region>
          <caption class="deo:Caption" id="40" page="3" column="1">TABLE 2: Comparison of FPP, KeY, PD and PVS</caption>
        </region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="47" page="3" column="1">3. OBSERVATIONS</h1>
        <region class="DoCO:TextChunk" id="49" page="3" column="1">The first assignment in the lab on formal program verification was to install Perfect Developer under Windows or Linux, and to get aquainted with the system by working through the online tutorial offered on the web site of Escher Technologies , the company behind PD. As a check we asked the students to write a report listing the errors in the tutorial; there are a few, which can be easily corrected provided the assignment is taken seriously. This assignment posed no difficulties for the students; the errors found varied between zero and several dozens. <marker type="block"/> The second, third and fourth assignment consisted of selecting two problems from a list of six easy and one problem from a list of four harder problems (see the appendix for a short description of the problems). The students had to write a formal specification in Perfect, refine it to an executable function and verify the correctness. The algorithms were required to run in time O ( n ) or O ( n log n ) , respectively. The students had to write a report including their errors, solutions, and the time they had spent on the problem. In case they were not able to get PD to verify their solution completely</region>
        <outsider class="DoCO:TextBox" type="footer" id="50" page="3" column="1">Teaching Formal Methods: Practice and Experience, 15 December 2006</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="51" page="3" column="1">3</outsider>
        <outsider class="DoCO:TextBox" type="header" id="52" page="4" column="1">Automated Tools for Teaching Formal Software Verification</outsider>
        <region class="DoCO:TextChunk" id="53" confidence="possible" page="4" column="1">Informatics: 0–15 15–30 30–45 Business Informatics: 15–30 45–60 60–75</region>
        <region class="DoCO:TableBox" id="T3">
          <caption class="deo:Caption" id="54" page="4" column="1">TABLE 3: Time needed for assignments (hours)</caption>
          <content>
            <table class="DoCO:Table" number="4" page="4">
              <thead class="table">
                <tr class="table">
                  <th class="table"> Informatics:</th>
                  <th class="table"> 1</th>
                  <th class="table"> 2</th>
                  <th class="table"> 3 4</th>
                  <th class="table"> 5</th>
                </tr>
                <tr class="table">
                  <th class="table"> Business Informatics: 1</th>
                  <th class="table"> 2</th>
                  <th class="table"> 3</th>
                  <th class="table"> 4</th>
                  <th class="table"> 5</th>
                </tr>
              </thead>
              <tbody/>
            </table>
          </content>
          <region class="TableInfo" id="55" confidence="possible" page="4" column="1">Informatics: 1 2 3 4 5 Business Informatics: 1 2 3 4 5</region>
        </region>
        <region class="DoCO:TableBox" id="T4">
          <caption class="deo:Caption" id="56" page="4" column="1">TABLE 4: Final grades (1=excellent, 5=failed)</caption>
        </region>
        <region class="DoCO:TextChunk" id="60" page="4" column="1">they had to provide formal arguments explaining why their specification and implementation was correct nevertheless. <marker type="block"/> Not quite surprisingly, the gathered data indicate that students with a knowledge of mathematics and some experience in software engineering performed significantly better than students with less background in these areas. This observation is confirmed statistically by separating the students into two groups: those doing a bachelor or master program in informatics, and those doing a bachelor or master in business informatics. In the curriculum valid until 2006, the latter had a few hours less on math, algorithmics and programming than their colleagues in one of the studies in informatics. <xref ref-type="table" rid="T3" id="58" class="deo:Reference">Table 3</xref> and <xref ref-type="table" rid="T4" id="59" class="deo:Reference">Table 4</xref> show that on average students in informatics needed less time and got better grades than their colleagues in business informatics.</region>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="61" page="4" column="1">4. CONCLUSION</h1>
        <region class="DoCO:TextChunk" id="62" page="4" column="1">Using automated tools for teaching formal methods helps to convince students that formal methods work. Nevertheless, formal methods still require the ability to think in an abstract and declarative manner and to analyse formal proofs. According to our experience a thorough education in mathematics and logic as well as a training in different programming paradigms forms a sound basis.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="63" page="4" column="1">REFERENCES</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="64" page="4" column="1">[1] Wolfgang Ahrendt, Thomas Baar, Bernhard Beckert, Richard Bubel, Martin Giese, Reiner H ahnle,  ̈ Wolfram Menzel, Wojciech Mostowski, Andreas Roth, Steffen Schlager, and Peter H. Schmitt. The KeY tool. Software and System Modeling , 4(1):32–54, 2005.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="65" page="4" column="1">[2] Edmund M. Clarke, Orna Grumberg, and Doron A. Peled. Model Checking . MIT Press, 2000.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="66" page="4" column="1">[3] David Crocker. Perfect Developer: A tool for Object-Oriented Formal Specification and Refinement. Tools Exhibition Notes at Formal Methods Europe , 2003.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="67" page="4" column="1">[4] Edsger Dijkstra. A Discipline of Programming . Prentice Hall, 1976.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="68" page="4" column="1">[5] Ingo Feinerer. Formal program verification: A comparison of selected tools and their theoretical foundations. Master’s thesis, Technische Universit at  ̈ Wien, Vienna, Austria, January 2005.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="69" page="4" column="1">[6] David Gries. The Science of Programming . Springer, 1987.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="70" page="4" column="1">[7] Michael R.A. Huth and Mark D. Ryan. Logic in Computer Science – modelling and reasoning about systems . Cambridge University Press, 2003.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="71" page="4" column="1">[8] Sam Owre, John Rushby, and Natarajan Shankar. PVS: A prototype verification system. In Deepak Kapur, editor, 11th International Conference on Automated Deduction (CADE) , volume 607 of Lecture Notes in Artificial Intelligence , pages 748–752, Saratoga, NY, June 1992. Springer-Verlag.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="72" page="4" column="1">[9] J urgen  ̈ Winkler. The Frege Program Prover. 42. Internationales Wissenschaftliches Kolloquium, Technische Universit at  ̈ Ilmenau , pages 116–121, 1997.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="footer" id="73" page="4" column="1">Teaching Formal Methods: Practice and Experience, 15 December 2006</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="74" page="4" column="1">4</outsider>
        <outsider class="DoCO:TextBox" type="header" id="75" page="5" column="1">Automated Tools for Teaching Formal Software Verification</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="76" page="5" column="1">APPENDIX: PROBLEMS TO BE VERIFIED WITH PERFECT DEVELOPER</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="77" confidence="possible" page="5" column="1">Easy Problems</h2>
          <region class="DoCO:TextChunk" id="78" confidence="possible" page="5" column="1">Cardinality of intersection: Given two sorted lists of integers, compute the cardinality of their intersection in linear time. Merging of lists: Given two sorted lists of integers, compute a sorted list containing the elements of the original lists in linear time. Minimal distance: Given two sorted lists of integers, A and B , compute the minimum of abs( A [ i ] , B [ i ]) for all i, j in linear time. Longest plateau: Given a sorted list of integers, determine the length of the longest sublist of identical elements in linear time. Index of maximum: Given a list of integers, determine the index of a maximal element in linear time. Sortedness: Check in linear time whether a list of integers is sorted.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="79" confidence="possible" page="5" column="1">Slightly harder problems</h2>
          <region class="DoCO:TextChunk" id="80" confidence="possible" page="5" column="1">Count inversions: Given a list, A , of n integers, count the pairs ( i, j ) of indices satisfying i &lt; j and A [ i ] &gt; A [ j ] in time O ( n log n ) . Count Boolean inversions: Given a list, A , of Booleans, count the pairs ( i, j ) of indices satisfying i &lt; j , A [ i ] and ¬ A [ j ] , in linear time. Length of longest monotone sublist: Given a list of integers, compute the length of the longest non-increasing or non-decreasing sublist in linear time. Length of longest left-minimal sublist: Given a list of integers, compute in linear time the length of the longest sublist, where the first element of the sublist is minimal among the elements of the sublist.</region>
          <outsider class="DoCO:TextBox" type="footer" id="81" page="5" column="1">Teaching Formal Methods: Practice and Experience, 15 December 2006</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="82" page="5" column="1">5</outsider>
        </section>
      </section>
    </body>
  </article>
</pdfx>
