<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  SYSTEM "http://dtd.nlm.nih.gov/archiving/3.0/archivearticle3.dtd">
<article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:xlink="http://www.w3.org/1999/xlink">
   <front>
      <journal-meta>
         <journal-id/>
         <journal-title-group>
            <journal-title/>
         </journal-title-group>
         <issn/>
         <publisher>
            <publisher-name/>
         </publisher>
      </journal-meta>
      <article-meta>
         <title-group>
            <article-title>Chase Termination for Guarded Existential Rules</article-title>
         </title-group>
         <supplement>
            <p>Marco Calautti 1 , Georg Gottlob 2 , and Andreas Pieris 3 1 DIMES, University of Calabria, Italy <email>calautti@dimes.unical.it</email> 2 Department of Computer Science, University of Oxford, UK <email>georg.gottlob@cs.ox.ac.uk</email> 3 Institute of Information Systems, Vienna University of Technology, Austria <email>pieris@dbai.tuwien.ac.at</email>
            </p>
         </supplement>
         <abstract>
            <sec>
               <p>The chase procedure is considered as one of the most fundamental algorithmic tools in database theory. It has been successfully applied to different database problems such as data exchange, and query answering and containment under constraints, to name a few. One of the central problems regarding the chase procedure is all-instance termination, that is, given a set of tuple-generating dependencies (TGDs) (a.k.a. existential rules), decide whether the chase under that set terminates, for every input database. It is well-known that this problem is undecidable, no matter which version of the chase we consider. The crucial question that comes up is whether existing restricted classes of TGDs, proposed in different contexts such as ontological reasoning, make the above problem decidable. In this work, we focus our attention on the oblivious and the semi-oblivious versions of the chase procedure, and we give a positive answer for classes of TGDs that are based on the notion of guardedness.</p>
            </sec>
         </abstract>
      </article-meta>
   </front>
   <body>
      <sec>
         <title>1 Introduction</title>
      </sec>
      <sec>
         <title>3 The Complexity of Chase Termination</title>
         <p>We focus on the class of guarded TGDs [<xref id="XR36" ref-type="bibr" rid="R2">2</xref>], and two key subclasses of it, namely simple linear and linear TGDs [<xref id="XR37" ref-type="bibr" rid="R3">3</xref>], and we investigate the complexity of the (semi-)oblivious chase termination problem. Recall that linear TGDs are TGDs with just one atom in the body, while simple linear TGDs forbid the repetition of variables in the body. Notice that, despite their simplicity, simple linear TGDs are powerful enough for capturing prominent database dependencies, and in particular inclusion dependencies, as well as key description logics such as DL-Lite. In the sequel, we denote by G the class of guarded TGDs, which is defined as the family of all possible sets of guarded TGDs. Analogously, we denote by SL and L the classes of simple linear and linear TGDs, respectively; clearly, SL ⊂ L ⊂ G . Let us first consider the less expressive classes.</p>
         <p>By exploiting syntactic conditions that ensure the termination of each (semi-)oblivious chase sequence on all databases, we syntactically characterize the classes ( CT ⋆ ∩ SL ) and ( CT ⋆ ∩ L ) , where ⋆ ∈ { o , so } . We rely on weak-acyclicity [<xref id="XR39" ref-type="bibr" rid="R5">5</xref>] and rich-acyclicity [<xref id="XR40" ref-type="bibr" rid="R11">11</xref>]. Both weak- and rich-acyclicity are defined by posing an acyclicity condition on a graph, which encodes how terms are propagated among the positions of the underlying schema during the chase. In fact, weak-acyclicity forbids the existence of dangerous cycles (which involve the generation of new null values) in the dependency graph [<xref id="XR41" ref-type="bibr" rid="R5">5</xref>], while rich-acyclicity pose the same condition on the so-called extended dependency graph [<xref id="XR42" ref-type="bibr" rid="R11">11</xref>]. Let WA and RA be the classes of weakly- and richly-acyclic TGDs, respectively; notice that RA ⊂ WA . For simple linear TGDs we show that:</p>
         <p>so ∩</p>
         <sec>
            <title>3.1 Linearity By exploiting syntactic conditions that ensure the termination of each (semi-)oblivious chase sequence on all databases, we syntactically characterize the classes ( CT ⋆ ∩ SL ) and ( CT ⋆ ∩ L ) , where ⋆ ∈ { o , so } . We rely on weak-acyclicity [5] and rich-acyclicity [11]. Both weak- and rich-acyclicity are defined by posing an acyclicity condition on a graph, which encodes how terms are propagated among the positions of the underlying schema during the chase. In fact, weak-acyclicity forbids the existence of dangerous cycles (which involve the generation of new null values) in the dependency graph [5], while rich-acyclicity pose the same condition on the so-called extended dependency graph [11]. Let WA and RA be the classes of weakly- and richly-acyclic TGDs, respectively; notice that RA ⊂ WA . For simple linear TGDs we show that: Theorem 1. ( CT o ∩ SL ) = ( RA ∩ SL ) and ( CT SL ) = ( WA ∩ SL ) . ∈ ∈</title>
            <p>o</p>
            <p>In simple words, the above theorem states that, given a set Σ SL : Σ CT iff Σ is richly-acyclic, and Σ ∈ CT so iff Σ is weakly-acyclic. This result is established by showing that a dangerous cycle in the extended dependency graph (resp., dependency graph) necessarily gives rise to a non-terminating o -chase (resp., so -chase) sequence. Let us now focus on (non-simple) linear TGDs. It is possible to show, by exhibiting a counterexample, that a dangerous cycle does not necessarily correspond to an infinite chase derivation. Thus, rich- and weak-acyclicity are not powerful enough for syntactically characterize the fragment of linear TGDs that guarantees the termination of the oblivious and semi-oblivious chase, respectively. Interestingly, it is possible to extend rich- and weak-acyclicity, focussing on linear TGDs, in such a way that the  The above syntactic characterizations, apart from being interesting in their own right, allow us to obtain optimal upper bounds for the ⋆ -chase termination problem for ( S ) L — we simply need to analyze the complexity of deciding whether a set of (simple) linear TGDs enjoys the above acyclicity-based conditions, which can be formulated as a reachability problem on a graph. In particular, we obtain the following results:</p>
            <p>and LCriticalWA , respectively. We show that: Theorem 2. ( CT o ∩ L ) = LCriticalRA and ( CT so ∩ L ) = LCriticalWA .</p>
            <p>Theorem 3. Consider a set Σ of TGDs. The problem of deciding whether Σ ∈ CT ⋆ , where ⋆ ∈ { o , so } , is 1. NL -complete, even for unary and binary predicates, if Σ ∈ SL ; and 2. PSPACE -complete, and NL -complete for predicates of bounded arity, if Σ ∈ L .</p>
            <p>For the hardness results, a generic technique, called the looping operator , is proposed, which allows us to obtain lower bounds for the chase termination problem in a uniform way. In fact, the goal of the looping operator is to provide a generic reduction from propositional atom entailment to the complement of chase termination.</p>
         </sec>
         <sec>
            <title>3.2 Guardedness</title>
            <p>We proceed to investigate the (semi-)oblivious chase termination problem for guarded TGDs. Although there is no way (at least no obvious one) to syntactically characterize the classes ( CT ⋆ ∩ G ) , where ⋆ ∈ { o , so } , via rich- and weak-acyclicity, as we did for (simple) linear TGDs, it is possible to show that the problem of recognizing the above classes is decidable. For technical reasons, we focus on standard databases , that is, databases that have two constants, let say 0 and 1 , that are available via the unary predicates 0( · ) and 1( · ) , respectively. In particular, we show the following:</p>
            <p>Theorem 4. Consider a set Σ ∈ G . The problem of deciding whether Σ ∈ CT ⋆ , where ⋆ ∈ { o , so } , focussing on standard databases, is 2 EXPTIME -complete, and EXPTIME complete for predicates of bounded arity.</p>
            <p>The upper bounds are obtained by exhibiting an alternating algorithm that runs in exponential space, in general, and in polynomial space in case of predicates of bounded arity. The lower bounds are obtained by reductions from the acceptance problem of alternating exponential (resp., polynomial) space clocked Turing machines, i.e., Turing machines equipped with a counter. These reductions are obtained by modifying sig- nificantly existing reductions for the problem of propositional atom entailment under guarded TGDs, and then exploiting the looping operator mentioned above. The fact that the database is standard, is crucial for establishing the above lower bounds; the upper bounds hold even for non-standard databases.  Our next step is to perform similar analysis focussing on the restricted version of the chase. We already have some preliminary positive results. In particular, if we focus on single-head linear TGDs, where each predicate appears in the head of at most one TGD, then we can syntactically characterize, via a careful extension of weak-acyclicity, the fragment that guarantees the termination of the restricted chase, and obtain a polynomial time upper bound. We are currently working towards the full settlement of the problem. Acknowledgements. M. Calautti was supported by the European Commission, European Social Fund and Region Calabria. G. Gottlob was supported by the EPSRC Programme Grant EP/M025268/ “VADA: Value Added Data Systems – Principles and Architecture”, and the Grant ERC-POC-2014 Nr. 641222 “ExtraLytics: Big Data for Real Estate”. A. Pieris was supported by the Austrian Science Fund (FWF), projects P25207-N23 and Y698, and Vienna Science and Technology Fund (WWTF), project ICT12-015.</p>
         </sec>
      </sec>
      <sec>
         <title>References</title>
      </sec>
   </body>
   <back>
      <ref-list>
         <ref id="R1">
            <mixed-citation>1. Calautti, M., Gottlob, G., Pieris, A.: Chase termination for guarded existential rules. In: PODS (2015), to appear</mixed-citation>
         </ref>
         <ref id="R2">
            <mixed-citation>2. Calı, A., Gottlob, G., Kifer, M.: Taming the infinite chase: Query answering under expressive relational constraints. J. Artif. Intell. Res. 48, 115–174 (2013)</mixed-citation>
         </ref>
         <ref id="R3">
            <mixed-citation>3. Calı, A., Gottlob, G., Lukasiewicz, T.: A general Datalog-based framework for tractable query answering over ontologies. J. Web Sem. 14, 57–83 (2012)</mixed-citation>
         </ref>
         <ref id="R4">
            <mixed-citation>4. Deutsch, A., Nash, A., Remmel, J.B.: The chase revisisted. In: PODS. pp. 149–158 (2008)</mixed-citation>
         </ref>
         <ref id="R5">
            <mixed-citation>5. Fagin, R., Kolaitis, P.G., Miller, R.J., Popa, L.: Data exchange: Semantics and query answering. Theor. Comput. Sci. 336(1), 89–124 (2005)</mixed-citation>
         </ref>
         <ref id="R6">
            <mixed-citation>6. Gogacz, T., Marcinkowski, J.: All-instances termination of chase is undecidable. In: ICALP. pp. 293–304 (2014)</mixed-citation>
         </ref>
         <ref id="R7">
            <mixed-citation>7. Grahne, G., Onet, A.: Anatomy of the chase. CoRR abs/1303.6682 (2013), <ext-link ext-link-type="uri" href="http://arxiv.org/abs/1303.6682">http://arxiv.org/abs/1303.6682</ext-link>
            </mixed-citation>
         </ref>
         <ref id="R8">
            <mixed-citation>8. Grau, B.C., Horrocks, I., Krötzsch, M., Kupke, C., Magka, D., Motik, B., Wang, Z.: Acyclic- ity conditions and their application to query answering in description logics. In: KR (2012)</mixed-citation>
         </ref>
         <ref id="R9">
            <mixed-citation>9. Greco, S., Molinaro, C., Spezzano, F.: Incomplete Data and Data Dependencies in Relational Databases. Morgan &amp; Claypool Publishers (2012)</mixed-citation>
         </ref>
         <ref id="R10">
            <mixed-citation>10. Greco, S., Spezzano, F., Trubitsyna, I.: Stratification criteria and rewriting techniques for checking chase termination. PVLDB 4(11), 1158–1168 (2011)</mixed-citation>
         </ref>
         <ref id="R11">
            <mixed-citation>11. Hernich, A., Schweikardt, N.: CWA-solutions for data exchange settings with target dependencies. In: PODS. pp. 113–122 (2007)</mixed-citation>
         </ref>
         <ref id="R12">
            <mixed-citation>12. Marnette, B.: Generalized schema-mappings: From termination to tractability. In: PODS. pp. 13–22 (2009)</mixed-citation>
         </ref>
         <ref id="R13">
            <mixed-citation>13. Meier, M., Schmidt, M., Lausen, G.: On chase termination beyond stratification. PVLDB 2(1), 970–981 (2009)</mixed-citation>
         </ref>
      </ref-list>
   </back>
</article>