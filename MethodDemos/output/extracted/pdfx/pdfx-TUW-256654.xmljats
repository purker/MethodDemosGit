<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  SYSTEM "http://dtd.nlm.nih.gov/archiving/3.0/archivearticle3.dtd">
<article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:xlink="http://www.w3.org/1999/xlink">
   <front>
      <journal-meta>
         <journal-id/>
         <journal-title-group>
            <journal-title/>
         </journal-title-group>
         <issn/>
         <publisher>
            <publisher-name/>
         </publisher>
      </journal-meta>
      <article-meta>
         <title-group>
            <article-title>M. Anton Ertl ∗ TU Wien</article-title>
         </title-group>
         <supplement>
            <p>Sections</p>
         </supplement>
         <abstract>
            <sec>
               <p>A section is a contiguous region of memory, to which data or code can be appended (like the Forth dictionary). Assembly languages and linkers have supported multiple sections for a long time. This paper describes the benefits of supporting multiple sections in Forth, interfaces and implementation tech- niques.</p>
            </sec>
         </abstract>
      </article-meta>
   </front>
   <body>
      <sec>
         <title>1 Introduction</title>
      </sec>
      <sec>
         <title>2 Uses</title>
         <sec>
            <title>2.1 Nested structures</title>
         </sec>
         <sec>
            <title>2.2 Separate code and data</title>
            <p>Most Forth systems still put code and data in the dictionary in an interleaved way. Since the Pen- tium (1993) and its separate instruction and data caches, this interleaving has been a performance problem on Intel and AMD CPUs (e.g., ). Forth systems have tried to mitigate this problem by at least not putting code and data in the same cache line (by inserting appropriate padding); e.g., VFX aligns data to 32-byte boundaries, but apparently 64-byte alignment is necessary on recent Intel CPUs to achieve the desired effect. And in some cases an important padding is missing, resulting in 350–500 cycles per iteration in VFX and SwiftForth:</p>
            <p>0 value x 2 I use VFX for the performance results in this paper, because it is a high-performance system, where one would expect good performance also for the micro-benchmarks I present.</p>
            <p>: foo 10000000 0 do 1 x +! loop ; here to x 0 , foo</p>
            <p>With sections, the data can just stay in the ordinary dictionary section, and the code can have a separate section (or a stack of them, for quotations), thus separating code and data for good. Moreover, systems can get rid of all the padding they insert at the moment to work around this problem.</p>
         </sec>
         <sec>
            <title>2.3 Further uses</title>
            <p>The uses above are not an exhaustive list. When I presented sections to other Gforth developers, they came up with uses I had not thought of during de- velopment (e.g., simplifying the locals implementation).</p>
         </sec>
      </sec>
      <sec>
         <title>3 Progamming interface</title>
         <p>In the following, “switching a section” means that the dictionary pointer (what here reports, and where allot allocates) is now the dictionary pointer of the switched-to section. The words for working with sections are:</p>
         <p>.sections ( -- ) display all sections next-section ( -- ) switch the current section to the next section in the stack, creating it if necessary previous-section ( -- ) switch the current section to previous section (the next section still exists afterwards). extra-section ( size "name" -- ) create a named section stack name . name execution: ( xt -- ) switch the current section to the first section of name if there is no outer call to name , or the next section if there is; execute xt , and switch the current section back on leaving name .</p>
         <p>For multi-tasking, the dictionary and the named section stacks should have per-task instances that are instantiated on-demand. Currently the section implementation in Gforth only supports the dictionary as a section stack, named sections without stack, and no proper han- dling of per-task section stacks, yet.</p>
      </sec>
      <sec>
         <title>4 Implementation</title>
         <p>The implementation of sections for use within a session is pretty straightforward: Just a data structure with start, end, and section-dp per section,  and ways to manage named sections and a stack of sections. Things get more interesting when it comes to implementing savesystem . There are two basic options:</p>
         <p>• Keep all the sections, and preserve them into the next session. • Collapse all the sections into one (the dictionary), and start the next session with just the dictionary, and with empty named sections.</p>
         <p>The current implementation in Gforth takes the collapsing approach. One advantage is that the loader (which does not know about sections) does not need to be changed. Traditionally, Gforth creates a relocatable image by running Gforth twice and doing the same things, and finally saving one non-relocatable image per run; the non-relocatable images are for different addresses, and by comparing them, we can tell if a cell is an address (then they differ by the difference in image start addresses), or something else (then they do not differ); if they differ, but by a different amount (e.g., because the cell contains the address of an allocate d piece of memory), the process out- puts a warning. With sections, this process had to be enhanced as follows: When saving an image, first the dictionary is written, then the other sections, and sections meta-data last. The sections meta-data contains the length and the original start address of each section, and also allows us to determine where in the non-relocatable image the sections are. If two cells differ, the comparison program looks for each image, whether the value of the cell, interpreted as address points into one of the sections, and com- putes the offset into the collapsed image from that; if, for both images, this gives the same offset o , then the cell is a relocatable address, with value image- start + o , and that’s what the comparator stores in the relocatable image. I.e., in the relocatable image, the original section structure is no longer present. Of course, that is not the only option. E.g., a system without relocatable images could just save each section as ELF or COFF section with a fixed virtual start address. The OS loader would then load all the sections where they belong (untested).</p>
      </sec>
      <sec>
         <title>5 Conclusion</title>
         <p>Supporting multiple sections in a Forth system pro- vides a number of benefits. Forth systems have used workarounds to deal with the absence of sections, but these workarounds have a cost both in complex- ity and sometimes also in performance that can be eliminated by adding sections.  The interface for working with sections is simple, consisting of just a few words. The implementation is not that complex, either. Dealing with sections across savesystem does take some additional effort, however.</p>
      </sec>
      <sec>
         <title>References</title>
      </sec>
   </body>
   <back>
      <ref-list>
         <ref id="R1">
            <mixed-citation>[Ert16] M. Anton Ertl. Recognizers: Arguments and design decisions. In 32nd EuroForth Conference , 2016.</mixed-citation>
         </ref>
         <ref id="R2">
            <mixed-citation>[Lev00] Levine. Linkers and Loaders . Morgan Kaufmann, San Francisco, 2000.</mixed-citation>
         </ref>
      </ref-list>
   </back>
</article>