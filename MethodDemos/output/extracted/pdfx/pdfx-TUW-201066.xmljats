<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  SYSTEM "http://dtd.nlm.nih.gov/archiving/3.0/archivearticle3.dtd">
<article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:xlink="http://www.w3.org/1999/xlink">
   <front>
      <journal-meta>
         <journal-id/>
         <journal-title-group>
            <journal-title/>
         </journal-title-group>
         <issn/>
         <publisher>
            <publisher-name/>
         </publisher>
      </journal-meta>
      <article-meta>
         <title-group>
            <article-title>A Multilevel Heuristic for the Rooted Delay-Constrained Minimum Spanning Tree Problem</article-title>
         </title-group>
         <supplement>
            <p>Martin Berlakovich, Mario Ruthmair, and Günther R. Raidl Institute of Computer Graphics and Algorithms Vienna University of Technology, Vienna, Austria <email>berlmart@a1.net</email>, { ruthmair|raidl } @ads.tuwien.ac.at</p>
         </supplement>
      </article-meta>
   </front>
   <body>
      <sec>
         <title>1 Introduction</title>
      </sec>
      <sec>
         <title>2 Ranking Score</title>
         <p>In the above construction heuristics, the inclusion of an edge with low costs is not necessarily cheap regarding the overall solution. If an edge with low costs but high delay is used it can affect the further construction of the solution negatively. The high delay can force a heuristic to use very expensive edges with low delay in order to not violate the delay constraint. Such decisions sometimes create weak solutions corresponding to poor local optima which even good improvement procedures are not able to overcome. In an attempt to judge how promising an edge is, the ranking score is introduced. It is more likely that an edge with comparatively low costs and low delay is part of an optimal solution than an edge with very low costs but high delay. The ranking score score ( e ) describes the relative cost in relation to the delay of an edge e ∈ E in comparison to other edges:</p>
         <p>Here, r e c ∈ { 1 , . . . , | E |} and r e d ∈ { 1 , . . . , | E |} represent the cost and delay ranks of edge e , which are obtained by sorting the edges according to costs and delays, respectively. The ranking score of a vertex v ∈ V is the sum of the scores of all incident edges.</p>
      </sec>
      <sec>
         <title>3 Ranking-Based Multilevel Heuristic</title>
         <p>The ranking-based multilevel heuristic (RBMH) follows a multilevel strategy. In each level a number of vertices, including the source vertex, is selected as so-called supervertices. The remaining vertices are connected directly to these supervertices creating multiple subtrees in each level. The RBMH uses the ranking scores to determine which vertices and edges are used. Vertices with high ranking scores are supposed to have many or at least high quality incident edges. This makes them more promising to be the root of a subtree in an optimal solution. After choosing a set of these supervertices all remaining vertices are connected to them using the edges with the highest ranking scores satisfying the delay-constraints. The subtrees with supervertices as their roots represent the vertices in the next level. This process is continued  until only one supervertex, the source vertex, remains corresponding to a feasible solution for the original problem. The RBMH runs in O ( | E | log | E | + | V | 2 ) time.</p>
         <table-wrap id="T1">
            <caption>
               <p>Table 1. Comparison of RBMH and Kruskal-based heuristic, applied on a set of 30 random instances (complete graphs) with 500 and 1000 vertices ( B : delay-bound, c : average final objective values, σ : standard deviations, t [ s ]: runtime in seconds). Tests have been executed on Xeon E5540 processors with about 3 GB RAM per core.</p>
            </caption>
            <table>
               <thead>
                  <tr>
                     <td/>
                     <td> RBMH +</td>
                     <td> VND</td>
                     <td> Kruskal +</td>
                     <td> VND</td>
                     <td> RMBH +</td>
                     <td> VND</td>
                     <td> Kruskal +</td>
                     <td> VND</td>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td> B</td>
                     <td> c σ</td>
                     <td> t [ s ]</td>
                     <td> c σ</td>
                     <td> t [ s ]</td>
                     <td> c σ</td>
                     <td> t [ s ]</td>
                     <td> c σ</td>
                     <td> t [ s ]</td>
                  </tr>
                  <tr>
                     <td> 10</td>
                     <td> 4634 225</td>
                     <td> 1.99</td>
                     <td> 4557 205</td>
                     <td> 1.45</td>
                     <td> 5290 212</td>
                     <td> 9.33</td>
                     <td> 5171 215</td>
                     <td> 7.52</td>
                  </tr>
                  <tr>
                     <td> 30</td>
                     <td> 1530 85</td>
                     <td> 4.42</td>
                     <td> 1554 88</td>
                     <td> 4.37</td>
                     <td> 1871 71</td>
                     <td> 23.55</td>
                     <td> 1884 55</td>
                     <td> 20.04</td>
                  </tr>
                  <tr>
                     <td> 50</td>
                     <td> 1010 64</td>
                     <td> 7.99</td>
                     <td> 1042 56</td>
                     <td> 6.22</td>
                     <td> 1334 50</td>
                     <td> 33.81</td>
                     <td> 1373 44</td>
                     <td> 32.93</td>
                  </tr>
                  <tr>
                     <td> 75</td>
                     <td> 765 33</td>
                     <td> 10.90</td>
                     <td> 800 37</td>
                     <td> 9.44</td>
                     <td> 1113 32</td>
                     <td> 57.75</td>
                     <td> 1146 32</td>
                     <td> 51.42</td>
                  </tr>
                  <tr>
                     <td> 100</td>
                     <td> 642 28</td>
                     <td> 13.64</td>
                     <td> 687 44</td>
                     <td> 12.75</td>
                     <td> 1038 12</td>
                     <td> 75.79</td>
                     <td> 1070 32</td>
                     <td> 62.76</td>
                  </tr>
                  <tr>
                     <td> 150</td>
                     <td> 547 11</td>
                     <td> 16.71</td>
                     <td> 587 36</td>
                     <td> 12.25</td>
                     <td> 1005 4</td>
                     <td> 74.13</td>
                     <td> 1022 24</td>
                     <td> 57.96</td>
                  </tr>
                  <tr>
                     <td> 200</td>
                     <td> 522 6</td>
                     <td> 13.55</td>
                     <td> 545 27</td>
                     <td> 10.90</td>
                     <td> 1001 2</td>
                     <td> 74.58</td>
                     <td> 1008 16</td>
                     <td> 37.65</td>
                  </tr>
               </tbody>
            </table>
         </table-wrap>
      </sec>
      <sec>
         <title>4 Preliminary Results</title>
         <p>The RBMH has been tested on large random instances from [<xref id="XR23" ref-type="bibr" rid="R2">2</xref>] with complete graphs of 500 and 1000 vertices and the results are compared to those of the Kruskal-based heuristic. In all cases the variable neighborhood descent (VND) of [<xref id="XR24" ref-type="bibr" rid="R2">2</xref>] is applied to improve constructed solutions. The exemplary results listed in <xref id="XR25" ref-type="table" rid="T1">Table 1</xref> document that the RBMH combined with VND produces on average better results than the Kruskal-based heuristic using the same improvement with the exception of tight delay-bounds. The RBMH solution usually has higher costs as corresponding solutions of previous construction heuristics but at the same time offers higher potential for later improvement phases. Concerning the runtime the RBMH tests are slower since more time is spent in the improvement phase.</p>
      </sec>
      <sec>
         <title>References</title>
      </sec>
   </body>
   <back>
      <ref-list>
         <ref id="R1">
            <mixed-citation>1. Gouveia, L., Paias, A., Sharma, D.: Modeling and solving the rooted distance- constrained minimum spanning tree problem. Computers and Operations Research 35(2), 600–613 (2008)</mixed-citation>
         </ref>
         <ref id="R2">
            <mixed-citation>2. Ruthmair, M., Raidl, G.R.: A Kruskal-Based Heuristic for the Rooted Delay- Constrained Minimum Spanning Tree Problem. In: Moreno-D ́ ıaz, R., Pichler, F., Quesada-Arencibia, A. (eds.) EUROCAST 2009. LNCS, vol. 5717, pp. 713–720. Springer (2009)</mixed-citation>
         </ref>
         <ref id="R3">
            <mixed-citation>3. Salama, H.F., Reeves, D.S., Viniotis, Y.: The delay-constrained minimum spanning tree problem. In: Blum, C., Roli, A., Sampels, M. (eds.) Proceedings of the 2nd IEEE Symposium on Computers and Communications – ISCC ’97. pp. 699–703 (1997)</mixed-citation>
         </ref>
         <ref id="R4">
            <mixed-citation>4. Walshaw, C.: Multilevel refinement for combinatorial optimisation problems. Annals of Operations Research 131(1), 325–372 (2004)</mixed-citation>
         </ref>
      </ref-list>
   </back>
</article>