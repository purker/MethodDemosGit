<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  SYSTEM "http://dtd.nlm.nih.gov/archiving/3.0/archivearticle3.dtd">
<article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:xlink="http://www.w3.org/1999/xlink">
   <front>
      <journal-meta>
         <journal-id/>
         <journal-title-group>
            <journal-title/>
         </journal-title-group>
         <issn/>
         <publisher>
            <publisher-name/>
         </publisher>
      </journal-meta>
      <article-meta>
         <title-group>
            <article-title>Variable Neighborhood Search for Capacitated Connected Facility Location</article-title>
         </title-group>
         <supplement>
            <p>Markus Leitner and Günther R. Raidl Institute of Computer Graphics and Algorithms Vienna University of Technology, Vienna, Austria { leitner|raidl } @ads.tuwien.ac.at <ext-link ext-link-type="uri" href="http://www.ads.tuwien.ac.at">http://www.ads.tuwien.ac.at</ext-link>
            </p>
         </supplement>
      </article-meta>
   </front>
   <body>
      <sec>
         <title>1 Introduction</title>
      </sec>
      <sec>
         <title>2 Greedy Solution Construction</title>
      </sec>
      <sec>
         <title>3 General Variable Neighborhood Search</title>
         <p>In a variable neighborhood descent (VND) [<xref id="XR16" ref-type="bibr" rid="R4">4</xref>] we apply the following neighborhood structures to improve different aspects of a solution: Key-path improvement [<xref id="XR17" ref-type="bibr" rid="R5">5</xref>, <xref id="XR18" ref-type="bibr" rid="R1">1</xref>] to reduce the costs of the Steiner tree and customer swap [<xref id="XR19" ref-type="bibr" rid="R6">6</xref>, <xref id="XR20" ref-type="bibr" rid="R1">1</xref>] as well as single customer cyclic exchange [<xref id="XR21" ref-type="bibr" rid="R1">1</xref>] to optimize realized assignments. For improving the set of opened facilities, we consider a single facility swap neighborhood which adds or removes exactly one facility. A new opened facility is connected by an additional least-cost path while redundant edges are removed after closing a facility in case it has been a leaf of the Steiner tree. In order to escape from local optima, we embed the VND in a variable neighborhood search (VNS) performing shaking by swapping l = 2 , . . . , l max randomly chosen potential facility locations.</p>
      </sec>
      <sec>
         <title>4 Greedy Randomized Adaptive Search Procedure</title>
         <p>For comparison purposes we further embed above described VND into a greedy randomized adaptive search procedure (GRASP) [<xref id="XR24" ref-type="bibr" rid="R7">7</xref>] based on a randomized ver- sion of aforementioned constructive heuristic. Let δ min = argmin δ i { i ∈ F \ F S | δ i &gt; 1 } and δ max be the minimal and maximal scores among all relevant facilities, respectively. Instead of always adding the facility with maximal score, at each step we randomly choose one among the facilities i ∈ F \ F S for which δ max − β ( δ max − δ min ) ≤ δ i ≤ δ max holds.</p>
      </sec>
      <sec>
         <title>5 Preliminary Results</title>
         <p>We performed computational experiments using the the instances from [ <xref id="XR27" ref-type="bibr" rid="R1">1</xref>, <xref id="XR28" ref-type="bibr" rid="R2">2</xref>]. VNS is terminated after ten consecutive non-improving iterations of the out- ermost largest shaking move of size l max = min {| F | , 10 } . For GRASP we set α = 0 . 2 and generated 100 initial solutions and each experiment has been repeated 30 times on a single core of an Intel Core 2 Quad with 2.83GHz and 8GB RAM. For the VND, we apply the neighborhood structures in the same order as introduced above, but switch back to the first – i.e. the key-path – neighborhood after changing the set of opened facilities only. The single customer cyclic exchange neighborhood is searched using a next improvement strategy, while best improvement is applied for all other neighborhood structures. <xref id="XR29" ref-type="table" rid="T1">Table 1</xref> summarizes relative average objective values in percent, corresponding standard deviations, and relative median CPU times of the VNS and GRASP compared to the branch-and-cut-and-price approach (dBCP) from [<xref id="XR33" ref-type="bibr" rid="R2">2</xref>] which performed best among the previously presented methods. An absolute CPU-time limit of 7200 seconds has been applied to dBCP. We conclude, that both GRASP and VNS are able to compute solutions which are only slightly worse that those of dBCP, while usually needing much less CPU-time. For some instances with | F | = 200 and | C | = 75, which are particularly hard for dBCP, the obtained solutions are even significantly better than the ones obtained by dBCP within two hours. VNS seems to have small advantages over GRASP with respect to solution quality, while GRASP is usually slightly faster using the current set- tings. We are currently analyzing the usage of additional large neighborhood structures based on the mixed integer programming models from [<xref id="XR34" ref-type="bibr" rid="R2">2</xref>] and plan to include a more detailed computational study with additional results on further, larger instances in the full paper.</p>
         <table-wrap id="T1">
            <caption>
               <p>Table 1. Relative average solution values in %, corresponding standard deviations, and median CPU times. Instances have been grouped according to | F | and | C | . Each experiment has been repeated 30 times for GRASP and VNS.</p>
            </caption>
            <table>
               <thead>
                  <tr>
                     <td> | F |</td>
                     <td> | C |</td>
                     <td> #</td>
                     <td> GRASP dBCP − dBCP in %</td>
                     <td> V NS dBCP − dBCP in %</td>
                     <td> GRASP dBCP</td>
                     <td> dBCP V NS</td>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td> 75</td>
                     <td> 75</td>
                     <td> 12</td>
                     <td> 5.02 (2.08)</td>
                     <td> 3.90 (1.45)</td>
                     <td> 0.09</td>
                     <td> 0.17</td>
                  </tr>
                  <tr>
                     <td> 100</td>
                     <td> 100</td>
                     <td> 12</td>
                     <td> 4.09 (1.30)</td>
                     <td> 3.45 (1.16)</td>
                     <td> 0.23</td>
                     <td> 0.27</td>
                  </tr>
                  <tr>
                     <td> 200</td>
                     <td> 200</td>
                     <td> 12</td>
                     <td> 4.07 (2.03)</td>
                     <td> 3.25 (1.14)</td>
                     <td> 1.79</td>
                     <td> 1.81</td>
                  </tr>
                  <tr>
                     <td> 75</td>
                     <td> 200</td>
                     <td> 12</td>
                     <td> 1.86 (0.32)</td>
                     <td> 0.95 (0.28)</td>
                     <td> 0.58</td>
                     <td> 0.59</td>
                  </tr>
                  <tr>
                     <td> 200</td>
                     <td> 75</td>
                     <td> 12</td>
                     <td> -6.23 (23.59)</td>
                     <td> -5.62 (23.71)</td>
                     <td> 0.01</td>
                     <td> 0.01</td>
                  </tr>
               </tbody>
            </table>
         </table-wrap>
      </sec>
      <sec>
         <title>References</title>
      </sec>
   </body>
   <back>
      <ref-list>
         <ref id="R1">
            <mixed-citation>1. Leitner, M., Raidl, G.R.: Combining Lagrangian decomposition with very large scale neighborhoood search for capacitated connected facility location. In: Post- Conference Book of the Eight Metaheuristics International Conference – MIC 2009. (to appear)</mixed-citation>
         </ref>
         <ref id="R2">
            <mixed-citation>2. Leitner, M., Raidl, G.R.: Branch-and-cut-and-price for capacitated connected facility location. Technical Report TR 186–1–10–01, Vienna University of Technology, Vienna, Austria (2010)</mixed-citation>
         </ref>
         <ref id="R3">
            <mixed-citation>3. Martello, S., Pisinger, D., Toth, P.: Dynamic programming and strong bounds for the 0–1 knapsack problem. Management Science 45 (3) (1999) 414–424</mixed-citation>
         </ref>
         <ref id="R4">
            <mixed-citation>4. Hansen, P., Mladenović, N.: Variable neighborhood search: Principles and applica- tions. European Journal of Operational Research 130 (3) (2001) 449–467</mixed-citation>
         </ref>
         <ref id="R5">
            <mixed-citation>5. Voß, S.: Steiner’s problem in graphs: heuristic methods. Discrete Applied Mathe- matics 40 (1992) 45–72</mixed-citation>
         </ref>
         <ref id="R6">
            <mixed-citation>6. Contreras, I.A., Diaz, J.A.: Scatter search for the single source capacitated facility location problem. Annals of Operations Research 157 (1) (2008) 73–89</mixed-citation>
         </ref>
         <ref id="R7">
            <mixed-citation>7. Feo, T., Resende, M.: Greedy randomized adaptive search procedures. Journal of Global Optimization 6 (2) (1995) 109–133</mixed-citation>
         </ref>
      </ref-list>
   </back>
</article>