<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>c913ddfa71b4404d9777fdf788d52df4521b4a59365cc00c0ef8975f5ea3b3dc</job>
    <base_name>l3u</base_name>
    <doi>http://dx.doi.org/10.1007/978-3-642-27549-4_33</doi>
    <warning>Name identification was not possible. </warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">A Multilevel Heuristic for the Rooted Delay-Constrained Minimum Spanning Tree Problem</article-title>
      </title-group>
      <region class="DoCO:TextChunk" id="3" confidence="possible">Martin Berlakovich, Mario Ruthmair, and Günther R. Raidl Institute of Computer Graphics and Algorithms Vienna University of Technology, Vienna, Austria <email id="2">berlmart@a1.net</email>, { ruthmair|raidl } @ads.tuwien.ac.at</region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="4" page="1" column="1">1 Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="11" page="1" column="1">The rooted delay-constrained minimum spanning tree (RDCMST) problem is an NP-hard [ <xref ref-type="bibr" rid="R3" id="5" class="deo:Reference">3</xref>] combinatorial optimization problem. The objective is to find a minimum cost spanning tree in a given graph with cost and delay values assigned to each edge. Additionally, a delay-bound is given limiting the maximum delay allowed for each path between a specified root vertex and any other vertex in the graph. This problem appears in practice for example when designing a distribution network with a guarantee of timely delivery. Another example would be a centralized broadcasting network where the delay-bound represents a quality of service constraint. More formally, we are given a graph G = ( V, E ) with a set V of vertices, a set E of edges, a source vertex s ∈ V and a delay-bound B &gt; 0. Additionally a cost function c : E → R + as well as a delay function d : E → R + assign cost and delay values to the edges. In an optimal spanning tree T = ( V, E ′ ) , E ′ ⊆ E , the costs c ( T ) = e ∈ E ′ c ( e ) are minimal and the delay constraints e ∈ P ( s,v ) d ( e ) ≤ B, ∀ v ∈ V , are satisfied; P ( s, v ) denotes the unique path between the source s and vertex v . Gouveia et al. [<xref ref-type="bibr" rid="R1" id="6" class="deo:Reference">1</xref>] present approaches based on mixed integer programming and constrained shortest paths to derive strong lower bounds and to solve the problem to proven optimality. However, these methods can only be applied to graphs with significantly less than 100 nodes to obtain optimal solutions within a reasonable amount of time in case of complete graphs. Two construction heuristics for the RDCMST problem have been presented. In [<xref ref-type="bibr" rid="R3" id="7" class="deo:Reference">3</xref>] a heuristic based on Prim’s algorithm to find a minimum spanning tree is described. A more recent approach is the Kruskal-based heuristic introduced in [<xref ref-type="bibr" rid="R2" id="8" class="deo:Reference">2</xref>], which uses a merge process similar to Kruskal’s minimum spanning tree algorithm while considering the delay-constraints. In addition constructed solutions are improved by variable neighborhood descent. Both heuristics are based on adding edges to the tree trying to minimize the costs in each step. However, the delay is ignored as long as no constraint violation occurs. This can sometimes lead to relatively poor solutions with a rather low potential for further improvement by local search methods. Therefore<marker type="page" number="2"/><marker type="block"/> we introduce here a heuristic that uses a new measurement for the suitability of edges. This heuristic is based on the multilevel paradigm [<xref ref-type="bibr" rid="R4" id="10" class="deo:Reference">4</xref>] firstly creating a hierarchy of approximations of the original problem by recursive coarsening. After an initial solution has been found on the coarsest level it is iteratively refined in each level obtaining a feasible solution for the original problem in the end. This multilevel-based construction heuristic does not primarily attempt to create a low cost solution by itself but a promising starting solution for further improvement by local search.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="12" page="2" column="1">2 Ranking Score</h1>
        <region class="DoCO:TextChunk" id="13" page="2" column="1">In the above construction heuristics, the inclusion of an edge with low costs is not necessarily cheap regarding the overall solution. If an edge with low costs but high delay is used it can affect the further construction of the solution negatively. The high delay can force a heuristic to use very expensive edges with low delay in order to not violate the delay constraint. Such decisions sometimes create weak solutions corresponding to poor local optima which even good improvement procedures are not able to overcome. In an attempt to judge how promising an edge is, the ranking score is introduced. It is more likely that an edge with comparatively low costs and low delay is part of an optimal solution than an edge with very low costs but high delay. The ranking score score ( e ) describes the relative cost in relation to the delay of an edge e ∈ E in comparison to other edges:</region>
        <disp-formula class="DoCO:FormulaBox" id="F1">
          <label class="DoCO:Label" id="14">1</label>
          <content class="DoCO:Formula" id="15" page="2" column="1">score ( e ) = 1 − r e c − 1 · 1 − r e d − 1 | E | | E |</content>
        </disp-formula>
        <region class="DoCO:TextChunk" id="16" page="2" column="1">Here, r e c ∈ { 1 , . . . , | E |} and r e d ∈ { 1 , . . . , | E |} represent the cost and delay ranks of edge e , which are obtained by sorting the edges according to costs and delays, respectively. The ranking score of a vertex v ∈ V is the sum of the scores of all incident edges.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="17" page="2" column="1">3 Ranking-Based Multilevel Heuristic</h1>
        <region class="DoCO:TextChunk" id="21" page="2" column="1">The ranking-based multilevel heuristic (RBMH) follows a multilevel strategy. In each level a number of vertices, including the source vertex, is selected as so-called supervertices. The remaining vertices are connected directly to these supervertices creating multiple subtrees in each level. The RBMH uses the ranking scores to determine which vertices and edges are used. Vertices with high ranking scores are supposed to have many or at least high quality incident edges. This makes them more promising to be the root of a subtree in an optimal solution. After choosing a set of these supervertices all remaining vertices are connected to them using the edges with the highest ranking scores satisfying the delay-constraints. The subtrees with supervertices as their roots represent the vertices in the next level. This process is continued <marker type="page" number="3"/><marker type="block"/> until only one supervertex, the source vertex, remains corresponding to a feasible solution for the original problem. The RBMH runs in O ( | E | log | E | + | V | 2 ) time.</region>
        <region class="DoCO:TableBox" id="T1">
          <caption class="deo:Caption" id="19" page="3" column="1">Table 1. Comparison of RBMH and Kruskal-based heuristic, applied on a set of 30 random instances (complete graphs) with 500 and 1000 vertices ( B : delay-bound, c : average final objective values, σ : standard deviations, t [ s ]: runtime in seconds). Tests have been executed on Xeon E5540 processors with about 3 GB RAM per core.</caption>
          <content>
            <h1 class="table"> 500 vertices 1000 vertices</h1>
            <table class="DoCO:Table" number="1" page="3">
              <thead class="table">
                <tr class="table">
                  <th class="table"></th>
                  <th class="table"> RBMH +</th>
                  <th class="table"> VND</th>
                  <th class="table"> Kruskal +</th>
                  <th class="table"> VND</th>
                  <th class="table"> RMBH +</th>
                  <th class="table"> VND</th>
                  <th class="table"> Kruskal +</th>
                  <th class="table"> VND</th>
                </tr>
              </thead>
              <tbody>
                <tr class="table">
                  <td class="table"> B</td>
                  <td class="table"> c σ</td>
                  <td class="table"> t [ s ]</td>
                  <td class="table"> c σ</td>
                  <td class="table"> t [ s ]</td>
                  <td class="table"> c σ</td>
                  <td class="table"> t [ s ]</td>
                  <td class="table"> c σ</td>
                  <td class="table"> t [ s ]</td>
                </tr>
                <tr class="table">
                  <td class="table"> 10</td>
                  <td class="table"> 4634 225</td>
                  <td class="table"> 1.99</td>
                  <td class="table"> 4557 205</td>
                  <td class="table"> 1.45</td>
                  <td class="table"> 5290 212</td>
                  <td class="table"> 9.33</td>
                  <td class="table"> 5171 215</td>
                  <td class="table"> 7.52</td>
                </tr>
                <tr class="table">
                  <td class="table"> 30</td>
                  <td class="table"> 1530 85</td>
                  <td class="table"> 4.42</td>
                  <td class="table"> 1554 88</td>
                  <td class="table"> 4.37</td>
                  <td class="table"> 1871 71</td>
                  <td class="table"> 23.55</td>
                  <td class="table"> 1884 55</td>
                  <td class="table"> 20.04</td>
                </tr>
                <tr class="table">
                  <td class="table"> 50</td>
                  <td class="table"> 1010 64</td>
                  <td class="table"> 7.99</td>
                  <td class="table"> 1042 56</td>
                  <td class="table"> 6.22</td>
                  <td class="table"> 1334 50</td>
                  <td class="table"> 33.81</td>
                  <td class="table"> 1373 44</td>
                  <td class="table"> 32.93</td>
                </tr>
                <tr class="table">
                  <td class="table"> 75</td>
                  <td class="table"> 765 33</td>
                  <td class="table"> 10.90</td>
                  <td class="table"> 800 37</td>
                  <td class="table"> 9.44</td>
                  <td class="table"> 1113 32</td>
                  <td class="table"> 57.75</td>
                  <td class="table"> 1146 32</td>
                  <td class="table"> 51.42</td>
                </tr>
                <tr class="table">
                  <td class="table"> 100</td>
                  <td class="table"> 642 28</td>
                  <td class="table"> 13.64</td>
                  <td class="table"> 687 44</td>
                  <td class="table"> 12.75</td>
                  <td class="table"> 1038 12</td>
                  <td class="table"> 75.79</td>
                  <td class="table"> 1070 32</td>
                  <td class="table"> 62.76</td>
                </tr>
                <tr class="table">
                  <td class="table"> 150</td>
                  <td class="table"> 547 11</td>
                  <td class="table"> 16.71</td>
                  <td class="table"> 587 36</td>
                  <td class="table"> 12.25</td>
                  <td class="table"> 1005 4</td>
                  <td class="table"> 74.13</td>
                  <td class="table"> 1022 24</td>
                  <td class="table"> 57.96</td>
                </tr>
                <tr class="table">
                  <td class="table"> 200</td>
                  <td class="table"> 522 6</td>
                  <td class="table"> 13.55</td>
                  <td class="table"> 545 27</td>
                  <td class="table"> 10.90</td>
                  <td class="table"> 1001 2</td>
                  <td class="table"> 74.58</td>
                  <td class="table"> 1008 16</td>
                  <td class="table"> 37.65</td>
                </tr>
              </tbody>
            </table>
          </content>
          <region class="TableInfo" id="20" confidence="possible" page="3" column="1">500 vertices 1000 vertices RBMH + VND Kruskal + VND RMBH + VND Kruskal + VND B c σ t [ s ] c σ t [ s ] c σ t [ s ] c σ t [ s ] 10 4634 225 1.99 4557 205 1.45 5290 212 9.33 5171 215 7.52 30 1530 85 4.42 1554 88 4.37 1871 71 23.55 1884 55 20.04 50 1010 64 7.99 1042 56 6.22 1334 50 33.81 1373 44 32.93 75 765 33 10.90 800 37 9.44 1113 32 57.75 1146 32 51.42 100 642 28 13.64 687 44 12.75 1038 12 75.79 1070 32 62.76 150 547 11 16.71 587 36 12.25 1005 4 74.13 1022 24 57.96 200 522 6 13.55 545 27 10.90 1001 2 74.58 1008 16 37.65</region>
        </region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="22" page="3" column="1">4 Preliminary Results</h1>
        <region class="DoCO:TextChunk" id="26" page="3" column="1">The RBMH has been tested on large random instances from [<xref ref-type="bibr" rid="R2" id="23" class="deo:Reference">2</xref>] with complete graphs of 500 and 1000 vertices and the results are compared to those of the Kruskal-based heuristic. In all cases the variable neighborhood descent (VND) of [<xref ref-type="bibr" rid="R2" id="24" class="deo:Reference">2</xref>] is applied to improve constructed solutions. The exemplary results listed in <xref ref-type="table" rid="T1" id="25" class="deo:Reference">Table 1</xref> document that the RBMH combined with VND produces on average better results than the Kruskal-based heuristic using the same improvement with the exception of tight delay-bounds. The RBMH solution usually has higher costs as corresponding solutions of previous construction heuristics but at the same time offers higher potential for later improvement phases. Concerning the runtime the RBMH tests are slower since more time is spent in the improvement phase.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="27" page="3" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="28" page="3" column="1">1. Gouveia, L., Paias, A., Sharma, D.: Modeling and solving the rooted distance- constrained minimum spanning tree problem. Computers and Operations Research 35(2), 600–613 (2008)</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="29" page="3" column="1">2. Ruthmair, M., Raidl, G.R.: A Kruskal-Based Heuristic for the Rooted Delay- Constrained Minimum Spanning Tree Problem. In: Moreno-D ́ ıaz, R., Pichler, F., Quesada-Arencibia, A. (eds.) EUROCAST 2009. LNCS, vol. 5717, pp. 713–720. Springer (2009)</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="30" page="3" column="1">3. Salama, H.F., Reeves, D.S., Viniotis, Y.: The delay-constrained minimum spanning tree problem. In: Blum, C., Roli, A., Sampels, M. (eds.) Proceedings of the 2nd IEEE Symposium on Computers and Communications – ISCC ’97. pp. 699–703 (1997)</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="31" page="3" column="1">4. Walshaw, C.: Multilevel refinement for combinatorial optimisation problems. Annals of Operations Research 131(1), 325–372 (2004)</ref>
        </ref-list>
      </section>
    </body>
  </article>
</pdfx>
