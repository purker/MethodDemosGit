<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>450f6fa393864849604abe7b0995bfaf1fb49c71b36938aca7bb2cff2b664037</job>
    <base_name>l4p</base_name>
    <doi>http://dx.doi.org/10.24963/ijcai.2017/109</doi>
    <warning>Name identification was not possible. </warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Polynomial Combined Rewritings for Linear Existential Rules and DL-Lite with n-ary Relations</article-title>
      </title-group>
      <region class="DoCO:TextChunk" id="5" confidence="possible">Georg Gottlob 1 , Marco Manna 2 , and Andreas Pieris 3 1 Department of Computer Science, University of Oxford, UK <email id="2">georg.gottlob@cs.ox.ac.uk</email> 2 Department of Mathematics and Computer Science, University of Calabria, Italy <email id="3">manna@mat.unical.it</email> 3 Institute of Information Systems, Vienna University of Technology, Austria <email id="4">pieris@dbai.tuwien.ac.at</email></region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="6" page="1" column="1">1 Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="15" page="1" column="1">This paper considers the setting of ontology-based query answering (OBQA). In this setting, Description Logics (DLs) and existential rules (a.k.a. tuple-generating depen- dencies or Datalog ± rules) are popular ontology languages, while conjunctive queries (CQs) is the main querying tool. Among KR researchers there is a clear consensus that the required level of scalability in OBQA can only be achieved via query rewriting, which attempts to reduce OBQA into the problem of evaluating a query over a relational database. Two query languages are usually considered: first-order queries ( FO ) and non-recursive Datalog queries ( NDL ). An interesting approach to query rewriting is the polynomial combined approach [<xref ref-type="bibr" rid="R7" id="7" class="deo:Reference">7</xref>], which can be described as follows: an ontology Σ can be incorporated together with a CQ q into a database query q Σ in polynomial time, and also with a database D into a database D Σ in polynomial time, such that q Σ over D Σ yields the same result as q evaluated over the knowledge base consisting of D and Σ . The polynomial combined approach has been applied to ELH dr ⊥ [<xref ref-type="bibr" rid="R7" id="8" class="deo:Reference">7</xref>], an extension of the well-known DL EL , to DL-Lite N horn [<xref ref-type="bibr" rid="R5" id="9" class="deo:Reference">5</xref>, <xref ref-type="bibr" rid="R6" id="10" class="deo:Reference">6</xref>], one of the most expressive logics of the DL-Lite family, and only recently to the main guarded- and sticky-based classes of existential rules [<xref ref-type="bibr" rid="R3" id="11" class="deo:Reference">3</xref>]. Research Challenges. The problem of applying the polynomial combined approach to existing DLs and classes of existential rules is relatively understood. Nevertheless, there are still basic open questions that deserve our attention. Regarding DLs, little is known about formalisms with n -ary relations such as DLR-Lite R , that is, the extension of DL-Lite R with n -ary roles. Regarding existential rules, it is open whether the polynomial combined approach can be applied to the class of linear existential rules (or simply linear rules ), that is, assertions of the form ∀ X ∀ Y ( s ( X , Y ) → ∃ Z p ( X , Z )) , where s ( X , Y ) and p ( X , Z ) are atomic formulas [<xref ref-type="bibr" rid="R1" id="12" class="deo:Reference">1</xref>]. It is not difficult to show that, if linear rules are polynomially combined rewritable, then also DLR-Lite R is polynomially combined rewritable — this follows from the fact that query answering under DLR-Lite R can be easily reduced to query answering under linear rules [<xref ref-type="bibr" rid="R1" id="13" class="deo:Reference">1</xref>]. Thus, the key question that we need to answer, which has been explicitly stated as an open problem in [<xref ref-type="bibr" rid="R3" id="14" class="deo:Reference">3</xref>], is the following:</region>
      <region class="unknown" id="16" page="2" column="1">p ( a , b , c ) p ( b , c , d ) p ( a , z 1 , b ) p ( b , z 5 , c ) p ( z 1 , a , z 2 ) p ( b , z 4 , z 1 ) z 1 z 5 p ( z 1 , z 3 , a ) p ( z 4 , z 1 , b ) p ( z 5 , c , b ) z 3 z 4 (b) p ( z 3 , a , z 1 ) ∃ A ∃ B ∃ C ∃ D ( p ( A , a , B ) ∧ p ( C , B , b ) ∧ p ( D , c , b )) (a)</region>
      <region class="DoCO:FigureBox" id="F1">
        <caption class="deo:Caption" id="17" page="2" column="1">Fig. 1. Illustration of a proof generator.</caption>
      </region>
      <region class="unknown" id="18" page="2" column="1">Given a (Boolean) CQ q , a database D , and a set Σ of linear rules, can we rewrite</region>
      <disp-formula class="DoCO:FormulaBox" id="Fi">
        <label class="DoCO:Label" id="19">i</label>
        <content class="DoCO:Formula" id="20" confidence="possible" page="2" column="1">in polynomial time: q and Σ , independently of D , into a Q -query q Σ , where</content>
      </disp-formula>
      <disp-formula class="DoCO:FormulaBox" id="Fii">
        <label class="DoCO:Label" id="21">ii</label>
        <content class="DoCO:Formula" id="22" page="2" column="1">Q ∈ { FO , NDL } , and D and Σ , independently of q , into a database D Σ , such</content>
      </disp-formula>
      <region class="unknown" id="23" page="2" column="1">that ( D ∪ Σ ) | = q iff D Σ | = q Σ ?</region>
      <region class="DoCO:TextChunk" id="26" page="2" column="1">The answer to the above question is affirmative under the assumption that the arity of the underlying schema is bounded; implicit in [<xref ref-type="bibr" rid="R2" id="24" class="deo:Reference">2</xref>]. However, little is known for arbi- trary linear rules, without any assumption on the underlying schema. We give a positive answer even for linear rules that use predicates of unbounded arity. For more details, we refer the reader to [<xref ref-type="bibr" rid="R4" id="25" class="deo:Reference">4</xref>].</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="27" page="2" column="1">2 Proof Generator</h1>
        <region class="DoCO:TextChunk" id="29" page="2" column="1">We assume the reader is familiar with the chase procedure . Recall that the chase for a database D and a set Σ of rules, denoted chase ( D, Σ ) , is a universal model of D and Σ , and thus ( D ∪ Σ ) | = q iff chase ( D, Σ ) | = q , for each CQ q . The instance chase ( D, Σ ) can be naturally seen as a directed labeled graph, called chase graph , denoted CG ( D, Σ ) . It is also easy to verify that for linear rules, CG ( D, Σ ) is a directed forest; for details on the chase, see, e.g., [<xref ref-type="bibr" rid="R1" id="28" class="deo:Reference">1</xref>]. Our main technical tool is called proof generator, and it formalizes the intuitive idea that (Boolean) CQ answering under linear rules can be realized as a reachability problem on the chase graph. Let us illustrate the key ideas underlying the proof generator via a simple example.</region>
        <region class="DoCO:TextChunk" id="30" confidence="possible" page="2" column="1">Example 1. Let D = { p ( a, b, c ) , p ( b, c, d ) } , and let Σ be the set of linear rules (for brevity, the universal quantifiers are omitted): p ( X, Y, Z ) → ∃ W p ( X, W, Y ) p ( X, Y, Z ) → ∃ W p ( Z, W, Y ) p ( X, Y, Z ) → ∃ W p ( Y, X, W ) p ( X, Y, Z ) → p ( Y, Z, X ) .</region>
        <region class="DoCO:TextChunk" id="35" page="2" column="1">Given the BCQ q = ∃ A ∃ B ∃ C ∃ D ( p ( A, a, B ) ∧ p ( C, B, b ) ∧ p ( D, c, b )) , as shown in <xref ref-type="fig" rid="F1(a)" id="31" class="deo:Reference">Figure 1(a)</xref>, there exists a homomorphism h (dashed arrows in the figure) that maps q to an initial segment of the chase graph of D and Σ , and thus ( D ∪ Σ ) | = q . It is interesting to observe that the nulls occurring in h ( q ) , i.e., z 1 , z 3 , z 4 and z 5 , form a rooted forest<marker type="page" number="3"/><marker type="block"/> F , depicted in <xref ref-type="fig" rid="F1(b)" id="33" class="deo:Reference">Figure 1(b)</xref>, with the following properties; for brevity, let ν ( z ) be the atom in CG ( D, Σ ) where the null z is invented (see shaded atoms in <xref ref-type="fig" rid="F1(a)" id="34" class="deo:Reference">Figure 1(a)</xref> for ν ( z 1 ) , ν ( z 3 ) , ν ( z 4 ) and ν ( z 5 ) ): (i) for every root node z , ν ( z ) is reachable from D ; (ii) for every edge ( z, w ) , ν ( w ) is reachable from ν ( z ) ; and (iii) for every atom a ∈ h ( q ) , there exists a unique path π in F that contains all the nulls in a , and, assuming that the leaf node of π is z , a is reachable from ν ( z ) . Indeed, it is easy to verify that ν ( z 1 ) and ν ( z 5 ) are reachable from D , ν ( z 3 ) and ν ( z 4 ) are reachable from ν ( z 1 ) , and finally, h ( p ( A, a, B )) = p ( z 3 , a, z 1 ) is reachable from ν ( z 3 ) , h ( p ( C, B, b )) = p ( z 4 , z 1 , b ) is reachable from ν ( z 4 ) , and h ( p ( D, c, b )) = p ( z 5 , c, b ) is reachable from ν ( z 5 ) . Roughly speaking, the triple consisting of: (1) the homomorphism h , that maps q to the chase; (2) the function ν , that gives the atoms in the chase where the nulls occurring in h ( q ) were invented; and (3) the forest F , that encodes how the nulls of h ( q ) depend on each other, as well as the order of their generation, is what we call a proof generator for q w.r.t. D and Σ . The existence of such a triple, allows us to generate the part of the chase due to which the query is entailed, i.e., the proof of the query (hence the name “proof generator”). Therefore, for query answering purposes under linear rules, we simply need to check if such a proof generator exists. Lemma 1. ( D ∪ Σ ) | = q iff there exists a proof generator for q w.r.t. D and Σ .</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="36" page="3" column="1">3 The Combined Rewriting</h1>
        <region class="DoCO:TextChunk" id="38" page="3" column="1">We give a positive answer to our research question regarding linear rules and the polynomial combined approach. More precisely, we show that: Theorem 1. The class of linear rules is polynomially combined Q -rewritable, where Q ∈ { FO , NDL } . To establish the above theorem, we heavily rely on the notion of the proof generator. Fix a (Boolean) CQ q , a database D , and a set Σ of linear rules. By Lemma 1, it suffices to construct in polynomial time a query q Σ ∈ Q (independently of D ), and a database D Σ (independently of q ), such that D Σ | = q Σ iff a proof generator for q w.r.t. D and Σ exists. Roughly, the query q Σ guesses a triple ( h, ν, F ) (as described in Example 1), and then verifies that the guessed triple is a proof generator for q w.r.t. D and Σ . The interesting part of q Σ is the component that applies the crucial reachability checks required by the definition of the proof generator. Although the path among two atoms in the chase graph may be of exponential size, its existence can be checked via Q -queries of polynomial size. An immediate consequence of Theorem 1 is that: Corollary 1. The description logic DLR-Lite R is polynomially combined Q -rewritable, where Q ∈ { FO , NDL } . The results of this work are, for the moment, of theoretical nature and we do not claim that they will directly lead to better practical algorithms. We believe that a smart implementation of the proposed techniques can lead to more efficient rewriting procedures; this will be the subject of future research. We are also planning to optimize the proposed rewriting algorithm, with the aim of constructing queries of optimal size. <marker type="page" number="4"/><marker type="block"/> Acknowledgements. G. Gottlob was supported by the EPSRC Programme Grant EP/M025268/ “VADA: Value Added Data Systems – Principles and Architecture”. M. Manna was supported by the MIUR project “SI-LAB BA2KNOW – Business Anali- tycs to Know”, and by Regione Calabria, programme POR Calabria FESR 2007-2013, projects “ITravel PLUS” and “KnowRex: Un sistema per il riconoscimento e l’estrazione di conoscenza”. A. Pieris was supported by the Austrian Science Fund (FWF): P25207- N23 and Y698.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="39" page="4" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="40" page="4" column="1">1. Calı, A., Gottlob, G., Lukasiewicz, T.: A general Datalog-based framework for tractable query answering over ontologies. J. Web Sem. 14, 57–83 (2012)</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="41" page="4" column="1">2. Gottlob, G., Kikot, S., Kontchakov, R., Podolskii, V.V., Schwentick, T., Zakharyaschev, M.: The price of query rewriting in ontology-based data access. Artif. Intell. 213, 42–59 (2014)</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="42" page="4" column="1">3. Gottlob, G., Manna, M., Pieris, A.: Polynomial combined rewritings for existential rules. In: KR (2014)</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="43" page="4" column="1">4. Gottlob, G., Manna, M., Pieris, A.: Polynomial rewritings for linear existential rules. In: IJCAI (2015)</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="44" page="4" column="1">5. Kontchakov, R., Lutz, C., Toman, D., Wolter, F., Zakharyaschev, M.: The combined approach to query answering in DL-Lite. In: KR (2010)</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="45" page="4" column="1">6. Kontchakov, R., Lutz, C., Toman, D., Wolter, F., Zakharyaschev, M.: The combined approach to ontology-based data access. In: IJCAI. pp. 2656–2661 (2011)</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="46" page="4" column="1">7. Lutz, C., Toman, D., Wolter, F.: Conjunctive query answering in the description logic EL using a relational database system. In: IJCAI. pp. 2070–2075 (2009)</ref>
        </ref-list>
      </section>
    </body>
  </article>
</pdfx>
