<Publication>
  <id>TUW-140253</id>
  <title>FROM STATIC TO DYNAMIC PROCESS TYPES</title>
  <abstractText> Process types – a kind of behavioral types – specify constraints on message acceptance for the purpose of synchronization and to determine object usage and component behavior in object-oriented languages. So far process types have been regarded as a purely static concept for Actor languages incompatible with inherently dynamic programming techniques. We propose solutions of related problems causing the approach to become useable in more conventional dynamic and concurrent languagues. The proposed approach can ensure message acceptability and support local and static checking of race-free programs.</abstractText>
  <keywords/>
  <authors/>
  <affiliations/>
  <sections>
    <Section>
      <title>1 INTRODUCTION</title>
      <type>deo:Introduction</type>
      <typeEnum>INTRODUCTION</typeEnum>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <title>2 STATIC PROCESS TYPES</title>
      <type>DoCO:Section</type>
      <typeEnum>METHOD</typeEnum>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <title>3 DYNAMIC TOKENS</title>
      <type>DoCO:Section</type>
      <typeEnum>METHOD</typeEnum>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <title>4 DYNAMIC TYPING</title>
      <type>DoCO:Section</type>
      <typeEnum>METHOD</typeEnum>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <title>5 RACE-FREE PROGRAMS</title>
      <type>DoCO:Section</type>
      <typeEnum>METHOD</typeEnum>
      <referenceIds/>
      <referenceCitations/>
    </Section>
    <Section>
      <title>6 DISCUSSION, RELATED WORK</title>
      <type>DoCO:Section</type>
      <typeEnum>METHOD</typeEnum>
      <referenceIds>
        <string>Puntigam, 1995</string>
        <string>Boyapati and Rinard, 2001</string>
        <string>Hansen, 1975</string>
        <string>Flanagan and Abadi, 1999</string>
        <string>Puntigam, 1995</string>
        <string>Arbab, 2005</string>
        <string>Alfaro and Henzinger, 2001</string>
        <string>Jacobsen and Krämer, 1998</string>
        <string>Lee and Xiong, 2004</string>
        <string>Mezini and Ostermann, 2002</string>
        <string>Plasil and Visnovsky, 2002</string>
        <string>Liskov and Wing, 1993</string>
        <string>Meyer, 1997</string>
        <string>Meyer, 2003</string>
        <string>Yonezawa, 1993</string>
        <string>Caromel, 1993</string>
        <string>Meyer, 1993</string>
        <string>Nierstrasz, 1993</string>
        <string>Nielson and Nielson, 1993</string>
        <string>Colaco et al., 1997</string>
        <string>Kobayashi and Yonezawa, 1994</string>
        <string>Meyer, 1993</string>
        <string>Milner et al., 1992</string>
        <string>Kobayashi et al., 1999</string>
        <string>Najm and Nimour, 1997</string>
      </referenceIds>
      <referenceCitations/>
    </Section>
    <Section>
      <title>7 CONCLUSION</title>
      <type>deo:Conclusion</type>
      <typeEnum>CONCLUSIONS</typeEnum>
      <referenceIds>
        <string>Choi et al., 1999</string>
        <string>Rinard, 2001</string>
      </referenceIds>
      <referenceCitations/>
    </Section>
  </sections>
  <citationContexts/>
  <references>
    <Reference>
      <id>ref86</id>
      <referenceIdString>86</referenceIdString>
      <authors/>
      <referenceText>Agha, G., Mason, I. A., Smith, S., and Talcott, C. (1992). Towards a theory of actor computation. In Proceedings CONCUR’92 , number 630 in Lecture Notes in Computer Science, pages 565–579. Springer-Verlag.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref87</id>
      <referenceIdString>87</referenceIdString>
      <authors/>
      <referenceText>Arbab, F. (2005). Abstract behavior types: A foundation model for components and their composition. Science of Computer Programming , 55(1–3):3–52.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref88</id>
      <referenceIdString>88</referenceIdString>
      <authors/>
      <referenceText>Bacon, D. F., Strom, R. E., and Tarafdar, A. (2000). Guava:</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref89</id>
      <referenceIdString>89</referenceIdString>
      <authors/>
      <referenceText>A dialect of Java without data races. In OOPSLA 2000 .</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref90</id>
      <referenceIdString>90</referenceIdString>
      <authors/>
      <referenceText>Boyapati, C. and Rinard, M. (2001). A parameterized type system for race-free Java programs. In OOPSLA 2001 . ACM.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref91</id>
      <referenceIdString>91</referenceIdString>
      <authors/>
      <referenceText>Brinch-Hansen, P. (1975). The programming language Concurrent Pascal. IEEE Transactions on Software Engineering , 1(2):199–207.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref92</id>
      <referenceIdString>92</referenceIdString>
      <authors/>
      <referenceText>Caromel, D. (1993). Toward a method of object-oriented concurrent programming. Communications of the ACM , 36(9):90–101.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref93</id>
      <referenceIdString>93</referenceIdString>
      <authors/>
      <referenceText>Choi, J.-D., Gupta, M., Serrano, M., Sreedhar, V. C., and Midkiff, S. (1999). Escape analysis for Java. In OOP- SLA’99 , Denver, Colorado.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref94</id>
      <referenceIdString>94</referenceIdString>
      <authors/>
      <referenceText>Colaco, J.-L., Pantel, M., and Salle, P. (1997). A set- constraint-based analysis of actors. In Proceedings FMOODS’97 , Canterbury, United Kingdom. Chapman &amp; Hall.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref95</id>
      <referenceIdString>95</referenceIdString>
      <authors/>
      <referenceText>de Alfaro, L. and Henzinger, T. A. (2001). Interface au- tomata. In Proceedings of the Ninth Annual Sympo- sium on Foundations of Software Engineering (FSE) , pages 109–120. ACM Press.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref96</id>
      <referenceIdString>96</referenceIdString>
      <authors/>
      <referenceText>Flanagan, F. and Abadi, M. (1999). Types for safe locking. In Proceedings ESOP’99 , Amsterdam, The Nether- lands.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref97</id>
      <referenceIdString>97</referenceIdString>
      <authors/>
      <referenceText>Heuzeroth, D. and Reussner, R. (1999). Meta-protocol [1] and Agha type system for the dynamic coupling of binary [2] com- Arbab ponents. In OORASE’99: OOSPLA’99 Workshop [3] Bacon on Reflection and Software Engineering , Bicocca, [4] Italy. Boyapati</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref98</id>
      <referenceIdString>98</referenceIdString>
      <authors/>
      <referenceText>Jacobsen, H.-A. and Krämer, B. J. (1998). [5] A design Meyer pattern tion adaptors based from approach annotated to generating IDL. In IEEE synchroniza- [6] Interna- Brinch-Hansen tional Conference on Automated Software [7] Engineer- Mezini ing (ASE’98) , pages 63–72, Honolulu, Hawaii, [8] USA.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref99</id>
      <referenceIdString>99</referenceIdString>
      <authors/>
      <referenceText>Kobayashi, N., Pierce, B., and Turner, D. (1999). [9] Linearity Milner and the pi-calculus. ACM Transactions on [10] Program- Choi ming Languages and Systems , 21(5):914–947. [11] Najm</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref100</id>
      <referenceIdString>100</referenceIdString>
      <authors/>
      <referenceText>Kobayashi, N. and Yonezawa, A. (1994). Type-theoretic [12] foundations for concurrent object-oriented [13] program- ceedings ming. ACM OOPSLA’94. SIGPLAN Notices , 29(10):31–45. [14] [15] Pro- De</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref101</id>
      <referenceIdString>101</referenceIdString>
      <authors/>
      <referenceText>Lee, E. and A. its and application Xiong, Y. in (2004). Ptolemy A behavioral II. Formal type Aspects [16] system of Computing , 16(3):210–237. [17]</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref102</id>
      <referenceIdString>102</referenceIdString>
      <authors/>
      <referenceText>Liskov, B. and Wing, J. M. (1993). Specifications [18] and their use in defining subtypes. ACM SIGPLAN [19] Notices , 28(10):16–28. Proceedings OOPSLA’93. [20]</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref103</id>
      <referenceIdString>103</referenceIdString>
      <authors/>
      <referenceText>Matsuoka, S. and Yonezawa, A. (1993). Analysis [21] of inheritance anomaly in object-oriented concurrent [22] programming languages. In Agha, G., editor, [23] Research Directions in Concurrent Object-Oriented [24] Programming . The MIT Press. [25]</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref104</id>
      <referenceIdString>104</referenceIdString>
      <authors/>
      <referenceText>Meyer, 36(9):56–80. oriented B. (1993). programming. Systematic Communications concurrent of [27] [26] the object- ACM Lee ,</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref105</id>
      <referenceIdString>105</referenceIdString>
      <authors/>
      <referenceText>Meyer, B. (1997). Object-Oriented Software Construction [28] . Prentice Hall, second edition edition. [29] Südholt</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref106</id>
      <referenceIdString>106</referenceIdString>
      <authors/>
      <referenceText>Puntigam, F. (1995). Flexible types for a concurrent model. Caromel Ravara Puntigam Kobayashi Flanagan Heuzeroth Jacobsen Puntigam Plasil Kobayashi Liskov Nielson Nierstrasz Puntigam Puntigam Colaco Alfaro 1992 2004 Yellin, von Vivien, Ravara, Südholt, Puntigam, Puntigam, Puntigam, 1997 2000 1999 2003 2005 1992 2002 1997 2002 1993 1993 1997 Praun, 2005 1993 2001 on 333. cations ysis PLDI and 2005) ings Computer regular many. types Osnabrück, Jyväskylä gramming interfaces. Component-Oriented Lecture Programming in S., In 1999 2000 1995 1997 2003 1998 D. F. types 2001 1999 1999 1994 Proceedings Programming A. editors, M. escape 1993 for and Euro-Par’97 F. F. M. , for C. F. ’03 and Edinburgh, (2003). (2005). (1997). and 1975 for Notes multi-threaded protocols. and (2000). and a Rinard, , , Science, pages calculus Finland. with Vasconcelos, analysis. Proceedings active Germany. component Gross, In Strom, and in State Coordination of Process 115–128. Eighth A Languages M. , Computer objects. Scotland. Models Concurrent the number pages of Springer-Verlag. model T. In information (2001). R. In Programming concurrent R. Puntigam Puntigam Puntigam Plasil Nierstrasz Milner Meyer Bacon Mezini Nielson Meyer Arbab Brinch-Hansen Boyapati Agha Najm Kobayashi Heuzeroth Caromel Flanagan Jacobsen Kobayashi Lee Colaco Choi De Matsuoka Meyer Liskov Workshop PLDI object-oriented adaptors. ECOOP’97 E. Types International Software V. (2003). 554–561. In of ACM of 1300 (1997). Alfaro Science, T. and Aksit, Concurrency 2004 Incrementalized ’01 requirements components . 1997 1992 1999 Object-Oriented (1997). 2000 1997 2005 1993 2003 Press. . Systems in Der objects. in on Static ACM. 2002 1992 2002 1997 1993 ACM Composition M. , Springer-Verlag. statically , 1993 1993 Lecture Protocol Darmstadt, Object-Oriented number pages 2000 1997 1995 2001 1998 1999 [26] 1993 Andere and [1] [11] 2001 1999 [10] 1999 1994 Workshop programs. conflict Transactions , 1993 [2] [3] [33] [5] [35] Behavioural In , 19(2):292– [17] [9] [7] [12] [28] Matsuoka, Torino. with expressed 367–388, Proceed- [13] [8] Notes checked 1241 specifi- [23] [21] [19] 1975 [4] [20] [30] [16] Verlag, pointer [14] [24] [18] [22] anal- non- Ger- Pro- [15] (SC on In in in</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref107</id>
      <referenceIdString>107</referenceIdString>
      <authors/>
      <referenceText>Meyer, B. (2003). The grand challenge of trusted components. In ICSE-25 (International Conference on Software Engineering) , Portland, Oregon. IEEE Computer Press.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref108</id>
      <referenceIdString>108</referenceIdString>
      <authors/>
      <referenceText>Mezini, M. and Ostermann, K. (2002). Integrating indepen- dent components with on-demand remodularization. In OOPSLA 2002 Conference Proceedings , pages 52– 67, Seattle, Washington. ACM.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref109</id>
      <referenceIdString>109</referenceIdString>
      <authors/>
      <referenceText>Milner, R., Parrow, J., and Walker, D. (1992). A calculus of mobile processes (parts I and II). Information and Computation , 100:1–77.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref110</id>
      <referenceIdString>110</referenceIdString>
      <authors/>
      <referenceText>Najm, E. and Nimour, A. (1997). A calculus of object bindings. In Proceedings FMOODS’97 , Canterbury, United Kingdom. Chapman &amp; Hall.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref111</id>
      <referenceIdString>111</referenceIdString>
      <authors/>
      <referenceText>Nielson, F. and Nielson, H. R. (1993). From CML to process algebras. In Proceedings CONCUR’93 , number 715 in Lecture Notes in Computer Science, pages 493–508. Springer-Verlag.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref112</id>
      <referenceIdString>112</referenceIdString>
      <authors/>
      <referenceText>Nierstrasz, O. (1993). Regular types for active objects. ACM SIGPLAN Notices , 28(10):1–15. Proceedings OOPSLA’93.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
    <Reference>
      <id>ref113</id>
      <referenceIdString>113</referenceIdString>
      <authors/>
      <referenceText>Plasil, F. and Visnovsky, S. (2002). Behavioral protocols for software components. IEEE Transactions on Software Engineering , 28(11):1056–1076.</referenceText>
      <publication reference="/Publication[1]"/>
    </Reference>
  </references>
</Publication>