<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>86ed4f7afb899622487113575b19bae767ef84254a55effb289453633e2c9e41</job>
    <base_name>l3v</base_name>
    <doi>http://dx.doi.org/10.1007/978-3-642-27549-4_38</doi>
    <warning>Name identification was not possible. </warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Variable Neighborhood Search for Capacitated Connected Facility Location</article-title>
      </title-group>
      <region class="DoCO:TextChunk" id="3" confidence="possible">Markus Leitner and Günther R. Raidl Institute of Computer Graphics and Algorithms Vienna University of Technology, Vienna, Austria { leitner|raidl } @ads.tuwien.ac.at <ext-link ext-link-type="uri" href="http://www.ads.tuwien.ac.at" id="2">http://www.ads.tuwien.ac.at</ext-link></region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="4" page="1" column="1">1 Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="8" page="1" column="1">The Capacitated Connected Facility Location Problem (CConFL) is an N P hard combinatorial optimization problem which arises in the design of last mile communication networks (fiber-to-the-curb scenarios) [<xref ref-type="bibr" rid="R1" id="5" class="deo:Reference">1</xref>]. Formally, we are given an undirected, weighted graph G = ( V, E ), with edge costs c e ≥ 0, ∀ e ∈ E . The node set V = { r }∪ F ∪ T is the disjoint union of the root node r , potential facility locations F , and possible Steiner nodes T . Each facility i ∈ F has associated opening costs f i ≥ 0 and a maximum assignable capacity D i ∈ N . Furthermore, we are given a set of potential customers C , with individual capacity demands d k ∈ N and prizes p k ≥ 0, ∀ k ∈ C , the latter corresponding to the expected profit when supplying customer k . Each customer k ∈ C may be assigned to one facility of a subset F k ⊆ F , with assignment costs a i,k ≥ 0, ∀ i ∈ F k . A solution to CConFL S = ( R S , T S , F S , C S , α S ) consists of a Steiner Tree ( R S , T S ), R S ⊆ V , T S ⊆ E , connecting the set of opened facilities F S ⊆ F and the root node r . C S ⊆ C is the set of customers feasibly (i.e. respecting the capacity constraints) assigned to facilities F S , whereas the actual mapping between customers and facilities is described by α S : C S → F S . The objective value of a feasible solution S is given by c ( S ) = e ∈ T S c e + i ∈ F S f i + k ∈ C S a α S ( k ) ,k + k ∈ C \ C S p k , and we aim to identify a most profitable solution minimizing this function. This variant of CConFL has already been tackled by exact methods based on mixed integer programming [<xref ref-type="bibr" rid="R2" id="6" class="deo:Reference">2</xref>] and hybrid approaches based on Lagrangian relaxation [<xref ref-type="bibr" rid="R1" id="7" class="deo:Reference">1</xref>]. Here, we present the first pure metaheuristic approach, which computes high quality solution faster than existing approaches.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="9" page="1" column="1">2 Greedy Solution Construction</h1>
      </section>
      <region class="DoCO:TextChunk" id="14" page="1" column="1">( − f i + k ∈ C ′ p k − a i,k ) Given a partial – possibly empty – solution S , a score δ i = c i i is computed for each facility i ∈ F \ F S . By C i ′ ⊆ C \ C S we denote the optimal set of customers still assignable to i , i.e. the set of customers maximizing the resulting profit which are not yet assigned to another facility in S . C i ′ is computed using the Combo algorithm [ <xref ref-type="bibr" rid="R3" id="10" class="deo:Reference">3</xref>] and we further denote by c i ≥ 0 the costs for<marker type="page" number="2"/><marker type="block"/> connecting i to the partially constructed Steiner tree by means of an additional least-cost path. In each step, we add the facility with maximal score, connect it to the partially constructed Steiner tree, and assign the customers C i ′ to it, as long as at least one facility i with δ i &gt; 1 exists.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="12" page="2" column="1">2</outsider>
      <outsider class="DoCO:TextBox" type="header" id="13" page="2" column="1">Markus Leitner, Günther R. Raidl</outsider>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="15" page="2" column="1">3 General Variable Neighborhood Search</h1>
        <region class="DoCO:TextChunk" id="22" page="2" column="1">In a variable neighborhood descent (VND) [<xref ref-type="bibr" rid="R4" id="16" class="deo:Reference">4</xref>] we apply the following neighborhood structures to improve different aspects of a solution: Key-path improvement [<xref ref-type="bibr" rid="R5" id="17" class="deo:Reference">5</xref>, <xref ref-type="bibr" rid="R1" id="18" class="deo:Reference">1</xref>] to reduce the costs of the Steiner tree and customer swap [<xref ref-type="bibr" rid="R6" id="19" class="deo:Reference">6</xref>, <xref ref-type="bibr" rid="R1" id="20" class="deo:Reference">1</xref>] as well as single customer cyclic exchange [<xref ref-type="bibr" rid="R1" id="21" class="deo:Reference">1</xref>] to optimize realized assignments. For improving the set of opened facilities, we consider a single facility swap neighborhood which adds or removes exactly one facility. A new opened facility is connected by an additional least-cost path while redundant edges are removed after closing a facility in case it has been a leaf of the Steiner tree. In order to escape from local optima, we embed the VND in a variable neighborhood search (VNS) performing shaking by swapping l = 2 , . . . , l max randomly chosen potential facility locations.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="23" page="2" column="1">4 Greedy Randomized Adaptive Search Procedure</h1>
        <region class="DoCO:TextChunk" id="25" page="2" column="1">For comparison purposes we further embed above described VND into a greedy randomized adaptive search procedure (GRASP) [<xref ref-type="bibr" rid="R7" id="24" class="deo:Reference">7</xref>] based on a randomized ver- sion of aforementioned constructive heuristic. Let δ min = argmin δ i { i ∈ F \ F S | δ i &gt; 1 } and δ max be the minimal and maximal scores among all relevant facilities, respectively. Instead of always adding the facility with maximal score, at each step we randomly choose one among the facilities i ∈ F \ F S for which δ max − β ( δ max − δ min ) ≤ δ i ≤ δ max holds.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="26" page="2" column="1">5 Preliminary Results</h1>
        <region class="DoCO:TextChunk" id="35" page="2" column="1">We performed computational experiments using the the instances from [ <xref ref-type="bibr" rid="R1" id="27" class="deo:Reference">1</xref>, <xref ref-type="bibr" rid="R2" id="28" class="deo:Reference">2</xref>]. VNS is terminated after ten consecutive non-improving iterations of the out- ermost largest shaking move of size l max = min {| F | , 10 } . For GRASP we set α = 0 . 2 and generated 100 initial solutions and each experiment has been repeated 30 times on a single core of an Intel Core 2 Quad with 2.83GHz and 8GB RAM. For the VND, we apply the neighborhood structures in the same order as introduced above, but switch back to the first – i.e. the key-path – neighborhood after changing the set of opened facilities only. The single customer cyclic exchange neighborhood is searched using a next improvement strategy, while best improvement is applied for all other neighborhood structures. <xref ref-type="table" rid="T1" id="29" class="deo:Reference">Table 1</xref> summarizes relative average objective values in percent, corresponding standard deviations, and relative median CPU times of the VNS and GRASP<marker type="page" number="3"/><marker type="block"/> compared to the branch-and-cut-and-price approach (dBCP) from [<xref ref-type="bibr" rid="R2" id="33" class="deo:Reference">2</xref>] which performed best among the previously presented methods. An absolute CPU-time limit of 7200 seconds has been applied to dBCP. We conclude, that both GRASP and VNS are able to compute solutions which are only slightly worse that those of dBCP, while usually needing much less CPU-time. For some instances with | F | = 200 and | C | = 75, which are particularly hard for dBCP, the obtained solutions are even significantly better than the ones obtained by dBCP within two hours. VNS seems to have small advantages over GRASP with respect to solution quality, while GRASP is usually slightly faster using the current set- tings. We are currently analyzing the usage of additional large neighborhood structures based on the mixed integer programming models from [<xref ref-type="bibr" rid="R2" id="34" class="deo:Reference">2</xref>] and plan to include a more detailed computational study with additional results on further, larger instances in the full paper.</region>
        <outsider class="DoCO:TextBox" type="header" id="31" page="3" column="1">Variable Neighborhood Search for Capacitated Connected Facility Location</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="32" page="3" column="1">3</outsider>
        <region class="DoCO:TableBox" id="T1">
          <caption class="deo:Caption" id="36" page="3" column="1">Table 1. Relative average solution values in %, corresponding standard deviations, and median CPU times. Instances have been grouped according to | F | and | C | . Each experiment has been repeated 30 times for GRASP and VNS.</caption>
          <content>
            <h1 class="table"> average objective values median CPU times</h1>
            <table class="DoCO:Table" number="1" page="3">
              <thead class="table">
                <tr class="table">
                  <th class="table"> | F |</th>
                  <th class="table"> | C |</th>
                  <th class="table"> #</th>
                  <th class="table"> GRASP dBCP − dBCP in %</th>
                  <th class="table"> V NS dBCP − dBCP in %</th>
                  <th class="table"> GRASP dBCP</th>
                  <th class="table"> dBCP V NS</th>
                </tr>
              </thead>
              <tbody>
                <tr class="table">
                  <td class="table"> 75</td>
                  <td class="table"> 75</td>
                  <td class="table"> 12</td>
                  <td class="table"> 5.02 (2.08)</td>
                  <td class="table"> 3.90 (1.45)</td>
                  <td class="table"> 0.09</td>
                  <td class="table"> 0.17</td>
                </tr>
                <tr class="table">
                  <td class="table"> 100</td>
                  <td class="table"> 100</td>
                  <td class="table"> 12</td>
                  <td class="table"> 4.09 (1.30)</td>
                  <td class="table"> 3.45 (1.16)</td>
                  <td class="table"> 0.23</td>
                  <td class="table"> 0.27</td>
                </tr>
                <tr class="table">
                  <td class="table"> 200</td>
                  <td class="table"> 200</td>
                  <td class="table"> 12</td>
                  <td class="table"> 4.07 (2.03)</td>
                  <td class="table"> 3.25 (1.14)</td>
                  <td class="table"> 1.79</td>
                  <td class="table"> 1.81</td>
                </tr>
                <tr class="table">
                  <td class="table"> 75</td>
                  <td class="table"> 200</td>
                  <td class="table"> 12</td>
                  <td class="table"> 1.86 (0.32)</td>
                  <td class="table"> 0.95 (0.28)</td>
                  <td class="table"> 0.58</td>
                  <td class="table"> 0.59</td>
                </tr>
                <tr class="table">
                  <td class="table"> 200</td>
                  <td class="table"> 75</td>
                  <td class="table"> 12</td>
                  <td class="table"> -6.23 (23.59)</td>
                  <td class="table"> -5.62 (23.71)</td>
                  <td class="table"> 0.01</td>
                  <td class="table"> 0.01</td>
                </tr>
              </tbody>
            </table>
          </content>
          <region class="TableInfo" id="37" confidence="possible" page="3" column="1">average objective values median CPU times | F | | C | # GRASP dBCP − dBCP in % V NS dBCP − dBCP in % GRASP dBCP dBCP V NS 75 75 12 5.02 (2.08) 3.90 (1.45) 0.09 0.17 100 100 12 4.09 (1.30) 3.45 (1.16) 0.23 0.27 200 200 12 4.07 (2.03) 3.25 (1.14) 1.79 1.81 75 200 12 1.86 (0.32) 0.95 (0.28) 0.58 0.59 200 75 12 -6.23 (23.59) -5.62 (23.71) 0.01 0.01</region>
        </region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="38" page="3" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="39" page="3" column="1">1. Leitner, M., Raidl, G.R.: Combining Lagrangian decomposition with very large scale neighborhoood search for capacitated connected facility location. In: Post- Conference Book of the Eight Metaheuristics International Conference – MIC 2009. (to appear)</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="40" page="3" column="1">2. Leitner, M., Raidl, G.R.: Branch-and-cut-and-price for capacitated connected facility location. Technical Report TR 186–1–10–01, Vienna University of Technology, Vienna, Austria (2010)</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="41" page="3" column="1">3. Martello, S., Pisinger, D., Toth, P.: Dynamic programming and strong bounds for the 0–1 knapsack problem. Management Science 45 (3) (1999) 414–424</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="42" page="3" column="1">4. Hansen, P., Mladenović, N.: Variable neighborhood search: Principles and applica- tions. European Journal of Operational Research 130 (3) (2001) 449–467</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="43" page="3" column="1">5. Voß, S.: Steiner’s problem in graphs: heuristic methods. Discrete Applied Mathe- matics 40 (1992) 45–72</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="44" page="3" column="1">6. Contreras, I.A., Diaz, J.A.: Scatter search for the single source capacitated facility location problem. Annals of Operations Research 157 (1) (2008) 73–89</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="45" page="3" column="1">7. Feo, T., Resende, M.: Greedy randomized adaptive search procedures. Journal of Global Optimization 6 (2) (1995) 109–133</ref>
        </ref-list>
      </section>
    </body>
  </article>
</pdfx>
